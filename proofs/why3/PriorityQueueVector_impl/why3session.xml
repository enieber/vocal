<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="5">
<prover id="0" name="Z3" version="4.4.1" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="1" name="CVC4" version="1.5" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="3" name="Z3" version="4.5.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="4" name="Alt-Ergo" version="2.2.0" timelimit="1" steplimit="0" memlimit="1000"/>
<file name="../PriorityQueueVector_impl.mlw" proved="true">
<theory name="Impl" proved="true">
 <goal name="Make.VC t" expl="VC for t" proved="true">
 <proof prover="1"><result status="valid" time="0.37"/></proof>
 </goal>
 <goal name="Make.num_exist" proved="true">
 <proof prover="1"><result status="valid" time="1.45"/></proof>
 </goal>
 <goal name="Make.VC min_coherent" expl="VC for min_coherent" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC min_coherent.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.06"/></proof>
  </goal>
  <goal name="VC min_coherent.1" expl="variant decrease" proved="true">
  <proof prover="1"><result status="valid" time="0.12"/></proof>
  </goal>
  <goal name="VC min_coherent.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.13"/></proof>
  </goal>
  <goal name="VC min_coherent.3" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(i=0)">
   <goal name="VC min_coherent.3.0" expl="true case (postcondition)" proved="true">
   <proof prover="1"><result status="valid" time="0.25"/></proof>
   </goal>
   <goal name="VC min_coherent.3.1" expl="false case (postcondition)" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC min_coherent.3.1.0" expl="false case (postcondition)" proved="true">
    <proof prover="1" timelimit="10" memlimit="4000"><result status="valid" time="2.38"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC min_coherent.4" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.90" steps="1515"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Make.sub_occ_1" proved="true">
 <transf name="split_all_full" proved="true" >
  <goal name="sub_occ_1.0" proved="true">
  <proof prover="1"><result status="valid" time="0.92"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Make.sub_occ_2" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="sub_occ_2.0" proved="true">
  <transf name="assert" proved="true" arg1="(numocc a1 (view a1)[int63&#39;int i] 0 i   = numocc a2 (view a1)[int63&#39;int i] 0 i)">
   <goal name="sub_occ_2.0.0" expl="asserted formula" proved="true">
   <proof prover="1"><result status="valid" time="0.81"/></proof>
   </goal>
   <goal name="sub_occ_2.0.1" proved="true">
   <transf name="assert" proved="true" arg1="(numocc a1 (view a1)[int63&#39;int i] (i+1) (length2 (view a1))  = numocc a2 (view a1)[int63&#39;int i] (i+1) (length2 (view a2)))">
    <goal name="sub_occ_2.0.1.0" expl="asserted formula" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="sub_occ_2.0.1.0.0" expl="asserted formula" proved="true">
     <proof prover="1" timelimit="10" memlimit="4000"><result status="valid" time="1.73"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="sub_occ_2.0.1.1" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="sub_occ_2.0.1.1.0" proved="true">
     <proof prover="1" timelimit="10" memlimit="4000"><result status="valid" time="4.53"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Make.sub_occ_3" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="sub_occ_3.0" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="sub_occ_3.0.0" proved="true">
   <proof prover="1"><result status="valid" time="0.67"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Make.VC sub_order" expl="VC for sub_order" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="VC sub_order.0" expl="VC for sub_order" proved="true">
  <transf name="unfold" proved="true" arg1="heap_order">
   <goal name="VC sub_order.0.0" expl="VC for sub_order" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="VC sub_order.0.0.0" expl="VC for sub_order" proved="true">
    <transf name="case" proved="true" arg1="(i = i1)">
     <goal name="VC sub_order.0.0.0.0" expl="true case" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="VC sub_order.0.0.0.0.0" expl="VC for sub_order" proved="true">
      <proof prover="1"><result status="valid" time="1.32"/></proof>
      </goal>
      <goal name="VC sub_order.0.0.0.0.1" expl="VC for sub_order" proved="true">
      <proof prover="4"><result status="valid" time="0.20" steps="359"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="VC sub_order.0.0.0.1" expl="false case" proved="true">
     <transf name="case" proved="true" arg1="(i = div (i1 - 1) 2)">
      <goal name="VC sub_order.0.0.0.1.0" expl="false case (true case)" proved="true">
      <proof prover="1"><result status="valid" time="0.21"/></proof>
      </goal>
      <goal name="VC sub_order.0.0.0.1.1" expl="false case" proved="true">
      <proof prover="1"><result status="valid" time="0.45"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Make.pop_occ_1" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="pop_occ_1.0" proved="true">
  <transf name="assert" proved="true" arg1="(numocc a1 x 0 (length2 (view a2)) = numocc a2 x 0 (length2 (view a2)))">
   <goal name="pop_occ_1.0.0" expl="asserted formula" proved="true">
   <proof prover="1"><result status="valid" time="0.80"/></proof>
   </goal>
   <goal name="pop_occ_1.0.1" proved="true">
   <proof prover="0"><result status="valid" time="0.05"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Make.pop_occ_2" proved="true">
 <transf name="unfold" proved="true" arg1="numocc&#39;">
  <goal name="pop_occ_2.0" proved="true">
  <transf name="unfold" proved="true" arg1="pop">
   <goal name="pop_occ_2.0.0" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="pop_occ_2.0.0.0" proved="true">
    <proof prover="1" timelimit="10" memlimit="4000"><result status="valid" time="2.20"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Make.pop_order" proved="true">
 <proof prover="4"><result status="valid" time="0.13" steps="234"/></proof>
 </goal>
 <goal name="Make.VC push_occ" expl="VC for push_occ" proved="true">
 <transf name="split_all_full" proved="true" >
  <goal name="VC push_occ.0" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.97"/></proof>
  </goal>
  <goal name="VC push_occ.1" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.16" steps="152"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Make.VC push_order" expl="VC for push_order" proved="true">
 <proof prover="4"><result status="valid" time="0.22" steps="277"/></proof>
 </goal>
 <goal name="Make.same_occ" proved="true">
 <proof prover="1"><result status="valid" time="0.12"/></proof>
 </goal>
 <goal name="Make.VC ancestor" expl="VC for ancestor" proved="true">
 <transf name="split_all_full" proved="true" >
  <goal name="VC ancestor.0" expl="postcondition" proved="true">
  <proof prover="1" timelimit="10" memlimit="4000"><result status="valid" time="3.76"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Make.VC children" expl="VC for children" proved="true">
 <proof prover="1"><result status="valid" time="0.17"/></proof>
 </goal>
 <goal name="Make.VC trans" expl="VC for trans" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC trans.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.05"/></proof>
  </goal>
  <goal name="VC trans.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.12"/></proof>
  </goal>
  <goal name="VC trans.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.05"/></proof>
  </goal>
  <goal name="VC trans.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.06"/></proof>
  </goal>
  <goal name="VC trans.4" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.35"/></proof>
  </goal>
  <goal name="VC trans.5" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Make.VC create" expl="VC for create" proved="true">
 <proof prover="1"><result status="valid" time="0.38"/></proof>
 </goal>
 <goal name="Make.VC is_empty" expl="VC for is_empty" proved="true">
 <proof prover="1"><result status="valid" time="0.15"/></proof>
 </goal>
 <goal name="Make.VC size" expl="VC for size" proved="true">
 <proof prover="1"><result status="valid" time="0.18"/></proof>
 </goal>
 <goal name="Make.VC find_min_exn" expl="VC for find_min_exn" proved="true">
 <proof prover="1"><result status="valid" time="0.11"/></proof>
 </goal>
 <goal name="Make.VC find_min" expl="VC for find_min" proved="true">
 <proof prover="1"><result status="valid" time="0.24"/></proof>
 </goal>
 <goal name="Make.VC move_down" expl="VC for move_down" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC move_down.0" expl="integer overflow" proved="true">
  <proof prover="1"><result status="valid" time="0.09"/></proof>
  </goal>
  <goal name="VC move_down.1" expl="division by zero" proved="true">
  <proof prover="1"><result status="valid" time="0.05"/></proof>
  </goal>
  <goal name="VC move_down.2" expl="integer overflow" proved="true">
  <proof prover="1"><result status="valid" time="0.12"/></proof>
  </goal>
  <goal name="VC move_down.3" expl="integer overflow" proved="true">
  <proof prover="1"><result status="valid" time="0.12"/></proof>
  </goal>
  <goal name="VC move_down.4" expl="integer overflow" proved="true">
  <proof prover="1"><result status="valid" time="0.11"/></proof>
  </goal>
  <goal name="VC move_down.5" expl="integer overflow" proved="true">
  <proof prover="1"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="VC move_down.6" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="VC move_down.7" expl="integer overflow" proved="true">
  <proof prover="1"><result status="valid" time="0.12"/></proof>
  </goal>
  <goal name="VC move_down.8" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.10"/></proof>
  </goal>
  <goal name="VC move_down.9" expl="integer overflow" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC move_down.9.0" expl="integer overflow" proved="true">
   <proof prover="1"><result status="valid" time="0.20"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC move_down.10" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.10"/></proof>
  </goal>
  <goal name="VC move_down.11" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.11"/></proof>
  </goal>
  <goal name="VC move_down.12" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.06"/></proof>
  </goal>
  <goal name="VC move_down.13" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.11"/></proof>
  </goal>
  <goal name="VC move_down.14" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.29"/></proof>
  </goal>
  <goal name="VC move_down.15" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.29"/></proof>
  </goal>
  <goal name="VC move_down.16" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.11"/></proof>
  </goal>
  <goal name="VC move_down.17" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.31"/></proof>
  </goal>
  <goal name="VC move_down.18" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.07"/></proof>
  </goal>
  <goal name="VC move_down.19" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.06"/></proof>
  </goal>
  <goal name="VC move_down.20" expl="precondition" proved="true">
  <transf name="assert" proved="true" arg1="(cmp (view a1)[i] (view a1)[j] &lt;= 0)">
   <goal name="VC move_down.20.0" expl="asserted formula" proved="true">
   <proof prover="1"><result status="valid" time="0.38"/></proof>
   </goal>
   <goal name="VC move_down.20.1" expl="precondition" proved="true">
   <proof prover="3" timelimit="1"><result status="valid" time="0.08"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC move_down.21" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="1.43" steps="1718"/></proof>
  </goal>
  <goal name="VC move_down.22" expl="precondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC move_down.22.0" expl="precondition" proved="true">
   <proof prover="4" timelimit="16"><result status="valid" time="0.20" steps="413"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC move_down.23" expl="assertion" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC move_down.23.0" expl="assertion" proved="true">
   <proof prover="4"><result status="valid" time="0.03" steps="42"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC move_down.24" expl="variant decrease" proved="true">
  <proof prover="1"><result status="valid" time="0.11"/></proof>
  </goal>
  <goal name="VC move_down.25" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.06"/></proof>
  </goal>
  <goal name="VC move_down.26" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.35"/></proof>
  </goal>
  <goal name="VC move_down.27" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.64"/></proof>
  </goal>
  <goal name="VC move_down.28" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.10"/></proof>
  </goal>
  <goal name="VC move_down.29" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.78"/></proof>
  <transf name="case" proved="true" arg1="(e = a2.view[j])">
   <goal name="VC move_down.29.0" expl="true case (postcondition)" proved="true">
   <proof prover="1"><result status="valid" time="0.26"/></proof>
   </goal>
   <goal name="VC move_down.29.1" expl="false case (postcondition)" proved="true">
   <proof prover="1"><result status="valid" time="0.26"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC move_down.30" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC move_down.30.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.47"/></proof>
   </goal>
   <goal name="VC move_down.30.1" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.65"/></proof>
   </goal>
   <goal name="VC move_down.30.2" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.33"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC move_down.31" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.12"/></proof>
  </goal>
  <goal name="VC move_down.32" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.12"/></proof>
  </goal>
  <goal name="VC move_down.33" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.28"/></proof>
  </goal>
  <goal name="VC move_down.34" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.09"/></proof>
  </goal>
  <goal name="VC move_down.35" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.05"/></proof>
  </goal>
  <goal name="VC move_down.36" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.21"/></proof>
  </goal>
  <goal name="VC move_down.37" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.41"/></proof>
  </goal>
  <goal name="VC move_down.38" expl="precondition" proved="true">
  <transf name="case" proved="true" arg1="(j = 2 * i + 1)">
   <goal name="VC move_down.38.0" expl="true case (precondition)" proved="true">
   <transf name="assert" proved="true" arg1="(cmp (view a1)[j] (view a1)[j+1] &lt;= 0)">
    <goal name="VC move_down.38.0.0" expl="asserted formula" proved="true">
    <proof prover="1"><result status="valid" time="0.34"/></proof>
    </goal>
    <goal name="VC move_down.38.0.1" expl="true case (precondition)" proved="true">
    <proof prover="1"><result status="valid" time="0.19"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC move_down.38.1" expl="false case (precondition)" proved="true">
   <proof prover="1"><result status="valid" time="0.10"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC move_down.39" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="sub_order" arg2="a1,a,i">
   <goal name="VC move_down.39.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.06"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC move_down.40" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.10"/></proof>
  </goal>
  <goal name="VC move_down.41" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC move_down.41.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC move_down.41.0.0" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="0.16"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC move_down.41.1" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.28"/></proof>
   </goal>
   <goal name="VC move_down.41.2" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.15"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC move_down.42" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.12"/></proof>
  </goal>
  <goal name="VC move_down.43" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.12"/></proof>
  </goal>
  <goal name="VC move_down.44" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="VC move_down.45" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="sub_order" arg2="a1,a,i">
   <goal name="VC move_down.45.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.39"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC move_down.46" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.10"/></proof>
  </goal>
  <goal name="VC move_down.47" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC move_down.47.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="VC move_down.47.0.0" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="0.25"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC move_down.47.1" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.25"/></proof>
   </goal>
   <goal name="VC move_down.47.2" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.31"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC move_down.48" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.07"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Make.VC extract_min_exn" expl="VC for extract_min_exn" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC extract_min_exn.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.15"/></proof>
  </goal>
  <goal name="VC extract_min_exn.1" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.10"/></proof>
  </goal>
  <goal name="VC extract_min_exn.2" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.25"/></proof>
  </goal>
  <goal name="VC extract_min_exn.3" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.20" steps="382"/></proof>
  </goal>
  <goal name="VC extract_min_exn.4" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.21"/></proof>
  </goal>
  <goal name="VC extract_min_exn.5" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.10"/></proof>
  </goal>
  <goal name="VC extract_min_exn.6" expl="type invariant" proved="true">
  <proof prover="1"><result status="valid" time="0.21"/></proof>
  </goal>
  <goal name="VC extract_min_exn.7" expl="type invariant" proved="true">
  <transf name="case" proved="true" arg1="(x = min)">
   <goal name="VC extract_min_exn.7.0" expl="true case (type invariant)" proved="true">
   <transf name="case" proved="true" arg1="(x = x1)">
    <goal name="VC extract_min_exn.7.0.0" expl="true case (type invariant)" proved="true">
    <proof prover="4"><result status="valid" time="0.90" steps="753"/></proof>
    </goal>
    <goal name="VC extract_min_exn.7.0.1" expl="false case (true case. type invariant)" proved="true">
    <transf name="remove" proved="true" arg1="ref,option,array,int63,elt,min1,mem1,eq_bag,empty_bag,union,add,choose,int63&#39;maxInt,int63&#39;minInt,min_int63,max_int63,to_int1,in_bounds,max_int,min_int,(!),is_none,length,(==),empty,set,([&lt;-]),singleton,cons,snoc,([..]),([_..]),([.._]),(++),is_nil,mem,nth,to_list,of_list,point_wise,fold_left,fold_right,elts,to_int,is_pre_order,minimum,is_minimum,push,h_bag,n,o,h_a2,CompatOrderMult,Abs_le,Abs_pos,Min_r,Max_l,Min_comm,Max_comm,Min_assoc,Max_assoc,div2,Div_mod,Div_bound,Mod_bound,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_1,Mod_1,Div_inf,Mod_inf,Div_mult,Mod_mult,numof_def,Numof_append,Numof_left_no_add,Numof_left_add,Empty,Full,numof_increasing,numof_strictly_increasing,numof_change_any,numof_change_some,numof_change_equiv,occ_non_negative,bag_extensionality,occ_empty,is_empty,occ_singleton_eq,occ_singleton_neq,occ_union,Union_comm,Union_identity,Union_assoc,bag_simpl_right,bag_simpl_left,occ_add_eq,occ_add_neq,Card_nonneg,Card_empty,Card_zero_empty,Card_singleton,Card_union,Card_add,Diff_empty_right,Diff_empty_left,Diff_add,Diff_comm,Add_diff,choose_mem,to_int_in_bounds,extensionality,max_int_def,min_int_def,non_neg_max_array_length,is_none_spec,length_nonnegative,(==)_spec,create_spec,empty_def,set_spec,set_def,([&lt;-])_def,singleton_spec,cons_spec,snoc_spec,([..])_spec,([..])_def,([_..])_def,([.._])_def,(++)_spec,is_nil_spec,Length_nonnegative,Length_nil,Append_assoc,Append_l_nil,Append_length,mem_append,mem_decomp,to_list_empty,to_list_cons,to_list_length,to_list_nth,to_list_def_cons,length_of_list,elts_seq_of_list,is_of_list,of_list_app,of_list_app_length,of_list_snoc,convolution_to_of_list,fold_left_def,fold_left_ext,fold_left_cons,fold_left_app,fold_right_def,fold_right_ext,fold_right_snoc,array&#39;invariant,is_pre_order,t&#39;invariant1,min_def,num_exist,min_coherent,sub_occ_1,sub_occ_2,sub_order,pop_order,same_occ,H,H3,H4,H5,H6,H7,H8,H9,H10,H14">
     <goal name="VC extract_min_exn.7.0.1.0" expl="false case (true case. type invariant)" proved="true">
     <proof prover="1" timelimit="5"><result status="valid" time="0.12"/></proof>
     <proof prover="4" timelimit="5"><result status="valid" time="0.10" steps="426"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="VC extract_min_exn.7.1" expl="false case (type invariant)" proved="true">
   <transf name="case" proved="true" arg1="(x = x1)">
    <goal name="VC extract_min_exn.7.1.0" expl="false case (true case. type invariant)" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC extract_min_exn.7.1.0.0" expl="false case (true case. type invariant)" proved="true">
     <proof prover="4"><result status="valid" time="0.98" steps="577"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="VC extract_min_exn.7.1.1" expl="false case (type invariant)" proved="true">
    <proof prover="4"><result status="valid" time="1.28" steps="914"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC extract_min_exn.8" expl="type invariant" proved="true">
  <proof prover="1"><result status="valid" time="0.09"/></proof>
  </goal>
  <goal name="VC extract_min_exn.9" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.08"/></proof>
  </goal>
  <goal name="VC extract_min_exn.10" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.27"/></proof>
  </goal>
  <goal name="VC extract_min_exn.11" expl="type invariant" proved="true">
  <proof prover="1"><result status="valid" time="0.15"/></proof>
  </goal>
  <goal name="VC extract_min_exn.12" expl="type invariant" proved="true">
  <proof prover="1"><result status="valid" time="0.28"/></proof>
  </goal>
  <goal name="VC extract_min_exn.13" expl="type invariant" proved="true">
  <proof prover="1"><result status="valid" time="0.13"/></proof>
  </goal>
  <goal name="VC extract_min_exn.14" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.15"/></proof>
  </goal>
  <goal name="VC extract_min_exn.15" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.15"/></proof>
  </goal>
  <goal name="VC extract_min_exn.16" expl="type invariant" proved="true">
  <proof prover="1"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="VC extract_min_exn.17" expl="type invariant" proved="true">
  <proof prover="1"><result status="valid" time="0.21"/></proof>
  </goal>
  <goal name="VC extract_min_exn.18" expl="type invariant" proved="true">
  <proof prover="1"><result status="valid" time="0.15"/></proof>
  </goal>
  <goal name="VC extract_min_exn.19" expl="exceptional postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.09"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Make.VC delete_min_exn" expl="VC for delete_min_exn" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC delete_min_exn.0" expl="postcondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC delete_min_exn.0.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.05"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC delete_min_exn.1" expl="exceptional postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.11"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Make.VC move_up" expl="VC for move_up" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC move_up.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.09"/></proof>
  </goal>
  <goal name="VC move_up.1" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="VC move_up.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.08"/></proof>
  </goal>
  <goal name="VC move_up.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.05"/></proof>
  </goal>
  <goal name="VC move_up.4" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.04" steps="22"/></proof>
  </goal>
  <goal name="VC move_up.5" expl="precondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC move_up.5.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.41"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC move_up.6" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.06" steps="118"/></proof>
  </goal>
  <goal name="VC move_up.7" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.07"/></proof>
  </goal>
  <goal name="VC move_up.8" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.10"/></proof>
  </goal>
  <goal name="VC move_up.9" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.40"/></proof>
  </goal>
  <goal name="VC move_up.10" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.11"/></proof>
  </goal>
  <goal name="VC move_up.11" expl="integer overflow" proved="true">
  <proof prover="1"><result status="valid" time="0.15"/></proof>
  </goal>
  <goal name="VC move_up.12" expl="division by zero" proved="true">
  <proof prover="1"><result status="valid" time="0.08"/></proof>
  </goal>
  <goal name="VC move_up.13" expl="integer overflow" proved="true">
  <proof prover="1"><result status="valid" time="0.14"/></proof>
  </goal>
  <goal name="VC move_up.14" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.16"/></proof>
  </goal>
  <goal name="VC move_up.15" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.06"/></proof>
  </goal>
  <goal name="VC move_up.16" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.15"/></proof>
  </goal>
  <goal name="VC move_up.17" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.07"/></proof>
  </goal>
  <goal name="VC move_up.18" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.07"/></proof>
  </goal>
  <goal name="VC move_up.19" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.06"/></proof>
  </goal>
  <goal name="VC move_up.20" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.21"/></proof>
  </goal>
  <goal name="VC move_up.21" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.21"/></proof>
  </goal>
  <goal name="VC move_up.22" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.08"/></proof>
  </goal>
  <goal name="VC move_up.23" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.06"/></proof>
  </goal>
  <goal name="VC move_up.24" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.06"/></proof>
  </goal>
  <goal name="VC move_up.25" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.41"/></proof>
  </goal>
  <goal name="VC move_up.26" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.26" steps="342"/></proof>
  </goal>
  <goal name="VC move_up.27" expl="precondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="VC move_up.27.0" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.34" steps="318"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="VC move_up.28" expl="variant decrease" proved="true">
  <proof prover="1"><result status="valid" time="0.16"/></proof>
  </goal>
  <goal name="VC move_up.29" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.06"/></proof>
  </goal>
  <goal name="VC move_up.30" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.17"/></proof>
  </goal>
  <goal name="VC move_up.31" expl="precondition" proved="true">
  <transf name="unfold" proved="true" arg1="le">
   <goal name="VC move_up.31.0" expl="VC for move_up" proved="true">
   <transf name="assert" proved="true" arg1="(int63&#39;int (cmp x (view a1)[j]) &lt;= 0)">
    <goal name="VC move_up.31.0.0" expl="asserted formula" proved="true">
    <proof prover="1"><result status="valid" time="0.33"/></proof>
    </goal>
    <goal name="VC move_up.31.0.1" expl="VC for move_up" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC move_up.31.0.1.0" expl="VC for move_up" proved="true">
     <proof prover="1" timelimit="10" memlimit="4000"><result status="valid" time="1.77"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC move_up.32" expl="precondition" proved="true">
  <transf name="unfold" proved="true" arg1="le">
   <goal name="VC move_up.32.0" expl="VC for move_up" proved="true">
   <transf name="assert" proved="true" arg1="(int63&#39;int (cmp x (view a1)[j]) &lt;= 0)">
    <goal name="VC move_up.32.0.0" expl="asserted formula" proved="true">
    <proof prover="1"><result status="valid" time="0.26"/></proof>
    </goal>
    <goal name="VC move_up.32.0.1" expl="VC for move_up" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC move_up.32.0.1.0" expl="VC for move_up" proved="true">
     <proof prover="1"><result status="valid" time="1.68"/></proof>
     <transf name="remove" proved="true" arg1="real,tuple0,unit,list,option,bag,ref,array,array1,int63,elt,zero,one,(-_),(-),abs,min,max,div,mod,is_nil,length,mem,is_none,nth,(++),nb_occ,mem1,eq_bag,empty_bag,singleton1,union,add,card,diff,choose,int63&#39;maxInt,int63&#39;minInt,min_int63,max_int63,to_int1,in_bounds,max_int,min_int,(!),max_array_length,(==),create,empty,set,([&lt;-]),singleton,cons,snoc,([..]),([_..]),([.._]),(++&#39;),to_list,of_list,point_wise,fold_left,fold_right,elts,length1,to_int,numocc,numocc&#39;,minimum,is_minimum,substitution,pop,push,o,o1,Assoc,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm,Assoc1,Mul_distr_l,Mul_distr_r,Comm1,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_pos,Min_r,Max_l,Min_comm,Max_comm,Min_assoc,Max_assoc,div2,Div_mod,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_1,Mod_1,Div_inf,Mod_inf,Div_mult,Mod_mult,Numof_left_no_add,Numof_left_add,Empty,Full,numof_increasing,numof_strictly_increasing,numof_change_any,numof_change_some,numof_change_equiv,Length_nonnegative,Append_assoc,Append_l_nil,Append_length,mem_decomp,occ_non_negative,bag_extensionality,occ_empty,is_empty,occ_singleton_eq,occ_singleton_neq,occ_union,Union_comm,Union_identity,Union_assoc,bag_simpl_right,bag_simpl_left,occ_add_eq,occ_add_neq,Card_nonneg,Card_empty,Card_zero_empty,Card_singleton,Card_union,Card_add,Diff_occ,Diff_empty_right,Diff_empty_left,Diff_add,Diff_comm,Add_diff,choose_mem,to_int_in_bounds,max_int_def,min_int_def,non_neg_max_array_length,length_nonnegative,empty_def,set_def,([&lt;-])_def,([..])_def,([_..])_def,([.._])_def,to_list_empty,to_list_cons,to_list_length,to_list_nth,to_list_def_cons,length_of_list,elts_seq_of_list,is_of_list,of_list_app,of_list_app_length,of_list_snoc,convolution_to_of_list,fold_left_ext,fold_left_cons,fold_left_app,fold_right_ext,fold_right_snoc,t&#39;invariant,min_def,num_exist,min_coherent,sub_occ_1,sub_occ_2,sub_occ_3,pop_occ_1,pop_occ_2,pop_order,same_occ,H1,H2,H3,H6,H7,H8,H9,H15,H16,H17,H18,H19,H20,H21,H22,H23,H24,H25,Abs_le,Abs_le1,Abs_le2,Div_bound,Div_bound1,Mod_bound,Mod_bound1,numof_def,numof_def1,numof_def2,Numof_bounds,Numof_bounds1,occ_singleton,occ_singleton1,occ_singleton2,occ_singleton3,is_none_spec,is_none_spec1,(==)_spec,(==)_spec1,(==)_spec2,(==)_spec3,create_spec1,create_spec,set_spec,set_spec1,set_spec2,singleton_spec,singleton_spec1,cons_spec,cons_spec1,cons_spec2,snoc_spec,snoc_spec1,snoc_spec2,([..])_spec,([..])_spec1,(++)_spec,(++)_spec1,(++)_spec2,array&#39;invariant,array&#39;invariant1,is_nil_spec,is_nil_spec1,Length_nil,Length_nil1,mem_append,mem_append1,mem_append2,fold_left_def,fold_left_def1,fold_right_def,fold_right_def1,t&#39;invariant1,t&#39;invariant2,t&#39;invariant3,sub_order,sub_order1,sub_order2,sub_order3,sub_order4,sub_order5,sub_order6,sub_order7,H26,H27">
      <goal name="VC move_up.32.0.1.0.0" expl="VC for move_up" proved="true">
      <proof prover="3"><result status="valid" time="0.02"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC move_up.33" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.06"/></proof>
  </goal>
  <goal name="VC move_up.34" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.56"/></proof>
  </goal>
  <goal name="VC move_up.35" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.34"/></proof>
  </goal>
  <goal name="VC move_up.36" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.07"/></proof>
  </goal>
  <goal name="VC move_up.37" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.11"/></proof>
  </goal>
  <goal name="VC move_up.38" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.22"/></proof>
  </goal>
  <goal name="VC move_up.39" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.09"/></proof>
  </goal>
  <goal name="VC move_up.40" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.07"/></proof>
  </goal>
  <goal name="VC move_up.41" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.21"/></proof>
  </goal>
  <goal name="VC move_up.42" expl="precondition" proved="true">
  <proof prover="4" timelimit="16"><result status="valid" time="0.10" steps="287"/></proof>
  </goal>
  <goal name="VC move_up.43" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.26"/></proof>
  </goal>
  <goal name="VC move_up.44" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.06"/></proof>
  </goal>
  <goal name="VC move_up.45" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.12"/></proof>
  </goal>
  <goal name="VC move_up.46" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.29"/></proof>
  </goal>
  <goal name="VC move_up.47" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.07"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Make.VC insert" expl="VC for insert" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC insert.0" expl="exceptional postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.08"/></proof>
  </goal>
  <goal name="VC insert.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.15"/></proof>
  </goal>
  <goal name="VC insert.2" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.27"/></proof>
  </goal>
  <goal name="VC insert.3" expl="type invariant" proved="true">
  <proof prover="1"><result status="valid" time="0.15"/></proof>
  </goal>
  <goal name="VC insert.4" expl="type invariant" proved="true">
  <proof prover="1"><result status="valid" time="0.37"/></proof>
  </goal>
  <goal name="VC insert.5" expl="type invariant" proved="true">
  <proof prover="1"><result status="valid" time="0.12"/></proof>
  </goal>
  <goal name="VC insert.6" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.06"/></proof>
  </goal>
  <goal name="VC insert.7" expl="integer overflow" proved="true">
  <proof prover="1"><result status="valid" time="0.13"/></proof>
  </goal>
  <goal name="VC insert.8" expl="division by zero" proved="true">
  <proof prover="1"><result status="valid" time="0.07"/></proof>
  </goal>
  <goal name="VC insert.9" expl="integer overflow" proved="true">
  <proof prover="1"><result status="valid" time="0.13"/></proof>
  </goal>
  <goal name="VC insert.10" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.18"/></proof>
  </goal>
  <goal name="VC insert.11" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.12"/></proof>
  </goal>
  <goal name="VC insert.12" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.14"/></proof>
  </goal>
  <goal name="VC insert.13" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.13"/></proof>
  </goal>
  <goal name="VC insert.14" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="VC insert.15" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.16"/></proof>
  </goal>
  <goal name="VC insert.16" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05"/></proof>
  </goal>
  <goal name="VC insert.17" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.10"/></proof>
  </goal>
  <goal name="VC insert.18" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.20"/></proof>
  </goal>
  <goal name="VC insert.19" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.17"/></proof>
  </goal>
  <goal name="VC insert.20" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.05"/></proof>
  </goal>
  <goal name="VC insert.21" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.17"/></proof>
  </goal>
  <goal name="VC insert.22" expl="precondition" proved="true">
  <transf name="unfold" proved="true" arg1="le">
   <goal name="VC insert.22.0" expl="VC for insert" proved="true">
   <transf name="assert" proved="true" arg1="(int63&#39;int (cmp x (view olda)[j]) &lt;= 0)">
    <goal name="VC insert.22.0.0" expl="asserted formula" proved="true">
    <proof prover="1"><result status="valid" time="0.29"/></proof>
    </goal>
    <goal name="VC insert.22.0.1" expl="VC for insert" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="VC insert.22.0.1.0" expl="VC for insert" proved="true">
     <proof prover="1"><result status="valid" time="1.30"/></proof>
     <transf name="remove" proved="true" arg1="real,tuple0,unit,ref,array,int63,elt,zero,one,min,max,nth,mem1,empty_bag,add,diff,choose,int63&#39;maxInt,int63&#39;minInt,min_int63,max_int63,to_int1,in_bounds,max_int,min_int,(!),empty,([&lt;-]),to_list,of_list,point_wise,to_int,minimum,is_minimum,pop,push,Assoc,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm,Assoc1,Mul_distr_l,Mul_distr_r,Comm1,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_pos,Min_r,Max_l,Min_comm,Max_comm,Min_assoc,Max_assoc,div2,Div_mod,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_1,Mod_1,Div_inf,Mod_inf,Div_mult,Mod_mult,Numof_append,Numof_left_no_add,Numof_left_add,Empty,Full,numof_increasing,numof_strictly_increasing,numof_change_any,numof_change_some,Length_nonnegative,Append_assoc,Append_l_nil,Append_length,mem_decomp,occ_non_negative,bag_extensionality,occ_empty,is_empty,occ_singleton_eq,occ_singleton_neq,occ_union,Union_comm,Union_identity,Union_assoc,occ_add_eq,occ_add_neq,Card_nonneg,Card_empty,Card_zero_empty,Card_singleton,Card_union,Card_add,Diff_occ,Diff_empty_right,Diff_empty_left,Diff_add,Diff_comm,Add_diff,choose_mem,to_int_in_bounds,max_int_def,min_int_def,non_neg_max_array_length,length_nonnegative,empty_def,set_def,([&lt;-])_def,([..])_def,([_..])_def,([.._])_def,to_list_empty,to_list_cons,to_list_length,to_list_nth,to_list_def_cons,length_of_list,elts_seq_of_list,is_of_list,of_list_app,of_list_app_length,of_list_snoc,convolution_to_of_list,fold_left_ext,fold_left_cons,fold_left_app,fold_right_ext,fold_right_snoc,t&#39;invariant,min_def,num_exist,min_coherent,sub_occ_1,sub_occ_2,sub_occ_3,pop_occ_1,pop_occ_2,pop_order,same_occ">
      <goal name="VC insert.22.0.1.0.0" expl="VC for insert" proved="true">
      <transf name="remove" proved="true" arg1="zero,one,eq_bag,union,h,numof_change_equiv,bag_simpl_right,bag_simpl_left,extensionality,t&#39;invariant">
       <goal name="VC insert.22.0.1.0.0.0" expl="VC for insert" proved="true">
       <proof prover="4"><result status="valid" time="0.34" steps="224"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC insert.23" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="1.51"/></proof>
  </goal>
  <goal name="VC insert.24" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.15"/></proof>
  </goal>
  <goal name="VC insert.25" expl="type invariant" proved="true">
  <proof prover="1"><result status="valid" time="0.15"/></proof>
  </goal>
  <goal name="VC insert.26" expl="type invariant" proved="true">
  <proof prover="1"><result status="valid" time="0.33"/></proof>
  </goal>
  <goal name="VC insert.27" expl="type invariant" proved="true">
  <proof prover="1"><result status="valid" time="0.17"/></proof>
  </goal>
  <goal name="VC insert.28" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.07"/></proof>
  </goal>
  <goal name="VC insert.29" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.13"/></proof>
  </goal>
  <goal name="VC insert.30" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.13"/></proof>
  </goal>
  <goal name="VC insert.31" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.16"/></proof>
  </goal>
  <goal name="VC insert.32" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.18"/></proof>
  </goal>
  <goal name="VC insert.33" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.05"/></proof>
  </goal>
  <goal name="VC insert.34" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.08"/></proof>
  </goal>
  <goal name="VC insert.35" expl="assertion" proved="true">
  <proof prover="4"><result status="valid" time="0.15" steps="44"/></proof>
  </goal>
  <goal name="VC insert.36" expl="type invariant" proved="true">
  <proof prover="1"><result status="valid" time="0.24"/></proof>
  </goal>
  <goal name="VC insert.37" expl="type invariant" proved="true">
  <proof prover="1"><result status="valid" time="0.19"/></proof>
  </goal>
  <goal name="VC insert.38" expl="type invariant" proved="true">
  <proof prover="1"><result status="valid" time="0.07"/></proof>
  </goal>
  <goal name="VC insert.39" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.06"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Correct" proved="true">
 <goal name="Sig.Make.X.is_pre_order" proved="true">
 <proof prover="1"><result status="valid" time="0.09"/></proof>
 </goal>
 <goal name="Sig.Make.X.VC compare" expl="VC for compare" proved="true">
 <proof prover="1"><result status="valid" time="0.08"/></proof>
 </goal>
 <goal name="Sig.Make.VC t" expl="VC for t" proved="true">
 <proof prover="1"><result status="valid" time="0.16"/></proof>
 </goal>
 <goal name="Sig.Make.VC create" expl="VC for create" proved="true">
 <proof prover="1"><result status="valid" time="0.09"/></proof>
 </goal>
 <goal name="Sig.Make.VC is_empty" expl="VC for is_empty" proved="true">
 <proof prover="1"><result status="valid" time="0.09"/></proof>
 </goal>
 <goal name="Sig.Make.VC size" expl="VC for size" proved="true">
 <proof prover="1"><result status="valid" time="0.08"/></proof>
 </goal>
 <goal name="Sig.Make.min_def" proved="true">
 <proof prover="1"><result status="valid" time="0.38"/></proof>
 </goal>
 <goal name="Sig.Make.VC find_min" expl="VC for find_min" proved="true">
 <proof prover="1"><result status="valid" time="0.12"/></proof>
 </goal>
 <goal name="Sig.Make.VC find_min_exn" expl="VC for find_min_exn" proved="true">
 <proof prover="1"><result status="valid" time="0.09"/></proof>
 </goal>
 <goal name="Sig.Make.VC delete_min_exn" expl="VC for delete_min_exn" proved="true">
 <proof prover="1"><result status="valid" time="0.11"/></proof>
 </goal>
 <goal name="Sig.Make.VC extract_min_exn" expl="VC for extract_min_exn" proved="true">
 <proof prover="1"><result status="valid" time="0.06"/></proof>
 </goal>
 <goal name="Sig.Make.VC insert" expl="VC for insert" proved="true">
 <proof prover="1"><result status="valid" time="0.07"/></proof>
 </goal>
</theory>
</file>
</why3session>
