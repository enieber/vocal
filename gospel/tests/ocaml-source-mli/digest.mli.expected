
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.text
  " MD5 message digest.\n\n   This module provides functions to compute 128-bit 'digests' of\n   arbitrary-length strings or files. The digests are of cryptographic\n   quality: it is very hard, given a digest, to forge a string having\n   that digest. The algorithm used is MD5. This module should not be\n   used for secure and sensitive cryptographic applications. For these\n   kind of applications more recent and stronger cryptographic\n   primitives should be used instead.\n"]
type t = string[@@ocaml.doc " The type of digests: 16-character strings. "]
val compare : t -> t -> int[@@ocaml.doc
                             " The comparison function for 16-character digest, with the same\n    specification as {!Stdlib.compare} and the implementation\n    shared with {!String.compare}. Along with the type [t], this\n    function [compare] allows the module [Digest] to be passed as\n    argument to the functors {!Set.Make} and {!Map.Make}.\n    @since 4.00.0 "]
val equal : t -> t -> bool[@@ocaml.doc
                            " The equal function for 16-character digest.\n    @since 4.03.0 "]
val string : string -> t[@@ocaml.doc
                          " Return the digest of the given string. "]
val bytes : bytes -> t[@@ocaml.doc
                        " Return the digest of the given byte sequence.\n    @since 4.02.0 "]
val substring : string -> int -> int -> t[@@ocaml.doc
                                           " [Digest.substring s ofs len] returns the digest of the substring\n   of [s] starting at index [ofs] and containing [len] characters. "]
val subbytes : bytes -> int -> int -> t[@@ocaml.doc
                                         " [Digest.subbytes s ofs len] returns the digest of the subsequence\n    of [s] starting at index [ofs] and containing [len] bytes.\n    @since 4.02.0 "]
external channel : in_channel -> int -> t = "caml_md5_chan"[@@ocaml.doc
                                                             " If [len] is nonnegative, [Digest.channel ic len] reads [len]\n   characters from channel [ic] and returns their digest, or raises\n   [End_of_file] if end-of-file is reached before [len] characters\n   are read.  If [len] is negative, [Digest.channel ic len] reads\n   all characters from [ic] until end-of-file is reached and return\n   their digest. "]
val file : string -> t[@@ocaml.doc
                        " Return the digest of the file whose name is given. "]
val output : out_channel -> t -> unit[@@ocaml.doc
                                       " Write a digest on the given output channel. "]
val input : in_channel -> t[@@ocaml.doc
                             " Read a digest from the given input channel. "]
val to_hex : t -> string[@@ocaml.doc
                          " Return the printable hexadecimal representation of the given digest.\n    Raise [Invalid_argument] if the argument is not exactly 16 bytes.\n "]
val from_hex : string -> t[@@ocaml.doc
                            " Convert a hexadecimal representation back into the corresponding digest.\n   Raise [Invalid_argument] if the argument is not exactly 32 hexadecimal\n   characters.\n   @since 4.00.0 "]

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.text
  " MD5 message digest.\n\n   This module provides functions to compute 128-bit 'digests' of\n   arbitrary-length strings or files. The digests are of cryptographic\n   quality: it is very hard, given a digest, to forge a string having\n   that digest. The algorithm used is MD5. This module should not be\n   used for secure and sensitive cryptographic applications. For these\n   kind of applications more recent and stronger cryptographic\n   primitives should be used instead.\n"]

type t = string[@@ocaml.doc " The type of digests: 16-character strings. "]
  

val compare : t -> t -> int[@@ocaml.doc
                             " The comparison function for 16-character digest, with the same\n    specification as {!Stdlib.compare} and the implementation\n    shared with {!String.compare}. Along with the type [t], this\n    function [compare] allows the module [Digest] to be passed as\n    argument to the functors {!Set.Make} and {!Map.Make}.\n    @since 4.00.0 "]


val equal : t -> t -> bool[@@ocaml.doc
                            " The equal function for 16-character digest.\n    @since 4.03.0 "]


val string : string -> t[@@ocaml.doc
                          " Return the digest of the given string. "]


val bytes : bytes -> t[@@ocaml.doc
                        " Return the digest of the given byte sequence.\n    @since 4.02.0 "]


val substring : string -> int -> int -> t[@@ocaml.doc
                                           " [Digest.substring s ofs len] returns the digest of the substring\n   of [s] starting at index [ofs] and containing [len] characters. "]


val subbytes : bytes -> int -> int -> t[@@ocaml.doc
                                         " [Digest.subbytes s ofs len] returns the digest of the subsequence\n    of [s] starting at index [ofs] and containing [len] bytes.\n    @since 4.02.0 "]


external channel : in_channel -> int -> t = "caml_md5_chan"[@@ocaml.doc
                                                             " If [len] is nonnegative, [Digest.channel ic len] reads [len]\n   characters from channel [ic] and returns their digest, or raises\n   [End_of_file] if end-of-file is reached before [len] characters\n   are read.  If [len] is negative, [Digest.channel ic len] reads\n   all characters from [ic] until end-of-file is reached and return\n   their digest. "]


val file : string -> t[@@ocaml.doc
                        " Return the digest of the file whose name is given. "]


val output : out_channel -> t -> unit[@@ocaml.doc
                                       " Write a digest on the given output channel. "]


val input : in_channel -> t[@@ocaml.doc
                             " Read a digest from the given input channel. "]


val to_hex : t -> string[@@ocaml.doc
                          " Return the printable hexadecimal representation of the given digest.\n    Raise [Invalid_argument] if the argument is not exactly 16 bytes.\n "]


val from_hex : string -> t[@@ocaml.doc
                            " Convert a hexadecimal representation back into the corresponding digest.\n   Raise [Invalid_argument] if the argument is not exactly 32 hexadecimal\n   characters.\n   @since 4.00.0 "]


*******************************
********* Typed GOSPEL ********
*******************************
module digest.mli

  Namespace: digest.mli
    Type symbols
       t [=string]
      
    Logic Symbols
      
    Exception Symbols
      
    Namespaces
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    [@@@ocaml.text
      " MD5 message digest.\n\n   This module provides functions to compute 128-bit 'digests' of\n   arbitrary-length strings or files. The digests are of cryptographic\n   quality: it is very hard, given a digest, to forge a string having\n   that digest. The algorithm used is MD5. This module should not be\n   used for secure and sensitive cryptographic applications. For these\n   kind of applications more recent and stronger cryptographic\n   primitives should be used instead.\n"]
    
    type t = string
    
    
    val compare :
    t -> t -> int[@@ocaml.doc
                   " The comparison function for 16-character digest, with the same\n    specification as {!Stdlib.compare} and the implementation\n    shared with {!String.compare}. Along with the type [t], this\n    function [compare] allows the module [Digest] to be passed as\n    argument to the functors {!Set.Make} and {!Map.Make}.\n    @since 4.00.0 "]
    
    
    val equal :
    t -> t -> bool[@@ocaml.doc
                    " The equal function for 16-character digest.\n    @since 4.03.0 "]
    
    
    val string#1 :
    string -> t[@@ocaml.doc " Return the digest of the given string. "]
    
    
    val bytes :
    bytes -> t[@@ocaml.doc
                " Return the digest of the given byte sequence.\n    @since 4.02.0 "]
    
    
    val substring :
    string -> int -> int -> t[@@ocaml.doc
                               " [Digest.substring s ofs len] returns the digest of the substring\n   of [s] starting at index [ofs] and containing [len] characters. "]
    
    
    val subbytes :
    bytes -> int -> int -> t[@@ocaml.doc
                              " [Digest.subbytes s ofs len] returns the digest of the subsequence\n    of [s] starting at index [ofs] and containing [len] bytes.\n    @since 4.02.0 "]
    
    
    external channel : in_channel -> int -> t =
    "caml_md5_chan"[@@ocaml.doc
                     " If [len] is nonnegative, [Digest.channel ic len] reads [len]\n   characters from channel [ic] and returns their digest, or raises\n   [End_of_file] if end-of-file is reached before [len] characters\n   are read.  If [len] is negative, [Digest.channel ic len] reads\n   all characters from [ic] until end-of-file is reached and return\n   their digest. "]
    
    
    val file :
    string -> t[@@ocaml.doc
                 " Return the digest of the file whose name is given. "]
    
    
    val output :
    out_channel -> t -> unit[@@ocaml.doc
                              " Write a digest on the given output channel. "]
    
    
    val input :
    in_channel -> t[@@ocaml.doc
                     " Read a digest from the given input channel. "]
    
    
    val to_hex :
    t -> string[@@ocaml.doc
                 " Return the printable hexadecimal representation of the given digest.\n    Raise [Invalid_argument] if the argument is not exactly 16 bytes.\n "]
    
    
    val from_hex :
    string -> t[@@ocaml.doc
                 " Convert a hexadecimal representation back into the corresponding digest.\n   Raise [Invalid_argument] if the argument is not exactly 32 hexadecimal\n   characters.\n   @since 4.00.0 "]
    


*** OK ***

