
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.text
  " The types and functions to create a html table representing a dag.\n   Thanks to Daniel de Rauglaudre. "]
type 'a dag = {
  mutable dag: 'a node array }
and 'a node = {
  mutable pare: idag list ;
  valu: 'a ;
  mutable chil: idag list }
and idag = int
val html_of_dag : string dag -> string[@@ocaml.doc
                                        " This function returns the html code to represent the given dag. "]
val create_class_dag :
  Odoc_info.Class.t_class list ->
    Odoc_info.Class.t_class_type list ->
      (Odoc_info.Name.t * Odoc_info.Class.cct option) dag[@@ocaml.doc
                                                           " This function takes a list of classes and a list of class types and creates the associate dag. "]

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.text
  " The types and functions to create a html table representing a dag.\n   Thanks to Daniel de Rauglaudre. "]

type 'a dag = {
mutable dag: 'a node array }
  
and 'a node = {
mutable pare: idag list ;
valu: 'a ;
mutable chil: idag list }
  
and idag = int
  

val html_of_dag : string dag -> string[@@ocaml.doc
                                        " This function returns the html code to represent the given dag. "]


val create_class_dag :
  Odoc_info.Class.t_class list ->
    Odoc_info.Class.t_class_type list ->
      (Odoc_info.Name.t * Odoc_info.Class.cct option) dag[@@ocaml.doc
                                                           " This function takes a list of classes and a list of class types and creates the associate dag. "]


*******************************
********* Typed GOSPEL ********
*******************************
module odoc_dag2html.mli

  Namespace: odoc_dag2html.mli
    Type symbols
      'a dag
       idag [=int]
      'a node
      
    Logic Symbols
      function chil (_:'a node) : int list
      function constr#dag (_:'a node#1 array) : 'a dag
      function constr#node (_:int list) (_:'a) (_:int list) : 'a node
      function dag#1 (_:'a dag) : 'a node#1 array
      function pare (_:'a node) : int list
      function valu (_:'a node) : 'a
      
    Exception Symbols
      
    Namespaces
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    [@@@ocaml.text
      " The types and functions to create a html table representing a dag.\n   Thanks to Daniel de Rauglaudre. "]
    
    type 'a dag = {mutable dag#1:'a node#1 array}
               function constr#dag (_:'a node#1 array) : 'a dag
                 function dag#1 (_:'a dag) : 'a node#1 array
    
    and 'a node = {mutable pare:int list; valu:'a; mutable chil:int list}
               function constr#node (_:int list) (_:'a) (_:int list) : 'a node
                 function pare (_:'a node) : int list
                 function valu (_:'a node) : 'a
                 function chil (_:'a node) : int list
    
    and idag = int
    
    
    val html_of_dag :
    string dag -> string[@@ocaml.doc
                          " This function returns the html code to represent the given dag. "]
    
    
    val create_class_dag :
    Odoc_info.Class.t_class list ->
      Odoc_info.Class.t_class_type list ->
        (Odoc_info.Name.t * Odoc_info.Class.cct option) dag[@@ocaml.doc
                                                             " This function takes a list of classes and a list of class types and creates the associate dag. "]
    


*** OK ***

