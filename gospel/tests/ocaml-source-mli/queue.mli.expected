
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.text
  " First-in first-out queues.\n\n   This module implements queues (FIFOs), with in-place modification.\n\n   {b Warning} This module is not thread-safe: each {!Queue.t} value\n   must be protected from concurrent access (e.g. with a [Mutex.t]).\n   Failure to do so can lead to a crash.\n"]
type 'a t[@@ocaml.doc
           " The type of queues containing elements of type ['a]. "]
exception Empty
  [@ocaml.doc
    " Raised when {!Queue.take} or {!Queue.peek} is applied to an empty queue. "]
val create : unit -> 'a t[@@ocaml.doc
                           " Return a new queue, initially empty. "]
val add : 'a -> 'a t -> unit[@@ocaml.doc
                              " [add x q] adds the element [x] at the end of the queue [q]. "]
val push : 'a -> 'a t -> unit[@@ocaml.doc " [push] is a synonym for [add]. "]
val take : 'a t -> 'a[@@ocaml.doc
                       " [take q] removes and returns the first element in queue [q],\n   or raises {!Empty} if the queue is empty. "]
val take_opt : 'a t -> 'a option[@@ocaml.doc
                                  " [take_opt q] removes and returns the first element in queue [q],\n   or returns [None] if the queue is empty.\n   @since 4.08 "]
val pop : 'a t -> 'a[@@ocaml.doc " [pop] is a synonym for [take]. "]
val peek : 'a t -> 'a[@@ocaml.doc
                       " [peek q] returns the first element in queue [q], without removing\n   it from the queue, or raises {!Empty} if the queue is empty. "]
val peek_opt : 'a t -> 'a option[@@ocaml.doc
                                  " [peek_opt q] returns the first element in queue [q], without removing\n   it from the queue, or returns [None] if the queue is empty.\n   @since 4.08 "]
val top : 'a t -> 'a[@@ocaml.doc " [top] is a synonym for [peek]. "]
val clear : 'a t -> unit[@@ocaml.doc " Discard all elements from a queue. "]
val copy : 'a t -> 'a t[@@ocaml.doc " Return a copy of the given queue. "]
val is_empty : 'a t -> bool[@@ocaml.doc
                             " Return [true] if the given queue is empty, [false] otherwise. "]
val length : 'a t -> int[@@ocaml.doc
                          " Return the number of elements in a queue. "]
val iter : ('a -> unit) -> 'a t -> unit[@@ocaml.doc
                                         " [iter f q] applies [f] in turn to all elements of [q],\n   from the least recently entered to the most recently entered.\n   The queue itself is unchanged. "]
val fold : ('b -> 'a -> 'b) -> 'b -> 'a t -> 'b[@@ocaml.doc
                                                 " [fold f accu q] is equivalent to [List.fold_left f accu l],\n   where [l] is the list of [q]'s elements. The queue remains\n   unchanged. "]
val transfer : 'a t -> 'a t -> unit[@@ocaml.doc
                                     " [transfer q1 q2] adds all of [q1]'s elements at the end of\n   the queue [q2], then clears [q1]. It is equivalent to the\n   sequence [iter (fun x -> add x q2) q1; clear q1], but runs\n   in constant time. "]
[@@@ocaml.text " {6 Iterators} "]
val to_seq : 'a t -> 'a Seq.t[@@ocaml.doc
                               " Iterate on the queue, in front-to-back order.\n    The behavior is not defined if the queue is modified\n    during the iteration.\n    @since 4.07 "]
val add_seq : 'a t -> 'a Seq.t -> unit[@@ocaml.doc
                                        " Add the elements from the generator to the end of the queue\n    @since 4.07 "]
val of_seq : 'a Seq.t -> 'a t[@@ocaml.doc
                               " Create an array from the generator\n    @since 4.07 "]

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.text
  " First-in first-out queues.\n\n   This module implements queues (FIFOs), with in-place modification.\n\n   {b Warning} This module is not thread-safe: each {!Queue.t} value\n   must be protected from concurrent access (e.g. with a [Mutex.t]).\n   Failure to do so can lead to a crash.\n"]

type 'a t[@@ocaml.doc
           " The type of queues containing elements of type ['a]. "]
  

exception Empty
  [@ocaml.doc
    " Raised when {!Queue.take} or {!Queue.peek} is applied to an empty queue. "]

val create : unit -> 'a t[@@ocaml.doc
                           " Return a new queue, initially empty. "]


val add : 'a -> 'a t -> unit[@@ocaml.doc
                              " [add x q] adds the element [x] at the end of the queue [q]. "]


val push : 'a -> 'a t -> unit[@@ocaml.doc " [push] is a synonym for [add]. "]


val take : 'a t -> 'a[@@ocaml.doc
                       " [take q] removes and returns the first element in queue [q],\n   or raises {!Empty} if the queue is empty. "]


val take_opt : 'a t -> 'a option[@@ocaml.doc
                                  " [take_opt q] removes and returns the first element in queue [q],\n   or returns [None] if the queue is empty.\n   @since 4.08 "]


val pop : 'a t -> 'a[@@ocaml.doc " [pop] is a synonym for [take]. "]


val peek : 'a t -> 'a[@@ocaml.doc
                       " [peek q] returns the first element in queue [q], without removing\n   it from the queue, or raises {!Empty} if the queue is empty. "]


val peek_opt : 'a t -> 'a option[@@ocaml.doc
                                  " [peek_opt q] returns the first element in queue [q], without removing\n   it from the queue, or returns [None] if the queue is empty.\n   @since 4.08 "]


val top : 'a t -> 'a[@@ocaml.doc " [top] is a synonym for [peek]. "]


val clear : 'a t -> unit[@@ocaml.doc " Discard all elements from a queue. "]


val copy : 'a t -> 'a t[@@ocaml.doc " Return a copy of the given queue. "]


val is_empty : 'a t -> bool[@@ocaml.doc
                             " Return [true] if the given queue is empty, [false] otherwise. "]


val length : 'a t -> int[@@ocaml.doc
                          " Return the number of elements in a queue. "]


val iter : ('a -> unit) -> 'a t -> unit[@@ocaml.doc
                                         " [iter f q] applies [f] in turn to all elements of [q],\n   from the least recently entered to the most recently entered.\n   The queue itself is unchanged. "]


val fold : ('b -> 'a -> 'b) -> 'b -> 'a t -> 'b[@@ocaml.doc
                                                 " [fold f accu q] is equivalent to [List.fold_left f accu l],\n   where [l] is the list of [q]'s elements. The queue remains\n   unchanged. "]


val transfer : 'a t -> 'a t -> unit[@@ocaml.doc
                                     " [transfer q1 q2] adds all of [q1]'s elements at the end of\n   the queue [q2], then clears [q1]. It is equivalent to the\n   sequence [iter (fun x -> add x q2) q1; clear q1], but runs\n   in constant time. "]


[@@@ocaml.text " {6 Iterators} "]

val to_seq : 'a t -> 'a Seq.t[@@ocaml.doc
                               " Iterate on the queue, in front-to-back order.\n    The behavior is not defined if the queue is modified\n    during the iteration.\n    @since 4.07 "]


val add_seq : 'a t -> 'a Seq.t -> unit[@@ocaml.doc
                                        " Add the elements from the generator to the end of the queue\n    @since 4.07 "]


val of_seq : 'a Seq.t -> 'a t[@@ocaml.doc
                               " Create an array from the generator\n    @since 4.07 "]


*******************************
********* Typed GOSPEL ********
*******************************
module queue.mli

  Namespace: queue.mli
    Type symbols
      'a t
      
    Logic Symbols
      
    Exception Symbols
      Empty
      
    Namespaces
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    [@@@ocaml.text
      " First-in first-out queues.\n\n   This module implements queues (FIFOs), with in-place modification.\n\n   {b Warning} This module is not thread-safe: each {!Queue.t} value\n   must be protected from concurrent access (e.g. with a [Mutex.t]).\n   Failure to do so can lead to a crash.\n"]
    
    type 'a t
    
    
    exception Empty
    
    val create :
    unit -> 'a t[@@ocaml.doc " Return a new queue, initially empty. "]
    
    
    val add :
    'a -> 'a t -> unit[@@ocaml.doc
                        " [add x q] adds the element [x] at the end of the queue [q]. "]
    
    
    val push :
    'a -> 'a t -> unit[@@ocaml.doc " [push] is a synonym for [add]. "]
    
    
    val take :
    'a t -> 'a[@@ocaml.doc
                " [take q] removes and returns the first element in queue [q],\n   or raises {!Empty} if the queue is empty. "]
    
    
    val take_opt :
    'a t -> 'a option[@@ocaml.doc
                       " [take_opt q] removes and returns the first element in queue [q],\n   or returns [None] if the queue is empty.\n   @since 4.08 "]
    
    
    val pop : 'a t -> 'a[@@ocaml.doc " [pop] is a synonym for [take]. "]
    
    
    val peek :
    'a t -> 'a[@@ocaml.doc
                " [peek q] returns the first element in queue [q], without removing\n   it from the queue, or raises {!Empty} if the queue is empty. "]
    
    
    val peek_opt :
    'a t -> 'a option[@@ocaml.doc
                       " [peek_opt q] returns the first element in queue [q], without removing\n   it from the queue, or returns [None] if the queue is empty.\n   @since 4.08 "]
    
    
    val top : 'a t -> 'a[@@ocaml.doc " [top] is a synonym for [peek]. "]
    
    
    val clear :
    'a t -> unit[@@ocaml.doc " Discard all elements from a queue. "]
    
    
    val copy :
    'a t -> 'a t[@@ocaml.doc " Return a copy of the given queue. "]
    
    
    val is_empty :
    'a t -> bool[@@ocaml.doc
                  " Return [true] if the given queue is empty, [false] otherwise. "]
    
    
    val length :
    'a t -> int[@@ocaml.doc " Return the number of elements in a queue. "]
    
    
    val iter :
    ('a -> unit) -> 'a t -> unit[@@ocaml.doc
                                  " [iter f q] applies [f] in turn to all elements of [q],\n   from the least recently entered to the most recently entered.\n   The queue itself is unchanged. "]
    
    
    val fold :
    ('b -> 'a -> 'b) -> 'b -> 'a t -> 'b[@@ocaml.doc
                                          " [fold f accu q] is equivalent to [List.fold_left f accu l],\n   where [l] is the list of [q]'s elements. The queue remains\n   unchanged. "]
    
    
    val transfer :
    'a t -> 'a t -> unit[@@ocaml.doc
                          " [transfer q1 q2] adds all of [q1]'s elements at the end of\n   the queue [q2], then clears [q1]. It is equivalent to the\n   sequence [iter (fun x -> add x q2) q1; clear q1], but runs\n   in constant time. "]
    
    
    [@@@ocaml.text " {6 Iterators} "]
    
    val to_seq :
    'a t -> 'a Seq.t[@@ocaml.doc
                      " Iterate on the queue, in front-to-back order.\n    The behavior is not defined if the queue is modified\n    during the iteration.\n    @since 4.07 "]
    
    
    val add_seq :
    'a t -> 'a Seq.t -> unit[@@ocaml.doc
                              " Add the elements from the generator to the end of the queue\n    @since 4.07 "]
    
    
    val of_seq :
    'a Seq.t -> 'a t[@@ocaml.doc
                      " Create an array from the generator\n    @since 4.07 "]
    


*** OK ***

