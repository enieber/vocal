
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.text " Representation of projections from closures and blocks. "]
type project_closure =
  {
  set_of_closures: Variable.t [@ocaml.doc " must yield a set of closures "];
  closure_id: Closure_id.t }[@@ocaml.doc
                              " The selection of one closure given a set of closures, required before\n    a function defined by said set of closures can be applied.  See more\n    detailed documentation below on [set_of_closures]. "]
type move_within_set_of_closures =
  {
  closure: Variable.t [@ocaml.doc " must yield a closure "];
  start_from: Closure_id.t ;
  move_to: Closure_id.t }[@@ocaml.doc
                           " The selection of one closure given another closure in the same set of\n    closures.  See more detailed documentation below on [set_of_closures].\n    The [move_to] closure must be part of the free variables of\n    [start_from]. "]
type project_var =
  {
  closure: Variable.t [@ocaml.doc " must yield a closure "];
  closure_id: Closure_id.t ;
  var: Var_within_closure.t }[@@ocaml.doc
                               " The selection from a closure of a variable bound by said closure.\n    In other words, access to a function's environment.  Also see more\n    detailed documentation below on [set_of_closures]. "]
val print_project_closure : Format.formatter -> project_closure -> unit
val print_move_within_set_of_closures :
  Format.formatter -> move_within_set_of_closures -> unit
val print_project_var : Format.formatter -> project_var -> unit
val compare_project_var : project_var -> project_var -> int
val compare_project_closure : project_closure -> project_closure -> int
val compare_move_within_set_of_closures :
  move_within_set_of_closures -> move_within_set_of_closures -> int
type t =
  | Project_var of project_var 
  | Project_closure of project_closure 
  | Move_within_set_of_closures of move_within_set_of_closures 
  | Field of int * Variable.t 
include Identifiable.S with type  t :=  t
val projecting_from : t -> Variable.t[@@ocaml.doc
                                       " Return which variable the given projection projects from. "]
val map_projecting_from : t -> f:(Variable.t -> Variable.t) -> t[@@ocaml.doc
                                                                  " Change the variable that the given projection projects from. "]

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.text " Representation of projections from closures and blocks. "]

type project_closure =
{
set_of_closures: Variable.t [@ocaml.doc " must yield a set of closures "];
closure_id: Closure_id.t }[@@ocaml.doc
                            " The selection of one closure given a set of closures, required before\n    a function defined by said set of closures can be applied.  See more\n    detailed documentation below on [set_of_closures]. "]
  

type move_within_set_of_closures =
{
closure: Variable.t [@ocaml.doc " must yield a closure "];
start_from: Closure_id.t ;
move_to: Closure_id.t }[@@ocaml.doc
                         " The selection of one closure given another closure in the same set of\n    closures.  See more detailed documentation below on [set_of_closures].\n    The [move_to] closure must be part of the free variables of\n    [start_from]. "]
  

type project_var =
{
closure: Variable.t [@ocaml.doc " must yield a closure "];
closure_id: Closure_id.t ;
var: Var_within_closure.t }[@@ocaml.doc
                             " The selection from a closure of a variable bound by said closure.\n    In other words, access to a function's environment.  Also see more\n    detailed documentation below on [set_of_closures]. "]
  

val print_project_closure : Format.formatter -> project_closure -> unit


val print_move_within_set_of_closures :
  Format.formatter -> move_within_set_of_closures -> unit


val print_project_var : Format.formatter -> project_var -> unit


val compare_project_var : project_var -> project_var -> int


val compare_project_closure : project_closure -> project_closure -> int


val compare_move_within_set_of_closures :
  move_within_set_of_closures -> move_within_set_of_closures -> int


type t =
| Project_var of project_var 
| Project_closure of project_closure 
| Move_within_set_of_closures of move_within_set_of_closures 
| Field of int * Variable.t 
  

include Identifiable.S with type  t :=  t

val projecting_from : t -> Variable.t[@@ocaml.doc
                                       " Return which variable the given projection projects from. "]


val map_projecting_from : t -> f:(Variable.t -> Variable.t) -> t[@@ocaml.doc
                                                                  " Change the variable that the given projection projects from. "]

File "./variable.mli", line 57, characters 12-13:
Error: Symbol t not found
