
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.text
  " Operations on internal representations of values.\n\n   Not for the casual user.\n"]
type t
external repr : 'a -> t = "%identity"
external obj : t -> 'a = "%identity"
external magic : 'a -> 'b = "%identity"
val is_block : t -> bool[@@inline always]
external is_int : t -> bool = "%obj_is_int"
external tag : t -> int = "caml_obj_tag"
external size : t -> int = "%obj_size"
external reachable_words : t -> int = "caml_obj_reachable_words"[@@ocaml.doc
                                                                  "\n     Computes the total size (in words, including the headers) of all\n     heap blocks accessible from the argument.  Statically\n     allocated blocks are excluded.\n\n     @Since 4.04\n  "]
external field : t -> int -> t = "%obj_field"
external set_field : t -> int -> t -> unit = "%obj_set_field"[@@ocaml.doc
                                                               " When using flambda:\n\n    [set_field] MUST NOT be called on immutable blocks.  (Blocks allocated\n    in C stubs, or with [new_block] below, are always considered mutable.)\n\n    The same goes for [set_double_field] and [set_tag].  However, for\n    [set_tag], in the case of immutable blocks where the middle-end optimizers\n    never see code that discriminates on their tag (for example records), the\n    operation should be safe.  Such uses are nonetheless discouraged.\n\n    For experts only:\n    [set_field] et al can be made safe by first wrapping the block in\n    {!Sys.opaque_identity}, so any information about its contents will not\n    be propagated.\n"]
external set_tag : t -> int -> unit = "caml_obj_set_tag"
val double_field : t -> int -> float[@@inline always]
val set_double_field : t -> int -> float -> unit[@@inline always]
external new_block : int -> int -> t = "caml_obj_block"
external dup : t -> t = "caml_obj_dup"
external truncate : t -> int -> unit = "caml_obj_truncate"
external add_offset : t -> Int32.t -> t = "caml_obj_add_offset"
val first_non_constant_constructor_tag : int
val last_non_constant_constructor_tag : int
val lazy_tag : int
val closure_tag : int
val object_tag : int
val infix_tag : int
val forward_tag : int
val no_scan_tag : int
val abstract_tag : int
val string_tag : int
val double_tag : int
val double_array_tag : int
val custom_tag : int
val final_tag : int[@@ocaml.deprecated "Replaced by custom_tag."]
val int_tag : int
val out_of_heap_tag : int
val unaligned_tag : int
val extension_constructor : 'a -> extension_constructor
val extension_name : extension_constructor -> string[@@inline always]
val extension_id : extension_constructor -> int[@@inline always]
[@@@ocaml.text
  " The following two functions are deprecated.  Use module {!Marshal}\n    instead. "]
val marshal : t -> bytes[@@ocaml.deprecated "Use Marshal.to_bytes instead."]
val unmarshal : bytes -> int -> (t * int)[@@ocaml.deprecated
                                           "Use Marshal.from_bytes and Marshal.total_size instead."]
module Ephemeron :
sig
  [@@@ocaml.text " Ephemeron with arbitrary arity and untyped "]
  type obj_t = t[@@ocaml.doc " alias for {!Obj.t} "]
  type t[@@ocaml.doc " an ephemeron cf {!Ephemeron} "]
  val create : int -> t[@@ocaml.doc
                         " [create n] returns an ephemeron with [n] keys.\n      All the keys and the data are initially empty "]
  val length : t -> int[@@ocaml.doc " return the number of keys "]
  val get_key : t -> int -> obj_t option[@@ocaml.doc
                                          " Same as {!Ephemeron.K1.get_key} "]
  val get_key_copy : t -> int -> obj_t option[@@ocaml.doc
                                               " Same as {!Ephemeron.K1.get_key_copy} "]
  val set_key : t -> int -> obj_t -> unit[@@ocaml.doc
                                           " Same as {!Ephemeron.K1.set_key} "]
  val unset_key : t -> int -> unit[@@ocaml.doc
                                    " Same as {!Ephemeron.K1.unset_key} "]
  val check_key : t -> int -> bool[@@ocaml.doc
                                    " Same as {!Ephemeron.K1.check_key} "]
  val blit_key : t -> int -> t -> int -> int -> unit[@@ocaml.doc
                                                      " Same as {!Ephemeron.K1.blit_key} "]
  val get_data : t -> obj_t option[@@ocaml.doc
                                    " Same as {!Ephemeron.K1.get_data} "]
  val get_data_copy : t -> obj_t option[@@ocaml.doc
                                         " Same as {!Ephemeron.K1.get_data_copy} "]
  val set_data : t -> obj_t -> unit[@@ocaml.doc
                                     " Same as {!Ephemeron.K1.set_data} "]
  val unset_data : t -> unit[@@ocaml.doc
                              " Same as {!Ephemeron.K1.unset_data} "]
  val check_data : t -> bool[@@ocaml.doc
                              " Same as {!Ephemeron.K1.check_data} "]
  val blit_data : t -> t -> unit[@@ocaml.doc
                                  " Same as {!Ephemeron.K1.blit_data} "]
end

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.text
  " Operations on internal representations of values.\n\n   Not for the casual user.\n"]

type t
  

external repr : 'a -> t = "%identity"


external obj : t -> 'a = "%identity"


external magic : 'a -> 'b = "%identity"


val is_block : t -> bool[@@inline always]


external is_int : t -> bool = "%obj_is_int"


external tag : t -> int = "caml_obj_tag"


external size : t -> int = "%obj_size"


external reachable_words : t -> int = "caml_obj_reachable_words"[@@ocaml.doc
                                                                  "\n     Computes the total size (in words, including the headers) of all\n     heap blocks accessible from the argument.  Statically\n     allocated blocks are excluded.\n\n     @Since 4.04\n  "]


external field : t -> int -> t = "%obj_field"


external set_field : t -> int -> t -> unit = "%obj_set_field"[@@ocaml.doc
                                                               " When using flambda:\n\n    [set_field] MUST NOT be called on immutable blocks.  (Blocks allocated\n    in C stubs, or with [new_block] below, are always considered mutable.)\n\n    The same goes for [set_double_field] and [set_tag].  However, for\n    [set_tag], in the case of immutable blocks where the middle-end optimizers\n    never see code that discriminates on their tag (for example records), the\n    operation should be safe.  Such uses are nonetheless discouraged.\n\n    For experts only:\n    [set_field] et al can be made safe by first wrapping the block in\n    {!Sys.opaque_identity}, so any information about its contents will not\n    be propagated.\n"]


external set_tag : t -> int -> unit = "caml_obj_set_tag"


val double_field : t -> int -> float[@@inline always]


val set_double_field : t -> int -> float -> unit[@@inline always]


external new_block : int -> int -> t = "caml_obj_block"


external dup : t -> t = "caml_obj_dup"


external truncate : t -> int -> unit = "caml_obj_truncate"


external add_offset : t -> Int32.t -> t = "caml_obj_add_offset"


val first_non_constant_constructor_tag : int


val last_non_constant_constructor_tag : int


val lazy_tag : int


val closure_tag : int


val object_tag : int


val infix_tag : int


val forward_tag : int


val no_scan_tag : int


val abstract_tag : int


val string_tag : int


val double_tag : int


val double_array_tag : int


val custom_tag : int


val final_tag : int[@@ocaml.deprecated "Replaced by custom_tag."]


val int_tag : int


val out_of_heap_tag : int


val unaligned_tag : int


val extension_constructor : 'a -> extension_constructor


val extension_name : extension_constructor -> string[@@inline always]


val extension_id : extension_constructor -> int[@@inline always]


[@@@ocaml.text
  " The following two functions are deprecated.  Use module {!Marshal}\n    instead. "]

val marshal : t -> bytes[@@ocaml.deprecated "Use Marshal.to_bytes instead."]


val unmarshal : bytes -> int -> (t * int)[@@ocaml.deprecated
                                           "Use Marshal.from_bytes and Marshal.total_size instead."]


module Ephemeron :
sig
  [@@@ocaml.text " Ephemeron with arbitrary arity and untyped "]
  type obj_t = t[@@ocaml.doc " alias for {!Obj.t} "]
    
  type t[@@ocaml.doc " an ephemeron cf {!Ephemeron} "]
    
  val create : int -> t[@@ocaml.doc
                         " [create n] returns an ephemeron with [n] keys.\n      All the keys and the data are initially empty "]
  
  val length : t -> int[@@ocaml.doc " return the number of keys "]
  
  val get_key : t -> int -> obj_t option[@@ocaml.doc
                                          " Same as {!Ephemeron.K1.get_key} "]
  
  val get_key_copy : t -> int -> obj_t option[@@ocaml.doc
                                               " Same as {!Ephemeron.K1.get_key_copy} "]
  
  val set_key : t -> int -> obj_t -> unit[@@ocaml.doc
                                           " Same as {!Ephemeron.K1.set_key} "]
  
  val unset_key : t -> int -> unit[@@ocaml.doc
                                    " Same as {!Ephemeron.K1.unset_key} "]
  
  val check_key : t -> int -> bool[@@ocaml.doc
                                    " Same as {!Ephemeron.K1.check_key} "]
  
  val blit_key : t -> int -> t -> int -> int -> unit[@@ocaml.doc
                                                      " Same as {!Ephemeron.K1.blit_key} "]
  
  val get_data : t -> obj_t option[@@ocaml.doc
                                    " Same as {!Ephemeron.K1.get_data} "]
  
  val get_data_copy : t -> obj_t option[@@ocaml.doc
                                         " Same as {!Ephemeron.K1.get_data_copy} "]
  
  val set_data : t -> obj_t -> unit[@@ocaml.doc
                                     " Same as {!Ephemeron.K1.set_data} "]
  
  val unset_data : t -> unit[@@ocaml.doc
                              " Same as {!Ephemeron.K1.unset_data} "]
  
  val check_data : t -> bool[@@ocaml.doc
                              " Same as {!Ephemeron.K1.check_data} "]
  
  val blit_data : t -> t -> unit[@@ocaml.doc
                                  " Same as {!Ephemeron.K1.blit_data} "]
  
end
File "obj.mli", line 107, characters 7-8:
Error: Multiple definitions of type t
