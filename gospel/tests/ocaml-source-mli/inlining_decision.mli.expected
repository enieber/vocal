
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.warning "+a-4-9-30-40-41-42"]
[@@@ocaml.text
  " See the Flambda manual chapter for an explanation in prose of the\n    inlining decision procedure. "]
val for_call_site :
  env:Inline_and_simplify_aux.Env.t ->
    r:Inline_and_simplify_aux.Result.t ->
      function_decls:Simple_value_approx.function_declarations ->
        lhs_of_application:Variable.t ->
          closure_id_being_applied:Closure_id.t ->
            function_decl:Simple_value_approx.function_declaration ->
              value_set_of_closures:Simple_value_approx.value_set_of_closures
                ->
                args:Variable.t list ->
                  args_approxs:Simple_value_approx.t list ->
                    dbg:Debuginfo.t ->
                      simplify:Inlining_decision_intf.simplify ->
                        inline_requested:Lambda.inline_attribute ->
                          specialise_requested:Lambda.specialise_attribute ->
                            (Flambda.t * Inline_and_simplify_aux.Result.t)
[@@ocaml.doc
  " Try to inline a full application of a known function, guided by various\n    heuristics. "]
val should_inline_inside_declaration : Flambda.function_declaration -> bool
[@@ocaml.doc
  " When a function declaration is encountered by [for_call_site], the body\n    may be subject to inlining immediately, thus changing the declaration.\n    This function must return [true] for that to be able to happen. "]

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.warning "+a-4-9-30-40-41-42"]

[@@@ocaml.text
  " See the Flambda manual chapter for an explanation in prose of the\n    inlining decision procedure. "]

val for_call_site :
  env:Inline_and_simplify_aux.Env.t ->
    r:Inline_and_simplify_aux.Result.t ->
      function_decls:Simple_value_approx.function_declarations ->
        lhs_of_application:Variable.t ->
          closure_id_being_applied:Closure_id.t ->
            function_decl:Simple_value_approx.function_declaration ->
              value_set_of_closures:Simple_value_approx.value_set_of_closures
                ->
                args:Variable.t list ->
                  args_approxs:Simple_value_approx.t list ->
                    dbg:Debuginfo.t ->
                      simplify:Inlining_decision_intf.simplify ->
                        inline_requested:Lambda.inline_attribute ->
                          specialise_requested:Lambda.specialise_attribute ->
                            (Flambda.t * Inline_and_simplify_aux.Result.t)
[@@ocaml.doc
  " Try to inline a full application of a known function, guided by various\n    heuristics. "]


val should_inline_inside_declaration : Flambda.function_declaration -> bool
[@@ocaml.doc
  " When a function declaration is encountered by [for_call_site], the body\n    may be subject to inlining immediately, thus changing the declaration.\n    This function must return [true] for that to be able to happen. "]


*******************************
********* Typed GOSPEL ********
*******************************
module inlining_decision.mli

  Namespace: inlining_decision.mli
    Type symbols
      
    Logic Symbols
      
    Exception Symbols
      
    Namespaces
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    [@@@ocaml.warning "+a-4-9-30-40-41-42"]
    
    [@@@ocaml.text
      " See the Flambda manual chapter for an explanation in prose of the\n    inlining decision procedure. "]
    
    val for_call_site :
    env:Inline_and_simplify_aux.Env.t ->
      r:Inline_and_simplify_aux.Result.t ->
        function_decls:Simple_value_approx.function_declarations ->
          lhs_of_application:Variable.t ->
            closure_id_being_applied:Closure_id.t ->
              function_decl:Simple_value_approx.function_declaration ->
                value_set_of_closures:Simple_value_approx.value_set_of_closures
                  ->
                  args:Variable.t list ->
                    args_approxs:Simple_value_approx.t list ->
                      dbg:Debuginfo.t ->
                        simplify:Inlining_decision_intf.simplify ->
                          inline_requested:Lambda.inline_attribute ->
                            specialise_requested:Lambda.specialise_attribute
                              ->
                              (Flambda.t * Inline_and_simplify_aux.Result.t)
    [@@ocaml.doc
      " Try to inline a full application of a known function, guided by various\n    heuristics. "]
    
    
    val should_inline_inside_declaration :
    Flambda.function_declaration -> bool[@@ocaml.doc
                                          " When a function declaration is encountered by [for_call_site], the body\n    may be subject to inlining immediately, thus changing the declaration.\n    This function must return [true] for that to be able to happen. "]
    


*** OK ***

