
*******************************
********** Parsed file ********
*******************************
val word_addressed : bool
val num_register_classes : int
val register_class : Reg.t -> int
val num_available_registers : int array
val first_available_register : int array
val register_name : int -> string
val phys_reg : int -> Reg.t
val rotate_registers : bool
val loc_arguments : Reg.t array -> (Reg.t array * int)
val loc_results : Reg.t array -> Reg.t array
val loc_parameters : Reg.t array -> Reg.t array
val loc_external_arguments : Reg.t array array -> (Reg.t array array * int)
val loc_external_results : Reg.t array -> Reg.t array
val loc_exn_bucket : Reg.t
val loc_spacetime_node_hole : Reg.t
val max_arguments_for_tailcalls : int
val safe_register_pressure : Mach.operation -> int
val max_register_pressure : Mach.operation -> int array
val destroyed_at_oper : Mach.instruction_desc -> Reg.t array
val destroyed_at_raise : Reg.t array
val regs_are_volatile : Reg.t array -> bool
val op_is_pure : Mach.operation -> bool
val num_stack_slots : int array
val contains_calls : bool ref
val assemble_file : string -> string -> int
val init : unit -> unit

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

val word_addressed : bool


val num_register_classes : int


val register_class : Reg.t -> int


val num_available_registers : int array


val first_available_register : int array


val register_name : int -> string


val phys_reg : int -> Reg.t


val rotate_registers : bool


val loc_arguments : Reg.t array -> (Reg.t array * int)


val loc_results : Reg.t array -> Reg.t array


val loc_parameters : Reg.t array -> Reg.t array


val loc_external_arguments : Reg.t array array -> (Reg.t array array * int)


val loc_external_results : Reg.t array -> Reg.t array


val loc_exn_bucket : Reg.t


val loc_spacetime_node_hole : Reg.t


val max_arguments_for_tailcalls : int


val safe_register_pressure : Mach.operation -> int


val max_register_pressure : Mach.operation -> int array


val destroyed_at_oper : Mach.instruction_desc -> Reg.t array


val destroyed_at_raise : Reg.t array


val regs_are_volatile : Reg.t array -> bool


val op_is_pure : Mach.operation -> bool


val num_stack_slots : int array


val contains_calls : bool ref


val assemble_file : string -> string -> int


val init : unit -> unit


*******************************
********* Typed GOSPEL ********
*******************************
module proc.mli

  Namespace: proc.mli
    Type symbols
      
    Logic Symbols
      
    Exception Symbols
      
    Namespaces
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    val word_addressed : bool
    
    
    val num_register_classes : int
    
    
    val register_class : Reg.t -> int
    
    
    val num_available_registers : int array
    
    
    val first_available_register : int array
    
    
    val register_name : int -> string
    
    
    val phys_reg : int -> Reg.t
    
    
    val rotate_registers : bool
    
    
    val loc_arguments : Reg.t array -> (Reg.t array * int)
    
    
    val loc_results : Reg.t array -> Reg.t array
    
    
    val loc_parameters : Reg.t array -> Reg.t array
    
    
    val loc_external_arguments :
    Reg.t array array -> (Reg.t array array * int)
    
    
    val loc_external_results : Reg.t array -> Reg.t array
    
    
    val loc_exn_bucket : Reg.t
    
    
    val loc_spacetime_node_hole : Reg.t
    
    
    val max_arguments_for_tailcalls : int
    
    
    val safe_register_pressure : Mach.operation -> int
    
    
    val max_register_pressure : Mach.operation -> int array
    
    
    val destroyed_at_oper : Mach.instruction_desc -> Reg.t array
    
    
    val destroyed_at_raise : Reg.t array
    
    
    val regs_are_volatile : Reg.t array -> bool
    
    
    val op_is_pure : Mach.operation -> bool
    
    
    val num_stack_slots : int array
    
    
    val contains_calls : bool ref
    
    
    val assemble_file : string -> string -> int
    
    
    val init : unit -> unit
    


*** OK ***

