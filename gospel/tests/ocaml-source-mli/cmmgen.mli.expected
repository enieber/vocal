
*******************************
********** Parsed file ********
*******************************
val compunit :
  ppf_dump:Format.formatter ->
    (Clambda.ulambda * Clambda.preallocated_block list *
      Clambda.preallocated_constant list) -> Cmm.phrase list
val apply_function : int -> Cmm.phrase
val send_function : int -> Cmm.phrase
val curry_function : int -> Cmm.phrase list
val generic_functions : bool -> Cmx_format.unit_infos list -> Cmm.phrase list
val entry_point : string list -> Cmm.phrase
val global_table : string list -> Cmm.phrase
val reference_symbols : string list -> Cmm.phrase
val globals_map :
  (string * Digest.t * Digest.t * string list) list -> Cmm.phrase
val frame_table : string list -> Cmm.phrase
val spacetime_shapes : string list -> Cmm.phrase
val data_segment_table : string list -> Cmm.phrase
val code_segment_table : string list -> Cmm.phrase
val predef_exception : int -> string -> Cmm.phrase
val plugin_header : (Cmx_format.unit_infos * Digest.t) list -> Cmm.phrase
val black_block_header : int -> int -> nativeint

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

val compunit :
  ppf_dump:Format.formatter ->
    (Clambda.ulambda * Clambda.preallocated_block list *
      Clambda.preallocated_constant list) -> Cmm.phrase list


val apply_function : int -> Cmm.phrase


val send_function : int -> Cmm.phrase


val curry_function : int -> Cmm.phrase list


val generic_functions : bool -> Cmx_format.unit_infos list -> Cmm.phrase list


val entry_point : string list -> Cmm.phrase


val global_table : string list -> Cmm.phrase


val reference_symbols : string list -> Cmm.phrase


val globals_map :
  (string * Digest.t * Digest.t * string list) list -> Cmm.phrase


val frame_table : string list -> Cmm.phrase


val spacetime_shapes : string list -> Cmm.phrase


val data_segment_table : string list -> Cmm.phrase


val code_segment_table : string list -> Cmm.phrase


val predef_exception : int -> string -> Cmm.phrase


val plugin_header : (Cmx_format.unit_infos * Digest.t) list -> Cmm.phrase


val black_block_header : int -> int -> nativeint


*******************************
********* Typed GOSPEL ********
*******************************
module cmmgen.mli

  Namespace: cmmgen.mli
    Type symbols
      
    Logic Symbols
      
    Exception Symbols
      
    Namespaces
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    val compunit :
    ppf_dump:Format.formatter ->
      (Clambda.ulambda * Clambda.preallocated_block list *
        Clambda.preallocated_constant list) -> Cmm.phrase list
    
    
    val apply_function : int -> Cmm.phrase
    
    
    val send_function : int -> Cmm.phrase
    
    
    val curry_function : int -> Cmm.phrase list
    
    
    val generic_functions :
    bool -> Cmx_format.unit_infos list -> Cmm.phrase list
    
    
    val entry_point : string list -> Cmm.phrase
    
    
    val global_table : string list -> Cmm.phrase
    
    
    val reference_symbols : string list -> Cmm.phrase
    
    
    val globals_map :
    (string * Digest.t * Digest.t * string list) list -> Cmm.phrase
    
    
    val frame_table : string list -> Cmm.phrase
    
    
    val spacetime_shapes : string list -> Cmm.phrase
    
    
    val data_segment_table : string list -> Cmm.phrase
    
    
    val code_segment_table : string list -> Cmm.phrase
    
    
    val predef_exception : int -> string -> Cmm.phrase
    
    
    val plugin_header : (Cmx_format.unit_infos * Digest.t) list -> Cmm.phrase
    
    
    val black_block_header : int -> int -> nativeint
    


*** OK ***

