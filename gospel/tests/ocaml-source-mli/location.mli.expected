
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.text
  " {1 Source code locations (ranges of positions), used in parsetree}\n\n  {b Warning:} this module is unstable and part of\n  {{!Compiler_libs}compiler-libs}.\n\n"]
open Format
type t = Warnings.loc =
  {
  loc_start: Lexing.position ;
  loc_end: Lexing.position ;
  loc_ghost: bool }
[@@@ocaml.text
  " Note on the use of Lexing.position in this module.\n   If [pos_fname = \"\"], then use [!input_name] instead.\n   If [pos_lnum = -1], then [pos_bol = 0]. Use [pos_cnum] and\n     re-parse the file to get the line and character numbers.\n   Else all fields are correct.\n"]
val none : t[@@ocaml.doc
              " An arbitrary value of type [t]; describes an empty ghost range. "]
val in_file : string -> t[@@ocaml.doc
                           " Return an empty ghost range located in a given file. "]
val init : Lexing.lexbuf -> string -> unit[@@ocaml.doc
                                            " Set the file name and line number of the [lexbuf] to be the start\n    of the named file. "]
val curr : Lexing.lexbuf -> t[@@ocaml.doc
                               " Get the location of the current token from the [lexbuf]. "]
val symbol_rloc : unit -> t
val symbol_gloc : unit -> t
val rhs_loc : int -> t[@@ocaml.doc
                        " [rhs_loc n] returns the location of the symbol at position [n], starting\n  at 1, in the current parser rule. "]
val rhs_interval : int -> int -> t
val get_pos_info : Lexing.position -> (string * int * int)[@@ocaml.doc
                                                            " file, line, char "]
type 'a loc = {
  txt: 'a ;
  loc: t }
val mknoloc : 'a -> 'a loc
val mkloc : 'a -> t -> 'a loc
[@@@ocaml.text " {1 Input info} "]
val input_name : string ref
val input_lexbuf : Lexing.lexbuf option ref
[@@@ocaml.text " {1 Toplevel-specific functions} "]
val echo_eof : unit -> unit
val reset : unit -> unit
[@@@ocaml.text " {1 Printing locations} "]
val rewrite_absolute_path : string -> string[@@ocaml.doc
                                              " rewrite absolute path to honor the BUILD_PATH_PREFIX_MAP\n        variable (https://reproducible-builds.org/specs/build-path-prefix-map/)\n        if it is set. "]
val absolute_path : string -> string
val show_filename : string -> string[@@ocaml.doc
                                      " In -absname mode, return the absolute path for this filename.\n        Otherwise, returns the filename unchanged. "]
val print_filename : formatter -> string -> unit
val print_loc : formatter -> t -> unit
val print_locs : formatter -> t list -> unit
[@@@ocaml.text " {1 Toplevel-specific location highlighting} "]
val highlight_terminfo : Lexing.lexbuf -> formatter -> t list -> unit
val highlight_dumb : Lexing.lexbuf -> formatter -> t list -> unit
[@@@ocaml.text " {1 Reporting errors and warnings} "]
[@@@ocaml.text " {2 The type of reports and report printers} "]
type msg = (Format.formatter -> unit) loc
val msg : ?loc:t -> ('a, Format.formatter, unit, msg) format4 -> 'a
type report_kind =
  | Report_error 
  | Report_warning of int 
  | Report_warning_as_error of int 
type report = {
  kind: report_kind ;
  main: msg ;
  sub: msg list }
type report_printer =
  {
  pp: report_printer -> Format.formatter -> report -> unit ;
  pp_report_kind:
    report_printer -> report -> Format.formatter -> report_kind -> unit ;
  pp_main_loc: report_printer -> report -> Format.formatter -> t -> unit ;
  pp_main_txt:
    report_printer ->
      report -> Format.formatter -> (Format.formatter -> unit) -> unit
    ;
  pp_submsgs:
    report_printer -> report -> Format.formatter -> msg list -> unit ;
  pp_submsg: report_printer -> report -> Format.formatter -> msg -> unit ;
  pp_submsg_loc: report_printer -> report -> Format.formatter -> t -> unit ;
  pp_submsg_txt:
    report_printer ->
      report -> Format.formatter -> (Format.formatter -> unit) -> unit
    }[@@ocaml.doc
       " A printer for [report]s, defined using open-recursion.\n    The goal is to make it easy to define new printers by re-using code from\n    existing ones.\n"]
[@@@ocaml.text " {2 Report printers used in the compiler} "]
val batch_mode_printer : report_printer
val terminfo_toplevel_printer : Lexing.lexbuf -> report_printer
val dumb_toplevel_printer : Lexing.lexbuf -> report_printer
val best_toplevel_printer : unit -> report_printer[@@ocaml.doc
                                                    " Detects the terminal capabilities and selects an adequate printer "]
[@@@ocaml.text " {2 Printing a [report]} "]
val print_report : formatter -> report -> unit[@@ocaml.doc
                                                " Display an error or warning report. "]
val report_printer : (unit -> report_printer) ref[@@ocaml.doc
                                                   " Hook for redefining the printer of reports.\n\n    The hook is a [unit -> report_printer] and not simply a [report_printer]:\n    this is useful so that it can detect the type of the output (a file, a\n    terminal, ...) and select a printer accordingly. "]
val default_report_printer : unit -> report_printer[@@ocaml.doc
                                                     " Original report printer for use in hooks. "]
[@@@ocaml.text " {1 Reporting warnings} "]
[@@@ocaml.text " {2 Converting a [Warnings.t] into a [report]} "]
val report_warning : t -> Warnings.t -> report option[@@ocaml.doc
                                                       " [report_warning loc w] produces a report for the given warning [w], or\n   [None] if the warning is not to be printed. "]
val warning_reporter : (t -> Warnings.t -> report option) ref[@@ocaml.doc
                                                               " Hook for intercepting warnings. "]
val default_warning_reporter : t -> Warnings.t -> report option[@@ocaml.doc
                                                                 " Original warning reporter for use in hooks. "]
[@@@ocaml.text " {2 Printing warnings} "]
val formatter_for_warnings : formatter ref
val print_warning : t -> formatter -> Warnings.t -> unit[@@ocaml.doc
                                                          " Prints a warning. This is simply the composition of [report_warning] and\n   [print_report]. "]
val prerr_warning : t -> Warnings.t -> unit[@@ocaml.doc
                                             " Same as [print_warning], but uses [!formatter_for_warnings] as output\n   formatter. "]
val deprecated : ?def:t -> ?use:t -> t -> string -> unit[@@ocaml.doc
                                                          " Prints a deprecation warning. "]
[@@@ocaml.text " {1 Reporting errors} "]
type error = report[@@ocaml.doc
                     " An [error] is a [report] which [report_kind] must be [Report_error]. "]
val error : ?loc:t -> ?sub:msg list -> string -> error
val errorf :
  ?loc:t ->
    ?sub:msg list -> ('a, Format.formatter, unit, error) format4 -> 'a
val error_of_printer :
  ?loc:t -> ?sub:msg list -> (formatter -> 'a -> unit) -> 'a -> error
val error_of_printer_file : (formatter -> 'a -> unit) -> 'a -> error
[@@@ocaml.text " {1 Automatically reporting errors for raised exceptions} "]
val register_error_of_exn : (exn -> error option) -> unit[@@ocaml.doc
                                                           " Each compiler module which defines a custom type of exception\n    which can surface as a user-visible error should register\n    a \"printer\" for this exception using [register_error_of_exn].\n    The result of the printer is an [error] value containing\n    a location, a message, and optionally sub-messages (each of them\n    being located as well). "]
val error_of_exn : exn -> [ `Ok of error  | `Already_displayed ] option
exception Error of error
  [@ocaml.doc
    " Raising [Error e] signals an error [e]; the exception will be caught and the\n   error will be printed. "]
exception Already_displayed_error
  [@ocaml.doc
    " Raising [Already_displayed_error] signals an error which has already been\n   printed. The exception will be caught, but nothing will be printed "]
val raise_errorf :
  ?loc:t -> ?sub:msg list -> ('a, Format.formatter, unit, 'b) format4 -> 'a
val report_exception : formatter -> exn -> unit[@@ocaml.doc
                                                 " Reraise the exception if it is unknown. "]

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.text
  " {1 Source code locations (ranges of positions), used in parsetree}\n\n  {b Warning:} this module is unstable and part of\n  {{!Compiler_libs}compiler-libs}.\n\n"]

open Format

type t = Warnings.loc =
{
loc_start: Lexing.position ;
loc_end: Lexing.position ;
loc_ghost: bool }
  

[@@@ocaml.text
  " Note on the use of Lexing.position in this module.\n   If [pos_fname = \"\"], then use [!input_name] instead.\n   If [pos_lnum = -1], then [pos_bol = 0]. Use [pos_cnum] and\n     re-parse the file to get the line and character numbers.\n   Else all fields are correct.\n"]

val none : t[@@ocaml.doc
              " An arbitrary value of type [t]; describes an empty ghost range. "]


val in_file : string -> t[@@ocaml.doc
                           " Return an empty ghost range located in a given file. "]


val init : Lexing.lexbuf -> string -> unit[@@ocaml.doc
                                            " Set the file name and line number of the [lexbuf] to be the start\n    of the named file. "]


val curr : Lexing.lexbuf -> t[@@ocaml.doc
                               " Get the location of the current token from the [lexbuf]. "]


val symbol_rloc : unit -> t


val symbol_gloc : unit -> t


val rhs_loc : int -> t[@@ocaml.doc
                        " [rhs_loc n] returns the location of the symbol at position [n], starting\n  at 1, in the current parser rule. "]


val rhs_interval : int -> int -> t


val get_pos_info : Lexing.position -> (string * int * int)[@@ocaml.doc
                                                            " file, line, char "]


type 'a loc = {
txt: 'a ;
loc: t }
  

val mknoloc : 'a -> 'a loc


val mkloc : 'a -> t -> 'a loc


[@@@ocaml.text " {1 Input info} "]

val input_name : string ref


val input_lexbuf : Lexing.lexbuf option ref


[@@@ocaml.text " {1 Toplevel-specific functions} "]

val echo_eof : unit -> unit


val reset : unit -> unit


[@@@ocaml.text " {1 Printing locations} "]

val rewrite_absolute_path : string -> string[@@ocaml.doc
                                              " rewrite absolute path to honor the BUILD_PATH_PREFIX_MAP\n        variable (https://reproducible-builds.org/specs/build-path-prefix-map/)\n        if it is set. "]


val absolute_path : string -> string


val show_filename : string -> string[@@ocaml.doc
                                      " In -absname mode, return the absolute path for this filename.\n        Otherwise, returns the filename unchanged. "]


val print_filename : formatter -> string -> unit


val print_loc : formatter -> t -> unit


val print_locs : formatter -> t list -> unit


[@@@ocaml.text " {1 Toplevel-specific location highlighting} "]

val highlight_terminfo : Lexing.lexbuf -> formatter -> t list -> unit


val highlight_dumb : Lexing.lexbuf -> formatter -> t list -> unit


[@@@ocaml.text " {1 Reporting errors and warnings} "]

[@@@ocaml.text " {2 The type of reports and report printers} "]

type msg = (Format.formatter -> unit) loc
  

val msg : ?loc:t -> ('a, Format.formatter, unit, msg) format4 -> 'a


type report_kind =
| Report_error 
| Report_warning of int 
| Report_warning_as_error of int 
  

type report = {
kind: report_kind ;
main: msg ;
sub: msg list }
  

type report_printer =
{
pp: report_printer -> Format.formatter -> report -> unit ;
pp_report_kind:
  report_printer -> report -> Format.formatter -> report_kind -> unit ;
pp_main_loc: report_printer -> report -> Format.formatter -> t -> unit ;
pp_main_txt:
  report_printer ->
    report -> Format.formatter -> (Format.formatter -> unit) -> unit
  ;
pp_submsgs: report_printer -> report -> Format.formatter -> msg list -> unit ;
pp_submsg: report_printer -> report -> Format.formatter -> msg -> unit ;
pp_submsg_loc: report_printer -> report -> Format.formatter -> t -> unit ;
pp_submsg_txt:
  report_printer ->
    report -> Format.formatter -> (Format.formatter -> unit) -> unit
  }[@@ocaml.doc
     " A printer for [report]s, defined using open-recursion.\n    The goal is to make it easy to define new printers by re-using code from\n    existing ones.\n"]
  

[@@@ocaml.text " {2 Report printers used in the compiler} "]

val batch_mode_printer : report_printer


val terminfo_toplevel_printer : Lexing.lexbuf -> report_printer


val dumb_toplevel_printer : Lexing.lexbuf -> report_printer


val best_toplevel_printer : unit -> report_printer[@@ocaml.doc
                                                    " Detects the terminal capabilities and selects an adequate printer "]


[@@@ocaml.text " {2 Printing a [report]} "]

val print_report : formatter -> report -> unit[@@ocaml.doc
                                                " Display an error or warning report. "]


val report_printer : (unit -> report_printer) ref[@@ocaml.doc
                                                   " Hook for redefining the printer of reports.\n\n    The hook is a [unit -> report_printer] and not simply a [report_printer]:\n    this is useful so that it can detect the type of the output (a file, a\n    terminal, ...) and select a printer accordingly. "]


val default_report_printer : unit -> report_printer[@@ocaml.doc
                                                     " Original report printer for use in hooks. "]


[@@@ocaml.text " {1 Reporting warnings} "]

[@@@ocaml.text " {2 Converting a [Warnings.t] into a [report]} "]

val report_warning : t -> Warnings.t -> report option[@@ocaml.doc
                                                       " [report_warning loc w] produces a report for the given warning [w], or\n   [None] if the warning is not to be printed. "]


val warning_reporter : (t -> Warnings.t -> report option) ref[@@ocaml.doc
                                                               " Hook for intercepting warnings. "]


val default_warning_reporter : t -> Warnings.t -> report option[@@ocaml.doc
                                                                 " Original warning reporter for use in hooks. "]


[@@@ocaml.text " {2 Printing warnings} "]

val formatter_for_warnings : formatter ref


val print_warning : t -> formatter -> Warnings.t -> unit[@@ocaml.doc
                                                          " Prints a warning. This is simply the composition of [report_warning] and\n   [print_report]. "]


val prerr_warning : t -> Warnings.t -> unit[@@ocaml.doc
                                             " Same as [print_warning], but uses [!formatter_for_warnings] as output\n   formatter. "]


val deprecated : ?def:t -> ?use:t -> t -> string -> unit[@@ocaml.doc
                                                          " Prints a deprecation warning. "]


[@@@ocaml.text " {1 Reporting errors} "]

type error = report[@@ocaml.doc
                     " An [error] is a [report] which [report_kind] must be [Report_error]. "]
  

val error : ?loc:t -> ?sub:msg list -> string -> error


val errorf :
  ?loc:t ->
    ?sub:msg list -> ('a, Format.formatter, unit, error) format4 -> 'a


val error_of_printer :
  ?loc:t -> ?sub:msg list -> (formatter -> 'a -> unit) -> 'a -> error


val error_of_printer_file : (formatter -> 'a -> unit) -> 'a -> error


[@@@ocaml.text " {1 Automatically reporting errors for raised exceptions} "]

val register_error_of_exn : (exn -> error option) -> unit[@@ocaml.doc
                                                           " Each compiler module which defines a custom type of exception\n    which can surface as a user-visible error should register\n    a \"printer\" for this exception using [register_error_of_exn].\n    The result of the printer is an [error] value containing\n    a location, a message, and optionally sub-messages (each of them\n    being located as well). "]


val error_of_exn : exn -> [ `Ok of error  | `Already_displayed ] option


exception Error of error
  [@ocaml.doc
    " Raising [Error e] signals an error [e]; the exception will be caught and the\n   error will be printed. "]

exception Already_displayed_error
  [@ocaml.doc
    " Raising [Already_displayed_error] signals an error which has already been\n   printed. The exception will be caught, but nothing will be printed "]

val raise_errorf :
  ?loc:t -> ?sub:msg list -> ('a, Format.formatter, unit, 'b) format4 -> 'a


val report_exception : formatter -> exn -> unit[@@ocaml.doc
                                                 " Reraise the exception if it is unknown. "]

gospel: internal error, uncaught exception:
        File "gospel/ocaml-lib/typing.ml", line 515, characters 22-28: Assertion failed
        
