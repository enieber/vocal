
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.text " Analysis of source files. "]
val analyse_files :
  ?init:Odoc_module.t_module list ->
    Odoc_global.source_file list -> Odoc_module.t_module list[@@ocaml.doc
                                                               " This function builds the top modules from the analysis of the\n   given list of source files.\n   @param init is the list of modules already known from a previous analysis.\n"]
val dump_modules : string -> Odoc_module.t_module list -> unit[@@ocaml.doc
                                                                " Dump of a list of modules into a file.\n   @raise Failure if an error occurs."]
val load_modules : string -> Odoc_module.t_module list[@@ocaml.doc
                                                        " Load of a list of modules from a file.\n   @raise Failure if an error occurs."]

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.text " Analysis of source files. "]

val analyse_files :
  ?init:Odoc_module.t_module list ->
    Odoc_global.source_file list -> Odoc_module.t_module list[@@ocaml.doc
                                                               " This function builds the top modules from the analysis of the\n   given list of source files.\n   @param init is the list of modules already known from a previous analysis.\n"]


val dump_modules : string -> Odoc_module.t_module list -> unit[@@ocaml.doc
                                                                " Dump of a list of modules into a file.\n   @raise Failure if an error occurs."]


val load_modules : string -> Odoc_module.t_module list[@@ocaml.doc
                                                        " Load of a list of modules from a file.\n   @raise Failure if an error occurs."]


*******************************
********* Typed GOSPEL ********
*******************************
module odoc_analyse.mli

  Namespace: odoc_analyse.mli
    Type symbols
      
    Logic Symbols
      
    Exception Symbols
      
    Namespaces
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    [@@@ocaml.text " Analysis of source files. "]
    
    val analyse_files :
    ?init:Odoc_module.t_module list ->
      Odoc_global.source_file list -> Odoc_module.t_module list[@@ocaml.doc
                                                                 " This function builds the top modules from the analysis of the\n   given list of source files.\n   @param init is the list of modules already known from a previous analysis.\n"]
    
    
    val dump_modules :
    string -> Odoc_module.t_module list -> unit[@@ocaml.doc
                                                 " Dump of a list of modules into a file.\n   @raise Failure if an error occurs."]
    
    
    val load_modules :
    string -> Odoc_module.t_module list[@@ocaml.doc
                                         " Load of a list of modules from a file.\n   @raise Failure if an error occurs."]
    


*** OK ***

