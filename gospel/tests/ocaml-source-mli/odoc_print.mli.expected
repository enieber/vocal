
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.text " Printing functions. "]
val string_of_type_expr : Types.type_expr -> string[@@ocaml.doc
                                                     " This function takes a Types.type_expr and returns a string.\n   It writes in and flushes [Format.str_formatter]."]
val string_of_module_type :
  ?code:string -> ?complete:bool -> Types.module_type -> string[@@ocaml.doc
                                                                 " This function returns a string representing a [Types.module_type].\n   @param complete indicates if we must print complete signatures\n   or just [sig end]. Default is [false].\n   @param code if [complete = false] and the type contains something else\n   than identificators and functors, then the given code is used.\n"]
val string_of_class_type : ?complete:bool -> Types.class_type -> string
[@@ocaml.doc
  " This function returns a string representing a [Types.class_type].\n   @param complete indicates if we must print complete signatures\n   or just [object end]. Default is [false].\n"]

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.text " Printing functions. "]

val string_of_type_expr : Types.type_expr -> string[@@ocaml.doc
                                                     " This function takes a Types.type_expr and returns a string.\n   It writes in and flushes [Format.str_formatter]."]


val string_of_module_type :
  ?code:string -> ?complete:bool -> Types.module_type -> string[@@ocaml.doc
                                                                 " This function returns a string representing a [Types.module_type].\n   @param complete indicates if we must print complete signatures\n   or just [sig end]. Default is [false].\n   @param code if [complete = false] and the type contains something else\n   than identificators and functors, then the given code is used.\n"]


val string_of_class_type : ?complete:bool -> Types.class_type -> string
[@@ocaml.doc
  " This function returns a string representing a [Types.class_type].\n   @param complete indicates if we must print complete signatures\n   or just [object end]. Default is [false].\n"]


*******************************
********* Typed GOSPEL ********
*******************************
module odoc_print.mli

  Namespace: odoc_print.mli
    Type symbols
      
    Logic Symbols
      
    Exception Symbols
      
    Namespaces
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    [@@@ocaml.text " Printing functions. "]
    
    val string_of_type_expr :
    Types.type_expr -> string[@@ocaml.doc
                               " This function takes a Types.type_expr and returns a string.\n   It writes in and flushes [Format.str_formatter]."]
    
    
    val string_of_module_type :
    ?code:string -> ?complete:bool -> Types.module_type -> string[@@ocaml.doc
                                                                   " This function returns a string representing a [Types.module_type].\n   @param complete indicates if we must print complete signatures\n   or just [sig end]. Default is [false].\n   @param code if [complete = false] and the type contains something else\n   than identificators and functors, then the given code is used.\n"]
    
    
    val string_of_class_type :
    ?complete:bool -> Types.class_type -> string[@@ocaml.doc
                                                  " This function returns a string representing a [Types.class_type].\n   @param complete indicates if we must print complete signatures\n   or just [object end]. Default is [false].\n"]
    


*** OK ***

