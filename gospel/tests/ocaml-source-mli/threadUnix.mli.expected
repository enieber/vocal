
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.text
  " Thread-compatible system calls.\n\n   @deprecated The functionality of this module has been merged back into\n   the {!Unix} module.  Threaded programs can now call the functions\n   from module {!Unix} directly, and still get the correct behavior\n   (block the calling thread, if required, but do not block all threads\n   in the process).  "]
[@@@ocaml.text " {1 Process handling} "]
val execv : string -> string array -> unit
val execve : string -> string array -> string array -> unit
val execvp : string -> string array -> unit
val wait : unit -> (int * Unix.process_status)
val waitpid : Unix.wait_flag list -> int -> (int * Unix.process_status)
val system : string -> Unix.process_status
[@@@ocaml.text " {1 Basic input/output} "]
val read : Unix.file_descr -> bytes -> int -> int -> int
val write : Unix.file_descr -> bytes -> int -> int -> int
val single_write : Unix.file_descr -> bytes -> int -> int -> int
val write_substring : Unix.file_descr -> string -> int -> int -> int
val single_write_substring : Unix.file_descr -> string -> int -> int -> int
[@@@ocaml.text " {1 Input/output with timeout} "]
val timed_read : Unix.file_descr -> bytes -> int -> int -> float -> int
[@@ocaml.doc " See {!ThreadUnix.timed_write}. "]
val timed_write : Unix.file_descr -> bytes -> int -> int -> float -> int
[@@ocaml.doc
  " Behave as {!ThreadUnix.read} and {!ThreadUnix.write}, except that\n   [Unix_error(ETIMEDOUT,_,_)] is raised if no data is\n   available for reading or ready for writing after [d] seconds.\n   The delay [d] is given in the fifth argument, in seconds. "]
val timed_write_substring :
  Unix.file_descr -> string -> int -> int -> float -> int[@@ocaml.doc
                                                           " See {!ThreadUnix.timed_write}. "]
[@@@ocaml.text " {1 Polling} "]
val select :
  Unix.file_descr list ->
    Unix.file_descr list ->
      Unix.file_descr list ->
        float ->
          (Unix.file_descr list * Unix.file_descr list * Unix.file_descr
            list)
[@@@ocaml.text " {1 Pipes and redirections} "]
val pipe : ?cloexec:bool -> unit -> (Unix.file_descr * Unix.file_descr)
val open_process_in : string -> in_channel
val open_process_out : string -> out_channel
val open_process : string -> (in_channel * out_channel)
val open_process_full :
  string -> string array -> (in_channel * out_channel * in_channel)
[@@@ocaml.text " {1 Time} "]
val sleep : int -> unit
[@@@ocaml.text " {1 Sockets} "]
val socket :
  ?cloexec:bool ->
    Unix.socket_domain -> Unix.socket_type -> int -> Unix.file_descr
val socketpair :
  ?cloexec:bool ->
    Unix.socket_domain ->
      Unix.socket_type -> int -> (Unix.file_descr * Unix.file_descr)
val accept :
  ?cloexec:bool -> Unix.file_descr -> (Unix.file_descr * Unix.sockaddr)
val connect : Unix.file_descr -> Unix.sockaddr -> unit
val recv :
  Unix.file_descr -> bytes -> int -> int -> Unix.msg_flag list -> int
val recvfrom :
  Unix.file_descr ->
    bytes -> int -> int -> Unix.msg_flag list -> (int * Unix.sockaddr)
val send :
  Unix.file_descr -> bytes -> int -> int -> Unix.msg_flag list -> int
val send_substring :
  Unix.file_descr -> string -> int -> int -> Unix.msg_flag list -> int
val sendto :
  Unix.file_descr ->
    bytes -> int -> int -> Unix.msg_flag list -> Unix.sockaddr -> int
val sendto_substring :
  Unix.file_descr ->
    string -> int -> int -> Unix.msg_flag list -> Unix.sockaddr -> int
val open_connection : Unix.sockaddr -> (in_channel * out_channel)
val establish_server :
  (in_channel -> out_channel -> unit) -> Unix.sockaddr -> unit

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.text
  " Thread-compatible system calls.\n\n   @deprecated The functionality of this module has been merged back into\n   the {!Unix} module.  Threaded programs can now call the functions\n   from module {!Unix} directly, and still get the correct behavior\n   (block the calling thread, if required, but do not block all threads\n   in the process).  "]

[@@@ocaml.text " {1 Process handling} "]

val execv : string -> string array -> unit


val execve : string -> string array -> string array -> unit


val execvp : string -> string array -> unit


val wait : unit -> (int * Unix.process_status)


val waitpid : Unix.wait_flag list -> int -> (int * Unix.process_status)


val system : string -> Unix.process_status


[@@@ocaml.text " {1 Basic input/output} "]

val read : Unix.file_descr -> bytes -> int -> int -> int


val write : Unix.file_descr -> bytes -> int -> int -> int


val single_write : Unix.file_descr -> bytes -> int -> int -> int


val write_substring : Unix.file_descr -> string -> int -> int -> int


val single_write_substring : Unix.file_descr -> string -> int -> int -> int


[@@@ocaml.text " {1 Input/output with timeout} "]

val timed_read : Unix.file_descr -> bytes -> int -> int -> float -> int
[@@ocaml.doc " See {!ThreadUnix.timed_write}. "]


val timed_write : Unix.file_descr -> bytes -> int -> int -> float -> int
[@@ocaml.doc
  " Behave as {!ThreadUnix.read} and {!ThreadUnix.write}, except that\n   [Unix_error(ETIMEDOUT,_,_)] is raised if no data is\n   available for reading or ready for writing after [d] seconds.\n   The delay [d] is given in the fifth argument, in seconds. "]


val timed_write_substring :
  Unix.file_descr -> string -> int -> int -> float -> int[@@ocaml.doc
                                                           " See {!ThreadUnix.timed_write}. "]


[@@@ocaml.text " {1 Polling} "]

val select :
  Unix.file_descr list ->
    Unix.file_descr list ->
      Unix.file_descr list ->
        float ->
          (Unix.file_descr list * Unix.file_descr list * Unix.file_descr
            list)


[@@@ocaml.text " {1 Pipes and redirections} "]

val pipe : ?cloexec:bool -> unit -> (Unix.file_descr * Unix.file_descr)


val open_process_in : string -> in_channel


val open_process_out : string -> out_channel


val open_process : string -> (in_channel * out_channel)


val open_process_full :
  string -> string array -> (in_channel * out_channel * in_channel)


[@@@ocaml.text " {1 Time} "]

val sleep : int -> unit


[@@@ocaml.text " {1 Sockets} "]

val socket :
  ?cloexec:bool ->
    Unix.socket_domain -> Unix.socket_type -> int -> Unix.file_descr


val socketpair :
  ?cloexec:bool ->
    Unix.socket_domain ->
      Unix.socket_type -> int -> (Unix.file_descr * Unix.file_descr)


val accept :
  ?cloexec:bool -> Unix.file_descr -> (Unix.file_descr * Unix.sockaddr)


val connect : Unix.file_descr -> Unix.sockaddr -> unit


val recv :
  Unix.file_descr -> bytes -> int -> int -> Unix.msg_flag list -> int


val recvfrom :
  Unix.file_descr ->
    bytes -> int -> int -> Unix.msg_flag list -> (int * Unix.sockaddr)


val send :
  Unix.file_descr -> bytes -> int -> int -> Unix.msg_flag list -> int


val send_substring :
  Unix.file_descr -> string -> int -> int -> Unix.msg_flag list -> int


val sendto :
  Unix.file_descr ->
    bytes -> int -> int -> Unix.msg_flag list -> Unix.sockaddr -> int


val sendto_substring :
  Unix.file_descr ->
    string -> int -> int -> Unix.msg_flag list -> Unix.sockaddr -> int


val open_connection : Unix.sockaddr -> (in_channel * out_channel)


val establish_server :
  (in_channel -> out_channel -> unit) -> Unix.sockaddr -> unit


*******************************
********* Typed GOSPEL ********
*******************************
module threadUnix.mli

  Namespace: threadUnix.mli
    Type symbols
      
    Logic Symbols
      
    Exception Symbols
      
    Namespaces
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    [@@@ocaml.text
      " Thread-compatible system calls.\n\n   @deprecated The functionality of this module has been merged back into\n   the {!Unix} module.  Threaded programs can now call the functions\n   from module {!Unix} directly, and still get the correct behavior\n   (block the calling thread, if required, but do not block all threads\n   in the process).  "]
    
    [@@@ocaml.text " {1 Process handling} "]
    
    val execv : string -> string array -> unit
    
    
    val execve : string -> string array -> string array -> unit
    
    
    val execvp : string -> string array -> unit
    
    
    val wait : unit -> (int * Unix.process_status)
    
    
    val waitpid : Unix.wait_flag list -> int -> (int * Unix.process_status)
    
    
    val system : string -> Unix.process_status
    
    
    [@@@ocaml.text " {1 Basic input/output} "]
    
    val read : Unix.file_descr -> bytes -> int -> int -> int
    
    
    val write : Unix.file_descr -> bytes -> int -> int -> int
    
    
    val single_write : Unix.file_descr -> bytes -> int -> int -> int
    
    
    val write_substring : Unix.file_descr -> string -> int -> int -> int
    
    
    val single_write_substring :
    Unix.file_descr -> string -> int -> int -> int
    
    
    [@@@ocaml.text " {1 Input/output with timeout} "]
    
    val timed_read :
    Unix.file_descr -> bytes -> int -> int -> float -> int[@@ocaml.doc
                                                            " See {!ThreadUnix.timed_write}. "]
    
    
    val timed_write :
    Unix.file_descr -> bytes -> int -> int -> float -> int[@@ocaml.doc
                                                            " Behave as {!ThreadUnix.read} and {!ThreadUnix.write}, except that\n   [Unix_error(ETIMEDOUT,_,_)] is raised if no data is\n   available for reading or ready for writing after [d] seconds.\n   The delay [d] is given in the fifth argument, in seconds. "]
    
    
    val timed_write_substring :
    Unix.file_descr -> string -> int -> int -> float -> int[@@ocaml.doc
                                                             " See {!ThreadUnix.timed_write}. "]
    
    
    [@@@ocaml.text " {1 Polling} "]
    
    val select :
    Unix.file_descr list ->
      Unix.file_descr list ->
        Unix.file_descr list ->
          float ->
            (Unix.file_descr list * Unix.file_descr list * Unix.file_descr
              list)
    
    
    [@@@ocaml.text " {1 Pipes and redirections} "]
    
    val pipe : ?cloexec:bool -> unit -> (Unix.file_descr * Unix.file_descr)
    
    
    val open_process_in : string -> in_channel
    
    
    val open_process_out : string -> out_channel
    
    
    val open_process : string -> (in_channel * out_channel)
    
    
    val open_process_full :
    string -> string array -> (in_channel * out_channel * in_channel)
    
    
    [@@@ocaml.text " {1 Time} "]
    
    val sleep : int -> unit
    
    
    [@@@ocaml.text " {1 Sockets} "]
    
    val socket :
    ?cloexec:bool ->
      Unix.socket_domain -> Unix.socket_type -> int -> Unix.file_descr
    
    
    val socketpair :
    ?cloexec:bool ->
      Unix.socket_domain ->
        Unix.socket_type -> int -> (Unix.file_descr * Unix.file_descr)
    
    
    val accept :
    ?cloexec:bool -> Unix.file_descr -> (Unix.file_descr * Unix.sockaddr)
    
    
    val connect : Unix.file_descr -> Unix.sockaddr -> unit
    
    
    val recv :
    Unix.file_descr -> bytes -> int -> int -> Unix.msg_flag list -> int
    
    
    val recvfrom :
    Unix.file_descr ->
      bytes -> int -> int -> Unix.msg_flag list -> (int * Unix.sockaddr)
    
    
    val send :
    Unix.file_descr -> bytes -> int -> int -> Unix.msg_flag list -> int
    
    
    val send_substring :
    Unix.file_descr -> string -> int -> int -> Unix.msg_flag list -> int
    
    
    val sendto :
    Unix.file_descr ->
      bytes -> int -> int -> Unix.msg_flag list -> Unix.sockaddr -> int
    
    
    val sendto_substring :
    Unix.file_descr ->
      string -> int -> int -> Unix.msg_flag list -> Unix.sockaddr -> int
    
    
    val open_connection : Unix.sockaddr -> (in_channel * out_channel)
    
    
    val establish_server :
    (in_channel -> out_channel -> unit) -> Unix.sockaddr -> unit
    


*** OK ***

