
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.warning "+a-4-9-30-40-41-42"]
val primitive :
  Lambda.primitive ->
    (Variable.t list * Simple_value_approx.t list) ->
      Flambda.named ->
        Debuginfo.t ->
          size_int:int ->
            big_endian:bool ->
              (Flambda.named * Simple_value_approx.t *
                Inlining_cost.Benefit.t)[@@ocaml.doc
                                          " Simplifies an application of a primitive based on approximation\n    information. "]

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.warning "+a-4-9-30-40-41-42"]

val primitive :
  Lambda.primitive ->
    (Variable.t list * Simple_value_approx.t list) ->
      Flambda.named ->
        Debuginfo.t ->
          size_int:int ->
            big_endian:bool ->
              (Flambda.named * Simple_value_approx.t *
                Inlining_cost.Benefit.t)[@@ocaml.doc
                                          " Simplifies an application of a primitive based on approximation\n    information. "]


*******************************
********* Typed GOSPEL ********
*******************************
module simplify_primitives.mli

  Namespace: simplify_primitives.mli
    Type symbols
      
    Logic Symbols
      
    Exception Symbols
      
    Namespaces
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    [@@@ocaml.warning "+a-4-9-30-40-41-42"]
    
    val primitive :
    Lambda.primitive ->
      (Variable.t list * Simple_value_approx.t list) ->
        Flambda.named ->
          Debuginfo.t ->
            size_int:int ->
              big_endian:bool ->
                (Flambda.named * Simple_value_approx.t *
                  Inlining_cost.Benefit.t)[@@ocaml.doc
                                            " Simplifies an application of a primitive based on approximation\n    information. "]
    


*** OK ***

