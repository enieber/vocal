
*******************************
********** Parsed file ********
*******************************
val module_of_filename : string -> string -> string
val output_prefix : string -> string
val extract_output : string option -> string
val default_output : string option -> string
val print_version_and_library : string -> 'a
val print_version_string : unit -> 'a
val print_standard_library : unit -> 'a
val fatal : string -> 'a
val first_ccopts : string list ref
val first_ppx : string list ref
val first_include_dirs : string list ref
val last_include_dirs : string list ref
val load_plugin : (string -> unit) ref
val get_objfiles : with_ocamlparam:bool -> string list
val last_objfiles : string list ref
val first_objfiles : string list ref
type filename = string
type readenv_position =
  | Before_args 
  | Before_compile of filename 
  | Before_link 
val readenv : Format.formatter -> readenv_position -> unit
val is_unit_name : string -> bool
val check_unit_name : string -> string -> unit
type deferred_action =
  | ProcessImplementation of string 
  | ProcessInterface of string 
  | ProcessCFile of string 
  | ProcessOtherFile of string 
  | ProcessObjects of string list 
  | ProcessDLLs of string list 
val c_object_of_filename : string -> string
val defer : deferred_action -> unit
val anonymous : string -> unit
val impl : string -> unit
val intf : string -> unit
val process_deferred_actions :
  (Format.formatter * (sourcefile:string -> outputprefix:string -> unit) *
    (sourcefile:string -> outputprefix:string -> unit) * string * string) ->
    unit

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

val module_of_filename : string -> string -> string


val output_prefix : string -> string


val extract_output : string option -> string


val default_output : string option -> string


val print_version_and_library : string -> 'a


val print_version_string : unit -> 'a


val print_standard_library : unit -> 'a


val fatal : string -> 'a


val first_ccopts : string list ref


val first_ppx : string list ref


val first_include_dirs : string list ref


val last_include_dirs : string list ref


val load_plugin : (string -> unit) ref


val get_objfiles : with_ocamlparam:bool -> string list


val last_objfiles : string list ref


val first_objfiles : string list ref


type filename = string
  

type readenv_position =
| Before_args 
| Before_compile of filename 
| Before_link 
  

val readenv : Format.formatter -> readenv_position -> unit


val is_unit_name : string -> bool


val check_unit_name : string -> string -> unit


type deferred_action =
| ProcessImplementation of string 
| ProcessInterface of string 
| ProcessCFile of string 
| ProcessOtherFile of string 
| ProcessObjects of string list 
| ProcessDLLs of string list 
  

val c_object_of_filename : string -> string


val defer : deferred_action -> unit


val anonymous : string -> unit


val impl : string -> unit


val intf : string -> unit


val process_deferred_actions :
  (Format.formatter * (sourcefile:string -> outputprefix:string -> unit) *
    (sourcefile:string -> outputprefix:string -> unit) * string * string) ->
    unit


*******************************
********* Typed GOSPEL ********
*******************************
module compenv.mli

  Namespace: compenv.mli
    Type symbols
       deferred_action
       filename [=string]
       readenv_position
      
    Logic Symbols
      function Before_args  : readenv_position
      function Before_compile (_:string) : readenv_position
      function Before_link  : readenv_position
      function ProcessCFile (_:string) : deferred_action
      function ProcessDLLs (_:string list) : deferred_action
      function ProcessImplementation (_:string) : deferred_action
      function ProcessInterface (_:string) : deferred_action
      function ProcessObjects (_:string list) : deferred_action
      function ProcessOtherFile (_:string) : deferred_action
      
    Exception Symbols
      
    Namespaces
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    val module_of_filename : string -> string -> string
    
    
    val output_prefix : string -> string
    
    
    val extract_output : string option -> string
    
    
    val default_output : string option -> string
    
    
    val print_version_and_library : string -> 'a
    
    
    val print_version_string : unit -> 'a
    
    
    val print_standard_library : unit -> 'a
    
    
    val fatal : string -> 'a
    
    
    val first_ccopts : string list ref
    
    
    val first_ppx : string list ref
    
    
    val first_include_dirs : string list ref
    
    
    val last_include_dirs : string list ref
    
    
    val load_plugin : (string -> unit) ref
    
    
    val get_objfiles : with_ocamlparam:bool -> string list
    
    
    val last_objfiles : string list ref
    
    
    val first_objfiles : string list ref
    
    
    type filename = string
    
    
    type readenv_position = Before_args of 
                            function Before_args  : readenv_position
                         | Before_compile of string
                           function Before_compile (_:string) : readenv_position
                         | Before_link of 
                           function Before_link  : readenv_position
    
    
    val readenv : Format.formatter -> readenv_position -> unit
    
    
    val is_unit_name : string -> bool
    
    
    val check_unit_name : string -> string -> unit
    
    
    type deferred_action = ProcessImplementation of string
                           function ProcessImplementation (_:string) : deferred_action
                        | ProcessInterface of string
                          function ProcessInterface (_:string) : deferred_action
                        | ProcessCFile of string
                          function ProcessCFile (_:string) : deferred_action
                        | ProcessOtherFile of string
                          function ProcessOtherFile (_:string) : deferred_action
                        | ProcessObjects of string list
                          function ProcessObjects (_:string list) : deferred_action
                        | ProcessDLLs of string list
                          function ProcessDLLs (_:string list) : deferred_action
    
    
    val c_object_of_filename : string -> string
    
    
    val defer : deferred_action -> unit
    
    
    val anonymous : string -> unit
    
    
    val impl : string -> unit
    
    
    val intf : string -> unit
    
    
    val process_deferred_actions :
    (Format.formatter * (sourcefile:string -> outputprefix:string -> unit) *
      (sourcefile:string -> outputprefix:string -> unit) * string * string)
      -> unit
    


*** OK ***

