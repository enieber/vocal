
*******************************
********** Parsed file ********
*******************************
module General :
sig
  val take : int -> 'a list -> 'a list
  val drop : int -> 'a list -> 'a list
  val uniq : ('a -> 'a -> int) -> 'a list -> 'a list
  val weed : ('a -> 'a -> int) -> 'a list -> 'a list
  type 'a stream = 'a head Lazy.t
  and 'a head =
    | Nil 
    | Cons of 'a * 'a stream 
  val length : 'a stream -> int
  val foldr : ('a -> 'b -> 'b) -> 'a stream -> 'b -> 'b
end
module Convert :
sig
  type ('token, 'semantic_value) traditional =
    (Lexing.lexbuf -> 'token) -> Lexing.lexbuf -> 'semantic_value
  type ('token, 'semantic_value) revised =
    (unit -> 'token) -> 'semantic_value
  val traditional2revised :
    ('token -> 'raw_token) ->
      ('token -> Lexing.position) ->
        ('token -> Lexing.position) ->
          ('raw_token, 'semantic_value) traditional ->
            ('token, 'semantic_value) revised
  val revised2traditional :
    ('raw_token -> Lexing.position -> Lexing.position -> 'token) ->
      ('token, 'semantic_value) revised ->
        ('raw_token, 'semantic_value) traditional
  module Simplified :
  sig
    val traditional2revised :
      ('token, 'semantic_value) traditional ->
        (('token * Lexing.position * Lexing.position), 'semantic_value)
          revised
    val revised2traditional :
      (('token * Lexing.position * Lexing.position), 'semantic_value) revised
        -> ('token, 'semantic_value) traditional
  end
end
module IncrementalEngine :
sig
  type position = Lexing.position
  open General
  module type INCREMENTAL_ENGINE  =
    sig
      type token
      type production
      type 'a env
      type 'a checkpoint = private
        | InputNeeded of 'a env 
        | Shifting of 'a env * 'a env * bool 
        | AboutToReduce of 'a env * production 
        | HandlingError of 'a env 
        | Accepted of 'a 
        | Rejected 
      val offer :
        'a checkpoint -> (token * position * position) -> 'a checkpoint
      val resume : 'a checkpoint -> 'a checkpoint
      type supplier = unit -> (token * position * position)
      val lexer_lexbuf_to_supplier :
        (Lexing.lexbuf -> token) -> Lexing.lexbuf -> supplier
      val loop : supplier -> 'a checkpoint -> 'a
      val loop_handle :
        ('a -> 'answer) ->
          ('a checkpoint -> 'answer) -> supplier -> 'a checkpoint -> 'answer
      val loop_handle_undo :
        ('a -> 'answer) ->
          ('a checkpoint -> 'a checkpoint -> 'answer) ->
            supplier -> 'a checkpoint -> 'answer
      val shifts : 'a checkpoint -> 'a env option
      val acceptable : 'a checkpoint -> token -> position -> bool
      type 'a lr1state
      val number : _ lr1state -> int
      val production_index : production -> int
      val find_production : int -> production
      type element =
        | Element: 'a lr1state * 'a * position * position -> element 
      type stack = element stream
      val stack : 'a env -> stack
      val top : 'a env -> element option
      val pop_many : int -> 'a env -> 'a env option
      val get : int -> 'a env -> element option
      val current_state_number : 'a env -> int
      val equal : 'a env -> 'a env -> bool
      val positions : 'a env -> (position * position)
      val env_has_default_reduction : 'a env -> bool
      val state_has_default_reduction : _ lr1state -> bool
      val pop : 'a env -> 'a env option
      val force_reduction : production -> 'a env -> 'a env
      val input_needed : 'a env -> 'a checkpoint
    end
  module type SYMBOLS  =
    sig
      type 'a terminal
      type 'a nonterminal
      type 'a symbol =
        | T: 'a terminal -> 'a symbol 
        | N: 'a nonterminal -> 'a symbol 
      type xsymbol =
        | X: 'a symbol -> xsymbol 
    end
  module type INSPECTION  =
    sig
      include SYMBOLS
      type 'a lr1state
      type production
      type item = (production * int)
      val compare_terminals : _ terminal -> _ terminal -> int
      val compare_nonterminals : _ nonterminal -> _ nonterminal -> int
      val compare_symbols : xsymbol -> xsymbol -> int
      val compare_productions : production -> production -> int
      val compare_items : item -> item -> int
      val incoming_symbol : 'a lr1state -> 'a symbol
      val items : _ lr1state -> item list
      val lhs : production -> xsymbol
      val rhs : production -> xsymbol list
      val nullable : _ nonterminal -> bool
      val first : _ nonterminal -> _ terminal -> bool
      val xfirst : xsymbol -> _ terminal -> bool
      val foreach_terminal : (xsymbol -> 'a -> 'a) -> 'a -> 'a
      val foreach_terminal_but_error : (xsymbol -> 'a -> 'a) -> 'a -> 'a
      type 'a env
      val feed : 'a symbol -> position -> 'a -> position -> 'b env -> 'b env
    end
  module type EVERYTHING  =
    sig
      include INCREMENTAL_ENGINE
      include
        ((INSPECTION with type 'a lr1state :=  'a lr1state) with type
            production :=  production) with type 'a env :=  'a env
    end
end
module EngineTypes :
sig
  type ('state, 'semantic_value) stack =
    {
    state: 'state ;
    semv: 'semantic_value ;
    startp: Lexing.position ;
    endp: Lexing.position ;
    next: ('state, 'semantic_value) stack }
  type ('state, 'semantic_value, 'token) env =
    {
    error: bool ;
    triple: ('token * Lexing.position * Lexing.position) ;
    stack: ('state, 'semantic_value) stack ;
    current: 'state }
  module type TABLE  =
    sig
      type state
      val number : state -> int
      type token
      type terminal
      type nonterminal
      type semantic_value
      val token2terminal : token -> terminal
      val token2value : token -> semantic_value
      val error_terminal : terminal
      val error_value : semantic_value
      val foreach_terminal : (terminal -> 'a -> 'a) -> 'a -> 'a
      type production
      val production_index : production -> int
      val find_production : int -> production
      val default_reduction :
        state ->
          ('env -> production -> 'answer) ->
            ('env -> 'answer) -> 'env -> 'answer
      val action :
        state ->
          terminal ->
            semantic_value ->
              ('env -> bool -> terminal -> semantic_value -> state -> 'answer)
                ->
                ('env -> production -> 'answer) ->
                  ('env -> 'answer) -> 'env -> 'answer
      val goto_nt : state -> nonterminal -> state
      val goto_prod : state -> production -> state
      val maybe_goto_nt : state -> nonterminal -> state option
      val is_start : production -> bool
      exception Error 
      type semantic_action =
        (state, semantic_value, token) env -> (state, semantic_value) stack
      val semantic_action : production -> semantic_action
      val may_reduce : state -> production -> bool
      val log : bool
      module Log :
      sig
        val state : state -> unit
        val shift : terminal -> state -> unit
        val reduce_or_accept : production -> unit
        val lookahead_token :
          terminal -> Lexing.position -> Lexing.position -> unit
        val initiating_error_handling : unit -> unit
        val resuming_error_handling : unit -> unit
        val handling_error : state -> unit
      end
    end
  module type MONOLITHIC_ENGINE  =
    sig
      type state
      type token
      type semantic_value
      exception Error 
      val entry :
        state -> (Lexing.lexbuf -> token) -> Lexing.lexbuf -> semantic_value
    end
  module type INCREMENTAL_ENGINE_START  =
    sig
      type state
      type semantic_value
      type 'a checkpoint
      val start : state -> Lexing.position -> semantic_value checkpoint
    end
  module type ENGINE  =
    sig
      include MONOLITHIC_ENGINE
      include
        IncrementalEngine.INCREMENTAL_ENGINE with type  token :=  token and
          type 'a lr1state =  state
      include
        INCREMENTAL_ENGINE_START with type  state :=  state and type
           semantic_value :=  semantic_value and type 'a checkpoint := 
          'a checkpoint
    end
end
module Engine :
sig
  open EngineTypes
  module Make :
  functor (T : TABLE) ->
    ENGINE with type  state =  T.state and type  token =  T.token and type
       semantic_value =  T.semantic_value and type  production = 
      T.production and type 'a env = 
      (T.state, T.semantic_value, T.token) EngineTypes.env
end
module ErrorReports :
sig
  type 'a buffer
  open Lexing
  val wrap :
    (lexbuf -> 'token) -> ((position * position) buffer * (lexbuf -> 'token))
  val show : ('a -> string) -> 'a buffer -> string
  val last : 'a buffer -> 'a
end
module Printers :
sig
  module Make :
  functor (I : IncrementalEngine.EVERYTHING) ->
    functor (User :
      sig
        val print : string -> unit
        val print_symbol : I.xsymbol -> unit
        val print_element : (I.element -> unit) option
      end) ->
      sig
        open I
        val print_symbols : xsymbol list -> unit
        val print_element_as_symbol : element -> unit
        val print_stack : 'a env -> unit
        val print_item : item -> unit
        val print_production : production -> unit
        val print_current_state : 'a env -> unit
        val print_env : 'a env -> unit
      end
end
module InfiniteArray :
sig
  type 'a t[@@ocaml.doc " This module implements infinite arrays. *"]
  val make : 'a -> 'a t[@@ocaml.doc
                         " [make x] creates an infinite array, where every slot contains [x]. *"]
  val get : 'a t -> int -> 'a[@@ocaml.doc
                               " [get a i] returns the element contained at offset [i] in the array [a].\n   Slots are numbered 0 and up. *"]
  val set : 'a t -> int -> 'a -> unit[@@ocaml.doc
                                       " [set a i x] sets the element contained at offset [i] in the array\n    [a] to [x]. Slots are numbered 0 and up. *"]
  val extent : 'a t -> int[@@ocaml.doc
                            " [extent a] is the length of an initial segment of the array [a]\n    that is sufficiently large to contain all [set] operations ever\n    performed. In other words, all elements beyond that segment have\n    the default value. "]
  val domain : 'a t -> 'a array[@@ocaml.doc
                                 " [domain a] is a fresh copy of an initial segment of the array [a]\n    whose length is [extent a]. "]
end
module PackedIntArray :
sig
  type t = (int * string)
  val pack : int array -> t
  val get : t -> int -> int
  val get1 : string -> int -> int
  val unflatten1 : (int * string) -> int -> int -> int
end
module RowDisplacement :
sig
  type 'a table = (int array * 'a array)
  val compress :
    ('a -> 'a -> bool) ->
      ('a -> bool) -> 'a -> int -> int -> 'a array array -> 'a table
  val get : 'a table -> int -> int -> 'a
  val getget :
    ('displacement -> int -> int) ->
      ('data -> int -> 'a) -> ('displacement * 'data) -> int -> int -> 'a
end
module LinearizedArray :
sig
  type 'a t = ('a array * int array)
  val make : 'a array array -> 'a t
  val read : 'a t -> int -> int -> 'a
  val write : 'a t -> int -> int -> 'a -> unit
  val length : 'a t -> int
  val row_length : 'a t -> int -> int
  val read_row : 'a t -> int -> 'a list
  val row_length_via : (int -> int) -> int -> int
  val read_via : (int -> 'a) -> (int -> int) -> int -> int -> 'a
  val read_row_via : (int -> 'a) -> (int -> int) -> int -> 'a list
end
module TableFormat :
sig
  module type TABLES  =
    sig
      type token
      val token2terminal : token -> int
      val error_terminal : int
      val token2value : token -> Obj.t
      val default_reduction : PackedIntArray.t
      val error : (int * string)
      val action : (PackedIntArray.t * PackedIntArray.t)
      val lhs : PackedIntArray.t
      val goto : (PackedIntArray.t * PackedIntArray.t)
      val start : int
      val semantic_action :
        ((int, Obj.t, token) EngineTypes.env ->
           (int, Obj.t) EngineTypes.stack)
          array
      exception Error 
      val trace : (string array * string array) option
    end
end
module InspectionTableFormat :
sig
  module type TABLES  =
    sig
      include IncrementalEngine.SYMBOLS
      type 'a lr1state
      val terminal : int -> xsymbol
      val nonterminal : int -> xsymbol
      val rhs : (PackedIntArray.t * PackedIntArray.t)
      val lr0_core : PackedIntArray.t
      val lr0_items : (PackedIntArray.t * PackedIntArray.t)
      val lr0_incoming : PackedIntArray.t
      val nullable : string
      val first : (int * string)
    end
end
module InspectionTableInterpreter :
sig
  module Symbols :
  functor (T : sig type 'a terminal type 'a nonterminal end) ->
    IncrementalEngine.SYMBOLS with type 'a terminal :=  'a T.terminal and
      type 'a nonterminal :=  'a T.nonterminal
  module Make :
  functor (TT : TableFormat.TABLES) ->
    functor (IT : InspectionTableFormat.TABLES with type 'a lr1state =  int)
      ->
      functor (ET :
        EngineTypes.TABLE with type  terminal =  int and type  nonterminal = 
          int and type  semantic_value =  Obj.t) ->
        functor (E :
          sig
            type 'a env =
              (ET.state, ET.semantic_value, ET.token) EngineTypes.env
          end) ->
          IncrementalEngine.INSPECTION with type 'a terminal := 
            'a IT.terminal and type 'a nonterminal :=  'a IT.nonterminal and
            type 'a lr1state :=  'a IT.lr1state and type  production :=  
            int and type 'a env :=  'a E.env
end
module TableInterpreter :
sig
  module MakeEngineTable :
  functor (T : TableFormat.TABLES) ->
    EngineTypes.TABLE with type  state =  int and type  token =  T.token and
      type  semantic_value =  Obj.t and type  production =  int and type
       terminal =  int and type  nonterminal =  int
end
module StaticVersion : sig val require_20180703 : unit end

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

module General :
sig
  val take : int -> 'a list -> 'a list
  
  val drop : int -> 'a list -> 'a list
  
  val uniq : ('a -> 'a -> int) -> 'a list -> 'a list
  
  val weed : ('a -> 'a -> int) -> 'a list -> 'a list
  
  type 'a stream = 'a head Lazy.t
    
  and 'a head =
  | Nil 
  | Cons of 'a * 'a stream 
    
  val length : 'a stream -> int
  
  val foldr : ('a -> 'b -> 'b) -> 'a stream -> 'b -> 'b
  
end

module Convert :
sig
  type ('token, 'semantic_value) traditional =
  (Lexing.lexbuf -> 'token) -> Lexing.lexbuf -> 'semantic_value
    
  type ('token, 'semantic_value) revised =
  (unit -> 'token) -> 'semantic_value
    
  val traditional2revised :
    ('token -> 'raw_token) ->
      ('token -> Lexing.position) ->
        ('token -> Lexing.position) ->
          ('raw_token, 'semantic_value) traditional ->
            ('token, 'semantic_value) revised
  
  val revised2traditional :
    ('raw_token -> Lexing.position -> Lexing.position -> 'token) ->
      ('token, 'semantic_value) revised ->
        ('raw_token, 'semantic_value) traditional
  
  module Simplified :
  sig
    val traditional2revised :
      ('token, 'semantic_value) traditional ->
        (('token * Lexing.position * Lexing.position), 'semantic_value)
          revised
    
    val revised2traditional :
      (('token * Lexing.position * Lexing.position), 'semantic_value) revised
        -> ('token, 'semantic_value) traditional
    
  end
end

module IncrementalEngine :
sig
  type position = Lexing.position
    
  open General
  module type INCREMENTAL_ENGINE  =
    sig
      type token
        
      type production
        
      type 'a env
        
      type 'a checkpoint = private
      | InputNeeded of 'a env 
      | Shifting of 'a env * 'a env * bool 
      | AboutToReduce of 'a env * production 
      | HandlingError of 'a env 
      | Accepted of 'a 
      | Rejected 
        
      val offer :
        'a checkpoint -> (token * position * position) -> 'a checkpoint
      
      val resume : 'a checkpoint -> 'a checkpoint
      
      type supplier = unit -> (token * position * position)
        
      val lexer_lexbuf_to_supplier :
        (Lexing.lexbuf -> token) -> Lexing.lexbuf -> supplier
      
      val loop : supplier -> 'a checkpoint -> 'a
      
      val loop_handle :
        ('a -> 'answer) ->
          ('a checkpoint -> 'answer) -> supplier -> 'a checkpoint -> 'answer
      
      val loop_handle_undo :
        ('a -> 'answer) ->
          ('a checkpoint -> 'a checkpoint -> 'answer) ->
            supplier -> 'a checkpoint -> 'answer
      
      val shifts : 'a checkpoint -> 'a env option
      
      val acceptable : 'a checkpoint -> token -> position -> bool
      
      type 'a lr1state
        
      val number : _ lr1state -> int
      
      val production_index : production -> int
      
      val find_production : int -> production
      
      type element =
      | Element: 'a lr1state * 'a * position * position -> element 
        
      type stack = element stream
        
      val stack : 'a env -> stack
      
      val top : 'a env -> element option
      
      val pop_many : int -> 'a env -> 'a env option
      
      val get : int -> 'a env -> element option
      
      val current_state_number : 'a env -> int
      
      val equal : 'a env -> 'a env -> bool
      
      val positions : 'a env -> (position * position)
      
      val env_has_default_reduction : 'a env -> bool
      
      val state_has_default_reduction : _ lr1state -> bool
      
      val pop : 'a env -> 'a env option
      
      val force_reduction : production -> 'a env -> 'a env
      
      val input_needed : 'a env -> 'a checkpoint
      
    end
  module type SYMBOLS  =
    sig
      type 'a terminal
        
      type 'a nonterminal
        
      type 'a symbol =
      | T: 'a terminal -> 'a symbol 
      | N: 'a nonterminal -> 'a symbol 
        
      type xsymbol =
      | X: 'a symbol -> xsymbol 
        
    end
  module type INSPECTION  =
    sig
      include SYMBOLS
      type 'a lr1state
        
      type production
        
      type item = (production * int)
        
      val compare_terminals : _ terminal -> _ terminal -> int
      
      val compare_nonterminals : _ nonterminal -> _ nonterminal -> int
      
      val compare_symbols : xsymbol -> xsymbol -> int
      
      val compare_productions : production -> production -> int
      
      val compare_items : item -> item -> int
      
      val incoming_symbol : 'a lr1state -> 'a symbol
      
      val items : _ lr1state -> item list
      
      val lhs : production -> xsymbol
      
      val rhs : production -> xsymbol list
      
      val nullable : _ nonterminal -> bool
      
      val first : _ nonterminal -> _ terminal -> bool
      
      val xfirst : xsymbol -> _ terminal -> bool
      
      val foreach_terminal : (xsymbol -> 'a -> 'a) -> 'a -> 'a
      
      val foreach_terminal_but_error : (xsymbol -> 'a -> 'a) -> 'a -> 'a
      
      type 'a env
        
      val feed : 'a symbol -> position -> 'a -> position -> 'b env -> 'b env
      
    end
  module type EVERYTHING  =
    sig
      include INCREMENTAL_ENGINE
      include
        ((INSPECTION with type 'a lr1state :=  'a lr1state) with type
            production :=  production) with type 'a env :=  'a env
    end
end

module EngineTypes :
sig
  type ('state, 'semantic_value) stack =
  {
  state: 'state ;
  semv: 'semantic_value ;
  startp: Lexing.position ;
  endp: Lexing.position ;
  next: ('state, 'semantic_value) stack }
    
  type ('state, 'semantic_value, 'token) env =
  {
  error: bool ;
  triple: ('token * Lexing.position * Lexing.position) ;
  stack: ('state, 'semantic_value) stack ;
  current: 'state }
    
  module type TABLE  =
    sig
      type state
        
      val number : state -> int
      
      type token
        
      type terminal
        
      type nonterminal
        
      type semantic_value
        
      val token2terminal : token -> terminal
      
      val token2value : token -> semantic_value
      
      val error_terminal : terminal
      
      val error_value : semantic_value
      
      val foreach_terminal : (terminal -> 'a -> 'a) -> 'a -> 'a
      
      type production
        
      val production_index : production -> int
      
      val find_production : int -> production
      
      val default_reduction :
        state ->
          ('env -> production -> 'answer) ->
            ('env -> 'answer) -> 'env -> 'answer
      
      val action :
        state ->
          terminal ->
            semantic_value ->
              ('env -> bool -> terminal -> semantic_value -> state -> 'answer)
                ->
                ('env -> production -> 'answer) ->
                  ('env -> 'answer) -> 'env -> 'answer
      
      val goto_nt : state -> nonterminal -> state
      
      val goto_prod : state -> production -> state
      
      val maybe_goto_nt : state -> nonterminal -> state option
      
      val is_start : production -> bool
      
      exception Error 
      type semantic_action =
      (state, semantic_value, token) env -> (state, semantic_value) stack
        
      val semantic_action : production -> semantic_action
      
      val may_reduce : state -> production -> bool
      
      val log : bool
      
      module Log :
      sig
        val state : state -> unit
        
        val shift : terminal -> state -> unit
        
        val reduce_or_accept : production -> unit
        
        val lookahead_token :
          terminal -> Lexing.position -> Lexing.position -> unit
        
        val initiating_error_handling : unit -> unit
        
        val resuming_error_handling : unit -> unit
        
        val handling_error : state -> unit
        
      end
    end
  module type MONOLITHIC_ENGINE  =
    sig
      type state
        
      type token
        
      type semantic_value
        
      exception Error 
      val entry :
        state -> (Lexing.lexbuf -> token) -> Lexing.lexbuf -> semantic_value
      
    end
  module type INCREMENTAL_ENGINE_START  =
    sig
      type state
        
      type semantic_value
        
      type 'a checkpoint
        
      val start : state -> Lexing.position -> semantic_value checkpoint
      
    end
  module type ENGINE  =
    sig
      include MONOLITHIC_ENGINE
      include
        IncrementalEngine.INCREMENTAL_ENGINE with type  token :=  token and
          type 'a lr1state =  state
      include
        INCREMENTAL_ENGINE_START with type  state :=  state and type
           semantic_value :=  semantic_value and type 'a checkpoint := 
          'a checkpoint
    end
end

module Engine :
sig
  open EngineTypes
  module Make :
  functor (T : TABLE) ->
    ENGINE with type  state =  T.state and type  token =  T.token and type
       semantic_value =  T.semantic_value and type  production = 
      T.production and type 'a env = 
      (T.state, T.semantic_value, T.token) EngineTypes.env
end

module ErrorReports :
sig
  type 'a buffer
    
  open Lexing
  val wrap :
    (lexbuf -> 'token) -> ((position * position) buffer * (lexbuf -> 'token))
  
  val show : ('a -> string) -> 'a buffer -> string
  
  val last : 'a buffer -> 'a
  
end

module Printers :
sig
  module Make :
  functor (I : IncrementalEngine.EVERYTHING) ->
    functor (User :
      sig
        val print : string -> unit
        
        val print_symbol : I.xsymbol -> unit
        
        val print_element : (I.element -> unit) option
        
      end) ->
      sig
        open I
        val print_symbols : xsymbol list -> unit
        
        val print_element_as_symbol : element -> unit
        
        val print_stack : 'a env -> unit
        
        val print_item : item -> unit
        
        val print_production : production -> unit
        
        val print_current_state : 'a env -> unit
        
        val print_env : 'a env -> unit
        
      end
end

module InfiniteArray :
sig
  type 'a t[@@ocaml.doc " This module implements infinite arrays. *"]
    
  val make : 'a -> 'a t[@@ocaml.doc
                         " [make x] creates an infinite array, where every slot contains [x]. *"]
  
  val get : 'a t -> int -> 'a[@@ocaml.doc
                               " [get a i] returns the element contained at offset [i] in the array [a].\n   Slots are numbered 0 and up. *"]
  
  val set : 'a t -> int -> 'a -> unit[@@ocaml.doc
                                       " [set a i x] sets the element contained at offset [i] in the array\n    [a] to [x]. Slots are numbered 0 and up. *"]
  
  val extent : 'a t -> int[@@ocaml.doc
                            " [extent a] is the length of an initial segment of the array [a]\n    that is sufficiently large to contain all [set] operations ever\n    performed. In other words, all elements beyond that segment have\n    the default value. "]
  
  val domain : 'a t -> 'a array[@@ocaml.doc
                                 " [domain a] is a fresh copy of an initial segment of the array [a]\n    whose length is [extent a]. "]
  
end

module PackedIntArray :
sig
  type t = (int * string)
    
  val pack : int array -> t
  
  val get : t -> int -> int
  
  val get1 : string -> int -> int
  
  val unflatten1 : (int * string) -> int -> int -> int
  
end

module RowDisplacement :
sig
  type 'a table = (int array * 'a array)
    
  val compress :
    ('a -> 'a -> bool) ->
      ('a -> bool) -> 'a -> int -> int -> 'a array array -> 'a table
  
  val get : 'a table -> int -> int -> 'a
  
  val getget :
    ('displacement -> int -> int) ->
      ('data -> int -> 'a) -> ('displacement * 'data) -> int -> int -> 'a
  
end

module LinearizedArray :
sig
  type 'a t = ('a array * int array)
    
  val make : 'a array array -> 'a t
  
  val read : 'a t -> int -> int -> 'a
  
  val write : 'a t -> int -> int -> 'a -> unit
  
  val length : 'a t -> int
  
  val row_length : 'a t -> int -> int
  
  val read_row : 'a t -> int -> 'a list
  
  val row_length_via : (int -> int) -> int -> int
  
  val read_via : (int -> 'a) -> (int -> int) -> int -> int -> 'a
  
  val read_row_via : (int -> 'a) -> (int -> int) -> int -> 'a list
  
end

module TableFormat :
sig
  module type TABLES  =
    sig
      type token
        
      val token2terminal : token -> int
      
      val error_terminal : int
      
      val token2value : token -> Obj.t
      
      val default_reduction : PackedIntArray.t
      
      val error : (int * string)
      
      val action : (PackedIntArray.t * PackedIntArray.t)
      
      val lhs : PackedIntArray.t
      
      val goto : (PackedIntArray.t * PackedIntArray.t)
      
      val start : int
      
      val semantic_action :
        ((int, Obj.t, token) EngineTypes.env ->
           (int, Obj.t) EngineTypes.stack)
          array
      
      exception Error 
      val trace : (string array * string array) option
      
    end
end

module InspectionTableFormat :
sig
  module type TABLES  =
    sig
      include IncrementalEngine.SYMBOLS
      type 'a lr1state
        
      val terminal : int -> xsymbol
      
      val nonterminal : int -> xsymbol
      
      val rhs : (PackedIntArray.t * PackedIntArray.t)
      
      val lr0_core : PackedIntArray.t
      
      val lr0_items : (PackedIntArray.t * PackedIntArray.t)
      
      val lr0_incoming : PackedIntArray.t
      
      val nullable : string
      
      val first : (int * string)
      
    end
end

module InspectionTableInterpreter :
sig
  module Symbols :
  functor (T : sig type 'a terminal
                    type 'a nonterminal
                    end) ->
    IncrementalEngine.SYMBOLS with type 'a terminal :=  'a T.terminal and
      type 'a nonterminal :=  'a T.nonterminal
  module Make :
  functor (TT : TableFormat.TABLES) ->
    functor (IT : InspectionTableFormat.TABLES with type 'a lr1state =  int)
      ->
      functor (ET :
        EngineTypes.TABLE with type  terminal =  int and type  nonterminal = 
          int and type  semantic_value =  Obj.t) ->
        functor (E :
          sig
            type 'a env =
            (ET.state, ET.semantic_value, ET.token) EngineTypes.env
              
          end) ->
          IncrementalEngine.INSPECTION with type 'a terminal := 
            'a IT.terminal and type 'a nonterminal :=  'a IT.nonterminal and
            type 'a lr1state :=  'a IT.lr1state and type  production :=  
            int and type 'a env :=  'a E.env
end

module TableInterpreter :
sig
  module MakeEngineTable :
  functor (T : TableFormat.TABLES) ->
    EngineTypes.TABLE with type  state =  int and type  token =  T.token and
      type  semantic_value =  Obj.t and type  production =  int and type
       terminal =  int and type  nonterminal =  int
end

module StaticVersion : sig val require_20180703 : unit
                          end
File "./lazy.mli", line 18, characters 15-21:
Error: Symbol lazy_t not found
