
*******************************
********** Parsed file ********
*******************************
open Types
open Format
module type OBJ  =
  sig
    type t
    val repr : 'a -> t
    val obj : t -> 'a
    val is_block : t -> bool
    val tag : t -> int
    val size : t -> int
    val field : t -> int -> t
    val double_array_tag : int
    val double_field : t -> int -> float
  end
module type EVALPATH  =
  sig
    type valu
    val eval_path : Env.t -> Path.t -> valu
    exception Error 
    val same_value : valu -> valu -> bool
  end
type ('a, 'b) gen_printer =
  | Zero of 'b 
  | Succ of ('a -> ('a, 'b) gen_printer) 
module type S  =
  sig
    type t
    val install_printer :
      Path.t -> Types.type_expr -> (formatter -> t -> unit) -> unit
    val install_generic_printer :
      Path.t ->
        Path.t ->
          (int ->
             (int -> t -> Outcometree.out_value, t -> Outcometree.out_value)
               gen_printer)
            -> unit
    val install_generic_printer' :
      Path.t ->
        Path.t ->
          (formatter -> t -> unit, formatter -> t -> unit) gen_printer ->
            unit[@@ocaml.doc
                  " [install_generic_printer' function_path constructor_path printer]\n        function_path is used to remove the printer. "]
    val remove_printer : Path.t -> unit
    val outval_of_untyped_exception : t -> Outcometree.out_value
    val outval_of_value :
      int ->
        int ->
          (int -> t -> Types.type_expr -> Outcometree.out_value option) ->
            Env.t -> t -> type_expr -> Outcometree.out_value
  end
module Make :
functor (O : OBJ) ->
  functor (EVP : EVALPATH with type  valu =  O.t) -> S with type  t =  O.t

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

open Types

open Format

module type OBJ  =
  sig
    type t
      
    val repr : 'a -> t
    
    val obj : t -> 'a
    
    val is_block : t -> bool
    
    val tag : t -> int
    
    val size : t -> int
    
    val field : t -> int -> t
    
    val double_array_tag : int
    
    val double_field : t -> int -> float
    
  end

module type EVALPATH  =
  sig
    type valu
      
    val eval_path : Env.t -> Path.t -> valu
    
    exception Error 
    val same_value : valu -> valu -> bool
    
  end

type ('a, 'b) gen_printer =
| Zero of 'b 
| Succ of ('a -> ('a, 'b) gen_printer) 
  

module type S  =
  sig
    type t
      
    val install_printer :
      Path.t -> Types.type_expr -> (formatter -> t -> unit) -> unit
    
    val install_generic_printer :
      Path.t ->
        Path.t ->
          (int ->
             (int -> t -> Outcometree.out_value, t -> Outcometree.out_value)
               gen_printer)
            -> unit
    
    val install_generic_printer' :
      Path.t ->
        Path.t ->
          (formatter -> t -> unit, formatter -> t -> unit) gen_printer ->
            unit[@@ocaml.doc
                  " [install_generic_printer' function_path constructor_path printer]\n        function_path is used to remove the printer. "]
    
    val remove_printer : Path.t -> unit
    
    val outval_of_untyped_exception : t -> Outcometree.out_value
    
    val outval_of_value :
      int ->
        int ->
          (int -> t -> Types.type_expr -> Outcometree.out_value option) ->
            Env.t -> t -> type_expr -> Outcometree.out_value
    
  end

module Make :
functor (O : OBJ) ->
  functor (EVP : EVALPATH with type  valu =  O.t) -> S with type  t =  O.t
File "./asttypes.mli", line 28, characters 19-24:
Error: Symbol int32 not found
