
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.text " Additional graphics primitives for the X Windows system. "]
type window_id = string
val window_id : unit -> window_id[@@ocaml.doc
                                   " Return the unique identifier of the OCaml graphics window.\n   The returned string is an unsigned 32 bits integer\n   in decimal form. "]
val open_subwindow : x:int -> y:int -> width:int -> height:int -> window_id
[@@ocaml.doc
  " Create a sub-window of the current OCaml graphics window\n   and return its identifier. "]
val close_subwindow : window_id -> unit[@@ocaml.doc
                                         " Close the sub-window having the given identifier. "]

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.text " Additional graphics primitives for the X Windows system. "]

type window_id = string
  

val window_id : unit -> window_id[@@ocaml.doc
                                   " Return the unique identifier of the OCaml graphics window.\n   The returned string is an unsigned 32 bits integer\n   in decimal form. "]


val open_subwindow : x:int -> y:int -> width:int -> height:int -> window_id
[@@ocaml.doc
  " Create a sub-window of the current OCaml graphics window\n   and return its identifier. "]


val close_subwindow : window_id -> unit[@@ocaml.doc
                                         " Close the sub-window having the given identifier. "]


*******************************
********* Typed GOSPEL ********
*******************************
module graphicsX11.mli

  Namespace: graphicsX11.mli
    Type symbols
       window_id [=string]
      
    Logic Symbols
      
    Exception Symbols
      
    Namespaces
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    [@@@ocaml.text
      " Additional graphics primitives for the X Windows system. "]
    
    type window_id = string
    
    
    val window_id#1 :
    unit -> window_id[@@ocaml.doc
                       " Return the unique identifier of the OCaml graphics window.\n   The returned string is an unsigned 32 bits integer\n   in decimal form. "]
    
    
    val open_subwindow :
    x:int -> y:int -> width:int -> height:int -> window_id[@@ocaml.doc
                                                            " Create a sub-window of the current OCaml graphics window\n   and return its identifier. "]
    
    
    val close_subwindow :
    window_id -> unit[@@ocaml.doc
                       " Close the sub-window having the given identifier. "]
    


*** OK ***

