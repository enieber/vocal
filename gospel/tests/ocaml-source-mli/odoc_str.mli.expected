
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.text
  " The functions to get a string from different kinds of elements (types, modules, ...). "]
val string_of_variance : Odoc_type.t_type -> (bool * bool) -> string[@@ocaml.doc
                                                                    " @return the variance string for the given type and (covariant, contravariant) information. "]
val string_of_type_list :
  ?par:bool -> string -> Types.type_expr list -> string[@@ocaml.doc
                                                         " This function returns a string to represent the given list of types,\n   with a given separator.\n   @param par can be used to force the addition or not of parentheses around the returned string.\n"]
val string_of_type_param_list : Odoc_type.t_type -> string[@@ocaml.doc
                                                            " This function returns a string to represent the list of type parameters\n   for the given type. "]
val string_of_type_extension_param_list :
  Odoc_extension.t_type_extension -> string[@@ocaml.doc
                                             " This function returns a string to represent the list of type parameters\n   for the given type extension. "]
val string_of_class_type_param_list : Types.type_expr list -> string[@@ocaml.doc
                                                                    " This function returns a string to represent the given list of\n   type parameters of a class or class type,\n   with a given separator. "]
val string_of_type : Odoc_type.t_type -> string[@@ocaml.doc
                                                 " @return a string to describe the given type. "]
val string_of_record : Odoc_type.record_field list -> string
val string_of_class_params : Odoc_class.t_class -> string[@@ocaml.doc
                                                           " @return a string to display the parameters of the given class,\n   in the same form as the compiler. "]
val string_of_type_extension : Odoc_extension.t_type_extension -> string
[@@ocaml.doc " @return a string to describe the given type extension. "]
val string_of_exception : Odoc_exception.t_exception -> string[@@ocaml.doc
                                                                " @return a string to describe the given exception. "]
val string_of_value : Odoc_value.t_value -> string[@@ocaml.doc
                                                    " @return a string to describe the given value. "]
val string_of_attribute : Odoc_value.t_attribute -> string[@@ocaml.doc
                                                            " @return a string to describe the given attribute. "]
val string_of_method : Odoc_value.t_method -> string[@@ocaml.doc
                                                      " @return a string to describe the given method. "]

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.text
  " The functions to get a string from different kinds of elements (types, modules, ...). "]

val string_of_variance : Odoc_type.t_type -> (bool * bool) -> string[@@ocaml.doc
                                                                    " @return the variance string for the given type and (covariant, contravariant) information. "]


val string_of_type_list :
  ?par:bool -> string -> Types.type_expr list -> string[@@ocaml.doc
                                                         " This function returns a string to represent the given list of types,\n   with a given separator.\n   @param par can be used to force the addition or not of parentheses around the returned string.\n"]


val string_of_type_param_list : Odoc_type.t_type -> string[@@ocaml.doc
                                                            " This function returns a string to represent the list of type parameters\n   for the given type. "]


val string_of_type_extension_param_list :
  Odoc_extension.t_type_extension -> string[@@ocaml.doc
                                             " This function returns a string to represent the list of type parameters\n   for the given type extension. "]


val string_of_class_type_param_list : Types.type_expr list -> string[@@ocaml.doc
                                                                    " This function returns a string to represent the given list of\n   type parameters of a class or class type,\n   with a given separator. "]


val string_of_type : Odoc_type.t_type -> string[@@ocaml.doc
                                                 " @return a string to describe the given type. "]


val string_of_record : Odoc_type.record_field list -> string


val string_of_class_params : Odoc_class.t_class -> string[@@ocaml.doc
                                                           " @return a string to display the parameters of the given class,\n   in the same form as the compiler. "]


val string_of_type_extension : Odoc_extension.t_type_extension -> string
[@@ocaml.doc " @return a string to describe the given type extension. "]


val string_of_exception : Odoc_exception.t_exception -> string[@@ocaml.doc
                                                                " @return a string to describe the given exception. "]


val string_of_value : Odoc_value.t_value -> string[@@ocaml.doc
                                                    " @return a string to describe the given value. "]


val string_of_attribute : Odoc_value.t_attribute -> string[@@ocaml.doc
                                                            " @return a string to describe the given attribute. "]


val string_of_method : Odoc_value.t_method -> string[@@ocaml.doc
                                                      " @return a string to describe the given method. "]


*******************************
********* Typed GOSPEL ********
*******************************
module odoc_str.mli

  Namespace: odoc_str.mli
    Type symbols
      
    Logic Symbols
      
    Exception Symbols
      
    Namespaces
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    [@@@ocaml.text
      " The functions to get a string from different kinds of elements (types, modules, ...). "]
    
    val string_of_variance :
    Odoc_type.t_type -> (bool * bool) -> string[@@ocaml.doc
                                                 " @return the variance string for the given type and (covariant, contravariant) information. "]
    
    
    val string_of_type_list :
    ?par:bool -> string -> Types.type_expr list -> string[@@ocaml.doc
                                                           " This function returns a string to represent the given list of types,\n   with a given separator.\n   @param par can be used to force the addition or not of parentheses around the returned string.\n"]
    
    
    val string_of_type_param_list :
    Odoc_type.t_type -> string[@@ocaml.doc
                                " This function returns a string to represent the list of type parameters\n   for the given type. "]
    
    
    val string_of_type_extension_param_list :
    Odoc_extension.t_type_extension -> string[@@ocaml.doc
                                               " This function returns a string to represent the list of type parameters\n   for the given type extension. "]
    
    
    val string_of_class_type_param_list :
    Types.type_expr list -> string[@@ocaml.doc
                                    " This function returns a string to represent the given list of\n   type parameters of a class or class type,\n   with a given separator. "]
    
    
    val string_of_type :
    Odoc_type.t_type -> string[@@ocaml.doc
                                " @return a string to describe the given type. "]
    
    
    val string_of_record : Odoc_type.record_field list -> string
    
    
    val string_of_class_params :
    Odoc_class.t_class -> string[@@ocaml.doc
                                  " @return a string to display the parameters of the given class,\n   in the same form as the compiler. "]
    
    
    val string_of_type_extension :
    Odoc_extension.t_type_extension -> string[@@ocaml.doc
                                               " @return a string to describe the given type extension. "]
    
    
    val string_of_exception :
    Odoc_exception.t_exception -> string[@@ocaml.doc
                                          " @return a string to describe the given exception. "]
    
    
    val string_of_value :
    Odoc_value.t_value -> string[@@ocaml.doc
                                  " @return a string to describe the given value. "]
    
    
    val string_of_attribute :
    Odoc_value.t_attribute -> string[@@ocaml.doc
                                      " @return a string to describe the given attribute. "]
    
    
    val string_of_method :
    Odoc_value.t_method -> string[@@ocaml.doc
                                   " @return a string to describe the given method. "]
    


*** OK ***

