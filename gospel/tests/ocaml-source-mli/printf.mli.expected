
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.text " Formatted output functions. "]
val fprintf : out_channel -> ('a, out_channel, unit) format -> 'a[@@ocaml.doc
                                                                   " [fprintf outchan format arg1 ... argN] formats the arguments\n   [arg1] to [argN] according to the format string [format], and\n   outputs the resulting string on the channel [outchan].\n\n   The format string is a character string which contains two types of\n   objects: plain characters, which are simply copied to the output\n   channel, and conversion specifications, each of which causes\n   conversion and printing of arguments.\n\n   Conversion specifications have the following form:\n\n   [% [flags] [width] [.precision] type]\n\n   In short, a conversion specification consists in the [%] character,\n   followed by optional modifiers and a type which is made of one or\n   two characters.\n\n   The types and their meanings are:\n\n   - [d], [i]: convert an integer argument to signed decimal.\n   - [u], [n], [l], [L], or [N]: convert an integer argument to\n     unsigned decimal.  Warning: [n], [l], [L], and [N] are\n     used for [scanf], and should not be used for [printf].\n   - [x]: convert an integer argument to unsigned hexadecimal,\n     using lowercase letters.\n   - [X]: convert an integer argument to unsigned hexadecimal,\n     using uppercase letters.\n   - [o]: convert an integer argument to unsigned octal.\n   - [s]: insert a string argument.\n   - [S]: convert a string argument to OCaml syntax (double quotes, escapes).\n   - [c]: insert a character argument.\n   - [C]: convert a character argument to OCaml syntax\n     (single quotes, escapes).\n   - [f]: convert a floating-point argument to decimal notation,\n     in the style [dddd.ddd].\n   - [F]: convert a floating-point argument to OCaml syntax ([dddd.]\n     or [dddd.ddd] or [d.ddd e+-dd]).\n   - [e] or [E]: convert a floating-point argument to decimal notation,\n     in the style [d.ddd e+-dd] (mantissa and exponent).\n   - [g] or [G]: convert a floating-point argument to decimal notation,\n     in style [f] or [e], [E] (whichever is more compact). Moreover,\n     any trailing zeros are removed from the fractional part of the result\n     and the decimal-point character is removed if there is no fractional\n     part remaining.\n   - [h] or [H]: convert a floating-point argument to hexadecimal notation,\n     in the style [0xh.hhhh e+-dd] (hexadecimal mantissa, exponent in\n     decimal and denotes a power of 2).\n   - [B]: convert a boolean argument to the string [true] or [false]\n   - [b]: convert a boolean argument (deprecated; do not use in new\n     programs).\n   - [ld], [li], [lu], [lx], [lX], [lo]: convert an [int32] argument to\n     the format specified by the second letter (decimal, hexadecimal, etc).\n   - [nd], [ni], [nu], [nx], [nX], [no]: convert a [nativeint] argument to\n     the format specified by the second letter.\n   - [Ld], [Li], [Lu], [Lx], [LX], [Lo]: convert an [int64] argument to\n     the format specified by the second letter.\n   - [a]: user-defined printer. Take two arguments and apply the\n     first one to [outchan] (the current output channel) and to the\n     second argument. The first argument must therefore have type\n     [out_channel -> 'b -> unit] and the second ['b].\n     The output produced by the function is inserted in the output of\n     [fprintf] at the current point.\n   - [t]: same as [%a], but take only one argument (with type\n     [out_channel -> unit]) and apply it to [outchan].\n   - [\\{ fmt %\\}]: convert a format string argument to its type digest.\n     The argument must have the same type as the internal format string\n     [fmt].\n   - [( fmt %)]: format string substitution. Take a format string\n     argument and substitute it to the internal format string [fmt]\n     to print following arguments. The argument must have the same\n     type as the internal format string [fmt].\n   - [!]: take no argument and flush the output.\n   - [%]: take no argument and output one [%] character.\n   - [\\@]: take no argument and output one [\\@] character.\n   - [,]: take no argument and output nothing: a no-op delimiter for\n     conversion specifications.\n\n   The optional [flags] are:\n   - [-]: left-justify the output (default is right justification).\n   - [0]: for numerical conversions, pad with zeroes instead of spaces.\n   - [+]: for signed numerical conversions, prefix number with a [+]\n     sign if positive.\n   - space: for signed numerical conversions, prefix number with a\n     space if positive.\n   - [#]: request an alternate formatting style for the integer types\n     ([x], [X], [o], [lx], [lX], [lo], [Lx], [LX], [Lo], [d], [i], [u],\n     [ld], [li], [lu], [Ld], [Li], [Lu], [nd], [ni], [nu]).\n\n   The optional [width] is an integer indicating the minimal\n   width of the result. For instance, [%6d] prints an integer,\n   prefixing it with spaces to fill at least 6 characters.\n\n   The optional [precision] is a dot [.] followed by an integer\n   indicating how many digits follow the decimal point in the [%f],\n   [%e], and [%E] conversions. For instance, [%.4f] prints a [float] with\n   4 fractional digits.\n\n   The integer in a [width] or [precision] can also be specified as\n   [*], in which case an extra integer argument is taken to specify\n   the corresponding [width] or [precision]. This integer argument\n   precedes immediately the argument to print.\n   For instance, [%.*f] prints a [float] with as many fractional\n   digits as the value of the argument given before the float. "]
val printf : ('a, out_channel, unit) format -> 'a[@@ocaml.doc
                                                   " Same as {!Printf.fprintf}, but output on [stdout]. "]
val eprintf : ('a, out_channel, unit) format -> 'a[@@ocaml.doc
                                                    " Same as {!Printf.fprintf}, but output on [stderr]. "]
val sprintf : ('a, unit, string) format -> 'a[@@ocaml.doc
                                               " Same as {!Printf.fprintf}, but instead of printing on an output channel,\n   return a string containing the result of formatting the arguments. "]
val bprintf : Buffer.t -> ('a, Buffer.t, unit) format -> 'a[@@ocaml.doc
                                                             " Same as {!Printf.fprintf}, but instead of printing on an output channel,\n   append the formatted arguments to the given extensible buffer\n   (see module {!Buffer}). "]
val ifprintf : 'b -> ('a, 'b, 'c, unit) format4 -> 'a[@@ocaml.doc
                                                       " Same as {!Printf.fprintf}, but does not print anything.\n    Useful to ignore some material when conditionally printing.\n    @since 3.10.0\n"]
[@@@ocaml.text " Formatted output functions with continuations. "]
val kfprintf :
  (out_channel -> 'd) ->
    out_channel -> ('a, out_channel, unit, 'd) format4 -> 'a[@@ocaml.doc
                                                              " Same as [fprintf], but instead of returning immediately,\n   passes the out channel to its first argument at the end of printing.\n   @since 3.09.0\n"]
val ikfprintf : ('b -> 'd) -> 'b -> ('a, 'b, 'c, 'd) format4 -> 'a[@@ocaml.doc
                                                                    " Same as [kfprintf] above, but does not print anything.\n   Useful to ignore some material when conditionally printing.\n   @since 4.01.0\n"]
val ksprintf : (string -> 'd) -> ('a, unit, string, 'd) format4 -> 'a
[@@ocaml.doc
  " Same as [sprintf] above, but instead of returning the string,\n   passes it to the first argument.\n   @since 3.09.0\n"]
val kbprintf :
  (Buffer.t -> 'd) -> Buffer.t -> ('a, Buffer.t, unit, 'd) format4 -> 'a
[@@ocaml.doc
  " Same as [bprintf], but instead of returning immediately,\n   passes the buffer to its first argument at the end of printing.\n   @since 3.10.0\n"]
[@@@ocaml.text " Deprecated "]
val kprintf : (string -> 'b) -> ('a, unit, string, 'b) format4 -> 'a[@@ocaml.doc
                                                                    " A deprecated synonym for [ksprintf]. "]

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.text " Formatted output functions. "]

val fprintf : out_channel -> ('a, out_channel, unit) format -> 'a[@@ocaml.doc
                                                                   " [fprintf outchan format arg1 ... argN] formats the arguments\n   [arg1] to [argN] according to the format string [format], and\n   outputs the resulting string on the channel [outchan].\n\n   The format string is a character string which contains two types of\n   objects: plain characters, which are simply copied to the output\n   channel, and conversion specifications, each of which causes\n   conversion and printing of arguments.\n\n   Conversion specifications have the following form:\n\n   [% [flags] [width] [.precision] type]\n\n   In short, a conversion specification consists in the [%] character,\n   followed by optional modifiers and a type which is made of one or\n   two characters.\n\n   The types and their meanings are:\n\n   - [d], [i]: convert an integer argument to signed decimal.\n   - [u], [n], [l], [L], or [N]: convert an integer argument to\n     unsigned decimal.  Warning: [n], [l], [L], and [N] are\n     used for [scanf], and should not be used for [printf].\n   - [x]: convert an integer argument to unsigned hexadecimal,\n     using lowercase letters.\n   - [X]: convert an integer argument to unsigned hexadecimal,\n     using uppercase letters.\n   - [o]: convert an integer argument to unsigned octal.\n   - [s]: insert a string argument.\n   - [S]: convert a string argument to OCaml syntax (double quotes, escapes).\n   - [c]: insert a character argument.\n   - [C]: convert a character argument to OCaml syntax\n     (single quotes, escapes).\n   - [f]: convert a floating-point argument to decimal notation,\n     in the style [dddd.ddd].\n   - [F]: convert a floating-point argument to OCaml syntax ([dddd.]\n     or [dddd.ddd] or [d.ddd e+-dd]).\n   - [e] or [E]: convert a floating-point argument to decimal notation,\n     in the style [d.ddd e+-dd] (mantissa and exponent).\n   - [g] or [G]: convert a floating-point argument to decimal notation,\n     in style [f] or [e], [E] (whichever is more compact). Moreover,\n     any trailing zeros are removed from the fractional part of the result\n     and the decimal-point character is removed if there is no fractional\n     part remaining.\n   - [h] or [H]: convert a floating-point argument to hexadecimal notation,\n     in the style [0xh.hhhh e+-dd] (hexadecimal mantissa, exponent in\n     decimal and denotes a power of 2).\n   - [B]: convert a boolean argument to the string [true] or [false]\n   - [b]: convert a boolean argument (deprecated; do not use in new\n     programs).\n   - [ld], [li], [lu], [lx], [lX], [lo]: convert an [int32] argument to\n     the format specified by the second letter (decimal, hexadecimal, etc).\n   - [nd], [ni], [nu], [nx], [nX], [no]: convert a [nativeint] argument to\n     the format specified by the second letter.\n   - [Ld], [Li], [Lu], [Lx], [LX], [Lo]: convert an [int64] argument to\n     the format specified by the second letter.\n   - [a]: user-defined printer. Take two arguments and apply the\n     first one to [outchan] (the current output channel) and to the\n     second argument. The first argument must therefore have type\n     [out_channel -> 'b -> unit] and the second ['b].\n     The output produced by the function is inserted in the output of\n     [fprintf] at the current point.\n   - [t]: same as [%a], but take only one argument (with type\n     [out_channel -> unit]) and apply it to [outchan].\n   - [\\{ fmt %\\}]: convert a format string argument to its type digest.\n     The argument must have the same type as the internal format string\n     [fmt].\n   - [( fmt %)]: format string substitution. Take a format string\n     argument and substitute it to the internal format string [fmt]\n     to print following arguments. The argument must have the same\n     type as the internal format string [fmt].\n   - [!]: take no argument and flush the output.\n   - [%]: take no argument and output one [%] character.\n   - [\\@]: take no argument and output one [\\@] character.\n   - [,]: take no argument and output nothing: a no-op delimiter for\n     conversion specifications.\n\n   The optional [flags] are:\n   - [-]: left-justify the output (default is right justification).\n   - [0]: for numerical conversions, pad with zeroes instead of spaces.\n   - [+]: for signed numerical conversions, prefix number with a [+]\n     sign if positive.\n   - space: for signed numerical conversions, prefix number with a\n     space if positive.\n   - [#]: request an alternate formatting style for the integer types\n     ([x], [X], [o], [lx], [lX], [lo], [Lx], [LX], [Lo], [d], [i], [u],\n     [ld], [li], [lu], [Ld], [Li], [Lu], [nd], [ni], [nu]).\n\n   The optional [width] is an integer indicating the minimal\n   width of the result. For instance, [%6d] prints an integer,\n   prefixing it with spaces to fill at least 6 characters.\n\n   The optional [precision] is a dot [.] followed by an integer\n   indicating how many digits follow the decimal point in the [%f],\n   [%e], and [%E] conversions. For instance, [%.4f] prints a [float] with\n   4 fractional digits.\n\n   The integer in a [width] or [precision] can also be specified as\n   [*], in which case an extra integer argument is taken to specify\n   the corresponding [width] or [precision]. This integer argument\n   precedes immediately the argument to print.\n   For instance, [%.*f] prints a [float] with as many fractional\n   digits as the value of the argument given before the float. "]


val printf : ('a, out_channel, unit) format -> 'a[@@ocaml.doc
                                                   " Same as {!Printf.fprintf}, but output on [stdout]. "]


val eprintf : ('a, out_channel, unit) format -> 'a[@@ocaml.doc
                                                    " Same as {!Printf.fprintf}, but output on [stderr]. "]


val sprintf : ('a, unit, string) format -> 'a[@@ocaml.doc
                                               " Same as {!Printf.fprintf}, but instead of printing on an output channel,\n   return a string containing the result of formatting the arguments. "]


val bprintf : Buffer.t -> ('a, Buffer.t, unit) format -> 'a[@@ocaml.doc
                                                             " Same as {!Printf.fprintf}, but instead of printing on an output channel,\n   append the formatted arguments to the given extensible buffer\n   (see module {!Buffer}). "]


val ifprintf : 'b -> ('a, 'b, 'c, unit) format4 -> 'a[@@ocaml.doc
                                                       " Same as {!Printf.fprintf}, but does not print anything.\n    Useful to ignore some material when conditionally printing.\n    @since 3.10.0\n"]


[@@@ocaml.text " Formatted output functions with continuations. "]

val kfprintf :
  (out_channel -> 'd) ->
    out_channel -> ('a, out_channel, unit, 'd) format4 -> 'a[@@ocaml.doc
                                                              " Same as [fprintf], but instead of returning immediately,\n   passes the out channel to its first argument at the end of printing.\n   @since 3.09.0\n"]


val ikfprintf : ('b -> 'd) -> 'b -> ('a, 'b, 'c, 'd) format4 -> 'a[@@ocaml.doc
                                                                    " Same as [kfprintf] above, but does not print anything.\n   Useful to ignore some material when conditionally printing.\n   @since 4.01.0\n"]


val ksprintf : (string -> 'd) -> ('a, unit, string, 'd) format4 -> 'a
[@@ocaml.doc
  " Same as [sprintf] above, but instead of returning the string,\n   passes it to the first argument.\n   @since 3.09.0\n"]


val kbprintf :
  (Buffer.t -> 'd) -> Buffer.t -> ('a, Buffer.t, unit, 'd) format4 -> 'a
[@@ocaml.doc
  " Same as [bprintf], but instead of returning immediately,\n   passes the buffer to its first argument at the end of printing.\n   @since 3.10.0\n"]


[@@@ocaml.text " Deprecated "]

val kprintf : (string -> 'b) -> ('a, unit, string, 'b) format4 -> 'a[@@ocaml.doc
                                                                    " A deprecated synonym for [ksprintf]. "]


*******************************
********* Typed GOSPEL ********
*******************************
module printf.mli

  Namespace: printf.mli
    Type symbols
      
    Logic Symbols
      
    Exception Symbols
      
    Namespaces
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    [@@@ocaml.text " Formatted output functions. "]
    
    val fprintf :
    out_channel -> ('a, out_channel, unit) format -> 'a[@@ocaml.doc
                                                         " [fprintf outchan format arg1 ... argN] formats the arguments\n   [arg1] to [argN] according to the format string [format], and\n   outputs the resulting string on the channel [outchan].\n\n   The format string is a character string which contains two types of\n   objects: plain characters, which are simply copied to the output\n   channel, and conversion specifications, each of which causes\n   conversion and printing of arguments.\n\n   Conversion specifications have the following form:\n\n   [% [flags] [width] [.precision] type]\n\n   In short, a conversion specification consists in the [%] character,\n   followed by optional modifiers and a type which is made of one or\n   two characters.\n\n   The types and their meanings are:\n\n   - [d], [i]: convert an integer argument to signed decimal.\n   - [u], [n], [l], [L], or [N]: convert an integer argument to\n     unsigned decimal.  Warning: [n], [l], [L], and [N] are\n     used for [scanf], and should not be used for [printf].\n   - [x]: convert an integer argument to unsigned hexadecimal,\n     using lowercase letters.\n   - [X]: convert an integer argument to unsigned hexadecimal,\n     using uppercase letters.\n   - [o]: convert an integer argument to unsigned octal.\n   - [s]: insert a string argument.\n   - [S]: convert a string argument to OCaml syntax (double quotes, escapes).\n   - [c]: insert a character argument.\n   - [C]: convert a character argument to OCaml syntax\n     (single quotes, escapes).\n   - [f]: convert a floating-point argument to decimal notation,\n     in the style [dddd.ddd].\n   - [F]: convert a floating-point argument to OCaml syntax ([dddd.]\n     or [dddd.ddd] or [d.ddd e+-dd]).\n   - [e] or [E]: convert a floating-point argument to decimal notation,\n     in the style [d.ddd e+-dd] (mantissa and exponent).\n   - [g] or [G]: convert a floating-point argument to decimal notation,\n     in style [f] or [e], [E] (whichever is more compact). Moreover,\n     any trailing zeros are removed from the fractional part of the result\n     and the decimal-point character is removed if there is no fractional\n     part remaining.\n   - [h] or [H]: convert a floating-point argument to hexadecimal notation,\n     in the style [0xh.hhhh e+-dd] (hexadecimal mantissa, exponent in\n     decimal and denotes a power of 2).\n   - [B]: convert a boolean argument to the string [true] or [false]\n   - [b]: convert a boolean argument (deprecated; do not use in new\n     programs).\n   - [ld], [li], [lu], [lx], [lX], [lo]: convert an [int32] argument to\n     the format specified by the second letter (decimal, hexadecimal, etc).\n   - [nd], [ni], [nu], [nx], [nX], [no]: convert a [nativeint] argument to\n     the format specified by the second letter.\n   - [Ld], [Li], [Lu], [Lx], [LX], [Lo]: convert an [int64] argument to\n     the format specified by the second letter.\n   - [a]: user-defined printer. Take two arguments and apply the\n     first one to [outchan] (the current output channel) and to the\n     second argument. The first argument must therefore have type\n     [out_channel -> 'b -> unit] and the second ['b].\n     The output produced by the function is inserted in the output of\n     [fprintf] at the current point.\n   - [t]: same as [%a], but take only one argument (with type\n     [out_channel -> unit]) and apply it to [outchan].\n   - [\\{ fmt %\\}]: convert a format string argument to its type digest.\n     The argument must have the same type as the internal format string\n     [fmt].\n   - [( fmt %)]: format string substitution. Take a format string\n     argument and substitute it to the internal format string [fmt]\n     to print following arguments. The argument must have the same\n     type as the internal format string [fmt].\n   - [!]: take no argument and flush the output.\n   - [%]: take no argument and output one [%] character.\n   - [\\@]: take no argument and output one [\\@] character.\n   - [,]: take no argument and output nothing: a no-op delimiter for\n     conversion specifications.\n\n   The optional [flags] are:\n   - [-]: left-justify the output (default is right justification).\n   - [0]: for numerical conversions, pad with zeroes instead of spaces.\n   - [+]: for signed numerical conversions, prefix number with a [+]\n     sign if positive.\n   - space: for signed numerical conversions, prefix number with a\n     space if positive.\n   - [#]: request an alternate formatting style for the integer types\n     ([x], [X], [o], [lx], [lX], [lo], [Lx], [LX], [Lo], [d], [i], [u],\n     [ld], [li], [lu], [Ld], [Li], [Lu], [nd], [ni], [nu]).\n\n   The optional [width] is an integer indicating the minimal\n   width of the result. For instance, [%6d] prints an integer,\n   prefixing it with spaces to fill at least 6 characters.\n\n   The optional [precision] is a dot [.] followed by an integer\n   indicating how many digits follow the decimal point in the [%f],\n   [%e], and [%E] conversions. For instance, [%.4f] prints a [float] with\n   4 fractional digits.\n\n   The integer in a [width] or [precision] can also be specified as\n   [*], in which case an extra integer argument is taken to specify\n   the corresponding [width] or [precision]. This integer argument\n   precedes immediately the argument to print.\n   For instance, [%.*f] prints a [float] with as many fractional\n   digits as the value of the argument given before the float. "]
    
    
    val printf :
    ('a, out_channel, unit) format -> 'a[@@ocaml.doc
                                          " Same as {!Printf.fprintf}, but output on [stdout]. "]
    
    
    val eprintf :
    ('a, out_channel, unit) format -> 'a[@@ocaml.doc
                                          " Same as {!Printf.fprintf}, but output on [stderr]. "]
    
    
    val sprintf :
    ('a, unit, string) format -> 'a[@@ocaml.doc
                                     " Same as {!Printf.fprintf}, but instead of printing on an output channel,\n   return a string containing the result of formatting the arguments. "]
    
    
    val bprintf :
    Buffer.t -> ('a, Buffer.t, unit) format -> 'a[@@ocaml.doc
                                                   " Same as {!Printf.fprintf}, but instead of printing on an output channel,\n   append the formatted arguments to the given extensible buffer\n   (see module {!Buffer}). "]
    
    
    val ifprintf :
    'b -> ('a, 'b, 'c, unit) format4 -> 'a[@@ocaml.doc
                                            " Same as {!Printf.fprintf}, but does not print anything.\n    Useful to ignore some material when conditionally printing.\n    @since 3.10.0\n"]
    
    
    [@@@ocaml.text " Formatted output functions with continuations. "]
    
    val kfprintf :
    (out_channel -> 'd) ->
      out_channel -> ('a, out_channel, unit, 'd) format4 -> 'a[@@ocaml.doc
                                                                " Same as [fprintf], but instead of returning immediately,\n   passes the out channel to its first argument at the end of printing.\n   @since 3.09.0\n"]
    
    
    val ikfprintf :
    ('b -> 'd) -> 'b -> ('a, 'b, 'c, 'd) format4 -> 'a[@@ocaml.doc
                                                        " Same as [kfprintf] above, but does not print anything.\n   Useful to ignore some material when conditionally printing.\n   @since 4.01.0\n"]
    
    
    val ksprintf :
    (string -> 'd) -> ('a, unit, string, 'd) format4 -> 'a[@@ocaml.doc
                                                            " Same as [sprintf] above, but instead of returning the string,\n   passes it to the first argument.\n   @since 3.09.0\n"]
    
    
    val kbprintf :
    (Buffer.t -> 'd) -> Buffer.t -> ('a, Buffer.t, unit, 'd) format4 -> 'a
    [@@ocaml.doc
      " Same as [bprintf], but instead of returning immediately,\n   passes the buffer to its first argument at the end of printing.\n   @since 3.10.0\n"]
    
    
    [@@@ocaml.text " Deprecated "]
    
    val kprintf :
    (string -> 'b) -> ('a, unit, string, 'b) format4 -> 'a[@@ocaml.doc
                                                            " A deprecated synonym for [ksprintf]. "]
    


*** OK ***

