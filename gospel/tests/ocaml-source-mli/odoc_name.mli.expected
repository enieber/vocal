
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.text " Representation of element names. "]
type t = string
val parens_if_infix : t -> t[@@ocaml.doc
                              " Add parenthesis to the given simple name if needed. "]
val simple : t -> t[@@ocaml.doc " Return a simple name from a name."]
val father : t -> t[@@ocaml.doc
                     " Return the name of the 'father' (like dirname for a file name)."]
val concat : t -> t -> t[@@ocaml.doc " Concatenates two names. "]
val normalize_name : t -> t[@@ocaml.doc
                             " Normalize the given name by removing the beginning and ending spaces\n     of the simple name and adding parenthesis if needed. "]
val head : t -> t[@@ocaml.doc " Returns the head of a name. "]
val depth : t -> int[@@ocaml.doc
                      " Returns the depth of the name, i.e. the number of levels to the root.\n   Example : [Toto.Tutu.name] has depth 3. "]
val prefix : t -> t -> bool[@@ocaml.doc
                             " Returns true if the first name is a prefix of the second name.\n   If the two names are equal, then it is false (strict prefix)."]
val alias_unprefix : t -> t -> t[@@ocaml.doc
                                  " remove a [Library__] prefix and capitalize the resulting name "]
val get_relative : t -> t -> t[@@ocaml.doc
                                " Take two names n1 and n2 = n3.n4 and return n4 if n3=n1 or else n2. "]
val get_relative_opt : t -> t -> t[@@ocaml.doc
                                    " [get_relative_opt n1 n2] is [n2] if [n1=\"\"] and\n    [get_relative n1 n2] otherwise "]
val get_relative_raw : t -> t -> t[@@ocaml.doc
                                    " Take two names n1=n3.n4 and n2 = n5.n6 and return n6 if n3=n5 or else n2. "]
val hide_given_modules : t list -> t -> t[@@ocaml.doc
                                           " Take a list of module names to hide and a name,\n   and return the name when the module name (or part of it)\n   was removed, according to the list of module names to hide."]
val qualified : t -> bool[@@ocaml.doc
                           " Indicate if a name if qualified or not. "]
val from_ident : Ident.t -> t[@@ocaml.doc " Get a name from an [Ident.t]. "]
val from_path : Path.t -> t[@@ocaml.doc " Get a name from a [Path.t]. "]
val to_path : t -> Path.t[@@ocaml.doc " Get a [Path.t] from a name."]
val from_longident : Longident.t -> t[@@ocaml.doc
                                       " Get a name from a [Longident.t]."]
module Map : Map.S with type  key =  t

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.text " Representation of element names. "]

type t = string
  

val parens_if_infix : t -> t[@@ocaml.doc
                              " Add parenthesis to the given simple name if needed. "]


val simple : t -> t[@@ocaml.doc " Return a simple name from a name."]


val father : t -> t[@@ocaml.doc
                     " Return the name of the 'father' (like dirname for a file name)."]


val concat : t -> t -> t[@@ocaml.doc " Concatenates two names. "]


val normalize_name : t -> t[@@ocaml.doc
                             " Normalize the given name by removing the beginning and ending spaces\n     of the simple name and adding parenthesis if needed. "]


val head : t -> t[@@ocaml.doc " Returns the head of a name. "]


val depth : t -> int[@@ocaml.doc
                      " Returns the depth of the name, i.e. the number of levels to the root.\n   Example : [Toto.Tutu.name] has depth 3. "]


val prefix : t -> t -> bool[@@ocaml.doc
                             " Returns true if the first name is a prefix of the second name.\n   If the two names are equal, then it is false (strict prefix)."]


val alias_unprefix : t -> t -> t[@@ocaml.doc
                                  " remove a [Library__] prefix and capitalize the resulting name "]


val get_relative : t -> t -> t[@@ocaml.doc
                                " Take two names n1 and n2 = n3.n4 and return n4 if n3=n1 or else n2. "]


val get_relative_opt : t -> t -> t[@@ocaml.doc
                                    " [get_relative_opt n1 n2] is [n2] if [n1=\"\"] and\n    [get_relative n1 n2] otherwise "]


val get_relative_raw : t -> t -> t[@@ocaml.doc
                                    " Take two names n1=n3.n4 and n2 = n5.n6 and return n6 if n3=n5 or else n2. "]


val hide_given_modules : t list -> t -> t[@@ocaml.doc
                                           " Take a list of module names to hide and a name,\n   and return the name when the module name (or part of it)\n   was removed, according to the list of module names to hide."]


val qualified : t -> bool[@@ocaml.doc
                           " Indicate if a name if qualified or not. "]


val from_ident : Ident.t -> t[@@ocaml.doc " Get a name from an [Ident.t]. "]


val from_path : Path.t -> t[@@ocaml.doc " Get a name from a [Path.t]. "]


val to_path : t -> Path.t[@@ocaml.doc " Get a [Path.t] from a name."]


val from_longident : Longident.t -> t[@@ocaml.doc
                                       " Get a name from a [Longident.t]."]


module Map : Map.S with type  key =  t
File "odoc_name.mli", line 82, characters 13-18:
Error: Symbol Map.S not found
