
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.text
  " Locks for mutual exclusion.\n\n   Mutexes (mutual-exclusion locks) are used to implement critical sections\n   and protect shared mutable data structures against concurrent accesses.\n   The typical use is (if [m] is the mutex associated with the data structure\n   [D]):\n   {[\n     Mutex.lock m;\n     (* Critical section that operates over D *);\n     Mutex.unlock m\n   ]}\n"]
type t[@@ocaml.doc " The type of mutexes. "]
val create : unit -> t[@@ocaml.doc " Return a new mutex. "]
val lock : t -> unit[@@ocaml.doc
                      " Lock the given mutex. Only one thread can have the mutex locked\n   at any time. A thread that attempts to lock a mutex already locked\n   by another thread will suspend until the other thread unlocks\n   the mutex. "]
val try_lock : t -> bool[@@ocaml.doc
                          " Same as {!Mutex.lock}, but does not suspend the calling thread if\n   the mutex is already locked: just return [false] immediately\n   in that case. If the mutex is unlocked, lock it and\n   return [true]. "]
val unlock : t -> unit[@@ocaml.doc
                        " Unlock the given mutex. Other threads suspended trying to lock\n   the mutex will restart. "]

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.text
  " Locks for mutual exclusion.\n\n   Mutexes (mutual-exclusion locks) are used to implement critical sections\n   and protect shared mutable data structures against concurrent accesses.\n   The typical use is (if [m] is the mutex associated with the data structure\n   [D]):\n   {[\n     Mutex.lock m;\n     (* Critical section that operates over D *);\n     Mutex.unlock m\n   ]}\n"]

type t[@@ocaml.doc " The type of mutexes. "]
  

val create : unit -> t[@@ocaml.doc " Return a new mutex. "]


val lock : t -> unit[@@ocaml.doc
                      " Lock the given mutex. Only one thread can have the mutex locked\n   at any time. A thread that attempts to lock a mutex already locked\n   by another thread will suspend until the other thread unlocks\n   the mutex. "]


val try_lock : t -> bool[@@ocaml.doc
                          " Same as {!Mutex.lock}, but does not suspend the calling thread if\n   the mutex is already locked: just return [false] immediately\n   in that case. If the mutex is unlocked, lock it and\n   return [true]. "]


val unlock : t -> unit[@@ocaml.doc
                        " Unlock the given mutex. Other threads suspended trying to lock\n   the mutex will restart. "]


*******************************
********* Typed GOSPEL ********
*******************************
module mutex.mli

  Namespace: mutex.mli
    Type symbols
       t
      
    Logic Symbols
      
    Exception Symbols
      
    Namespaces
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    [@@@ocaml.text
      " Locks for mutual exclusion.\n\n   Mutexes (mutual-exclusion locks) are used to implement critical sections\n   and protect shared mutable data structures against concurrent accesses.\n   The typical use is (if [m] is the mutex associated with the data structure\n   [D]):\n   {[\n     Mutex.lock m;\n     (* Critical section that operates over D *);\n     Mutex.unlock m\n   ]}\n"]
    
    type t
    
    
    val create : unit -> t[@@ocaml.doc " Return a new mutex. "]
    
    
    val lock :
    t -> unit[@@ocaml.doc
               " Lock the given mutex. Only one thread can have the mutex locked\n   at any time. A thread that attempts to lock a mutex already locked\n   by another thread will suspend until the other thread unlocks\n   the mutex. "]
    
    
    val try_lock :
    t -> bool[@@ocaml.doc
               " Same as {!Mutex.lock}, but does not suspend the calling thread if\n   the mutex is already locked: just return [false] immediately\n   in that case. If the mutex is unlocked, lock it and\n   return [true]. "]
    
    
    val unlock :
    t -> unit[@@ocaml.doc
               " Unlock the given mutex. Other threads suspended trying to lock\n   the mutex will restart. "]
    


*** OK ***

