
*******************************
********** Parsed file ********
*******************************
open Types
open Misc.Stdlib
type summary =
  | Env_empty 
  | Env_value of summary * Ident.t * value_description 
  | Env_type of summary * Ident.t * type_declaration 
  | Env_extension of summary * Ident.t * extension_constructor 
  | Env_module of summary * Ident.t * module_declaration 
  | Env_modtype of summary * Ident.t * modtype_declaration 
  | Env_class of summary * Ident.t * class_declaration 
  | Env_cltype of summary * Ident.t * class_type_declaration 
  | Env_open of summary * String.Set.t * Path.t
  [@ocaml.doc
    " The string set argument of [Env_open] represents a list of module names\n      to skip, i.e. that won't be imported in the toplevel namespace. "]
  | Env_functor_arg of summary * Ident.t 
  | Env_constraints of summary * type_declaration Path.Map.t 
  | Env_copy_types of summary * string list 
type t
val empty : t
val initial_safe_string : t
val initial_unsafe_string : t
val diff : t -> t -> Ident.t list
val copy_local : from:t -> t -> t
type type_descriptions =
  (constructor_description list * label_description list)
type iter_cont
val iter_types :
  (Path.t -> (Path.t * (type_declaration * type_descriptions)) -> unit) ->
    t -> iter_cont
val run_iter_cont : iter_cont list -> (Path.t * iter_cont) list
val same_types : t -> t -> bool
val used_persistent : unit -> Concr.t
val find_shadowed_types : Path.t -> t -> Path.t list
val without_cmis : ('a -> 'b) -> 'a -> 'b
val find_value : Path.t -> t -> value_description
val find_type : Path.t -> t -> type_declaration
val find_type_descrs : Path.t -> t -> type_descriptions
val find_module : Path.t -> t -> module_declaration
val find_modtype : Path.t -> t -> modtype_declaration
val find_class : Path.t -> t -> class_declaration
val find_cltype : Path.t -> t -> class_type_declaration
val find_type_expansion :
  Path.t -> t -> (type_expr list * type_expr * int option)
val find_type_expansion_opt :
  Path.t -> t -> (type_expr list * type_expr * int option)
val find_modtype_expansion : Path.t -> t -> module_type
val add_functor_arg : Ident.t -> t -> t
val is_functor_arg : Path.t -> t -> bool
val normalize_path : Location.t option -> t -> Path.t -> Path.t
val normalize_path_prefix : Location.t option -> t -> Path.t -> Path.t
val reset_required_globals : unit -> unit
val get_required_globals : unit -> Ident.t list
val add_required_global : Ident.t -> unit
val has_local_constraints : t -> bool
val lookup_value :
  ?loc:Location.t ->
    ?mark:bool -> Longident.t -> t -> (Path.t * value_description)
val lookup_constructor :
  ?loc:Location.t ->
    ?mark:bool -> Longident.t -> t -> constructor_description
val lookup_all_constructors :
  ?loc:Location.t ->
    ?mark:bool ->
      Longident.t -> t -> (constructor_description * (unit -> unit)) list
val lookup_label :
  ?loc:Location.t -> ?mark:bool -> Longident.t -> t -> label_description
val lookup_all_labels :
  ?loc:Location.t ->
    ?mark:bool ->
      Longident.t -> t -> (label_description * (unit -> unit)) list
val lookup_type : ?loc:Location.t -> ?mark:bool -> Longident.t -> t -> Path.t
val lookup_module :
  load:bool -> ?loc:Location.t -> ?mark:bool -> Longident.t -> t -> Path.t
val lookup_modtype :
  ?loc:Location.t ->
    ?mark:bool -> Longident.t -> t -> (Path.t * modtype_declaration)
val lookup_class :
  ?loc:Location.t ->
    ?mark:bool -> Longident.t -> t -> (Path.t * class_declaration)
val lookup_cltype :
  ?loc:Location.t ->
    ?mark:bool -> Longident.t -> t -> (Path.t * class_type_declaration)
type copy_of_types
val make_copy_of_types : string list -> t -> copy_of_types
val do_copy_types : copy_of_types -> t -> t[@@ocaml.doc
                                             " [do_copy_types copy env] will raise a fatal error if the values in\n    [env] are different from the env passed to [make_copy_of_types]. "]
exception Recmodule 
val add_value :
  ?check:(string -> Warnings.t) -> Ident.t -> value_description -> t -> t
val add_type : check:bool -> Ident.t -> type_declaration -> t -> t
val add_extension : check:bool -> Ident.t -> extension_constructor -> t -> t
val add_module : ?arg:bool -> Ident.t -> module_type -> t -> t
val add_module_declaration :
  ?arg:bool -> check:bool -> Ident.t -> module_declaration -> t -> t
val add_modtype : Ident.t -> modtype_declaration -> t -> t
val add_class : Ident.t -> class_declaration -> t -> t
val add_cltype : Ident.t -> class_type_declaration -> t -> t
val add_local_type : Path.t -> type_declaration -> t -> t
val add_item : signature_item -> t -> t
val add_signature : signature -> t -> t
val open_signature :
  ?used_slot:bool ref ->
    ?loc:Location.t ->
      ?toplevel:bool -> Asttypes.override_flag -> Path.t -> t -> t option
val open_signature_of_initially_opened_module : Path.t -> t -> t option
val open_signature_from_env_summary :
  Path.t -> t -> hidden_submodules:String.Set.t -> t option
val open_pers_signature : string -> t -> t
val enter_value :
  ?check:(string -> Warnings.t) ->
    string -> value_description -> t -> (Ident.t * t)
val enter_type : string -> type_declaration -> t -> (Ident.t * t)
val enter_extension : string -> extension_constructor -> t -> (Ident.t * t)
val enter_module : ?arg:bool -> string -> module_type -> t -> (Ident.t * t)
val enter_module_declaration :
  ?arg:bool -> Ident.t -> module_declaration -> t -> t
val enter_modtype : string -> modtype_declaration -> t -> (Ident.t * t)
val enter_class : string -> class_declaration -> t -> (Ident.t * t)
val enter_cltype : string -> class_type_declaration -> t -> (Ident.t * t)
val reset_cache : unit -> unit
val reset_cache_toplevel : unit -> unit
val set_unit_name : string -> unit
val get_unit_name : unit -> string
val read_signature : string -> string -> signature
val save_signature :
  deprecated:string option ->
    signature -> string -> string -> Cmi_format.cmi_infos
val save_signature_with_imports :
  deprecated:string option ->
    signature ->
      string ->
        string -> (string * Digest.t option) list -> Cmi_format.cmi_infos
val crc_of_unit : string -> Digest.t
val imports : unit -> (string * Digest.t option) list
val is_imported_opaque : string -> bool
val crc_units : Consistbl.t
val add_import : string -> unit
val summary : t -> summary
val keep_only_summary : t -> t
val env_of_only_summary : (summary -> Subst.t -> t) -> t -> t
type error =
  | Illegal_renaming of string * string * string 
  | Inconsistent_import of string * string * string 
  | Need_recursive_types of string * string 
  | Depend_on_unsafe_string_unit of string * string 
  | Missing_module of Location.t * Path.t * Path.t 
  | Illegal_value_name of Location.t * string 
exception Error of error 
open Format
val report_error : formatter -> error -> unit
val mark_value_used : string -> value_description -> unit
val mark_module_used : string -> Location.t -> unit
val mark_type_used : string -> type_declaration -> unit
type constructor_usage =
  | Positive 
  | Pattern 
  | Privatize 
val mark_constructor_used :
  constructor_usage -> string -> type_declaration -> string -> unit
val mark_constructor :
  constructor_usage -> t -> string -> constructor_description -> unit
val mark_extension_used :
  constructor_usage -> extension_constructor -> string -> unit
val in_signature : bool -> t -> t
val is_in_signature : t -> bool
val set_value_used_callback :
  string -> value_description -> (unit -> unit) -> unit
val set_type_used_callback :
  string -> type_declaration -> ((unit -> unit) -> unit) -> unit
val check_modtype_inclusion :
  (loc:Location.t -> t -> module_type -> Path.t -> module_type -> unit) ref
val check_well_formed_module :
  (t -> Location.t -> string -> module_type -> unit) ref
val add_delayed_check_forward : ((unit -> unit) -> unit) ref
val strengthen :
  (aliasable:bool -> t -> module_type -> Path.t -> module_type) ref
val same_constr : (t -> type_expr -> type_expr -> bool) ref
[@@@ocaml.text " Folding over all identifiers (for analysis purpose) "]
val fold_values :
  (string -> Path.t -> value_description -> 'a -> 'a) ->
    Longident.t option -> t -> 'a -> 'a
val fold_types :
  (string -> Path.t -> (type_declaration * type_descriptions) -> 'a -> 'a) ->
    Longident.t option -> t -> 'a -> 'a
val fold_constructors :
  (constructor_description -> 'a -> 'a) ->
    Longident.t option -> t -> 'a -> 'a
val fold_labels :
  (label_description -> 'a -> 'a) -> Longident.t option -> t -> 'a -> 'a
val fold_modules :
  (string -> Path.t -> module_declaration -> 'a -> 'a) ->
    Longident.t option -> t -> 'a -> 'a[@@ocaml.doc
                                         " Persistent structures are only traversed if they are already loaded. "]
val fold_modtypes :
  (string -> Path.t -> modtype_declaration -> 'a -> 'a) ->
    Longident.t option -> t -> 'a -> 'a
val fold_classs :
  (string -> Path.t -> class_declaration -> 'a -> 'a) ->
    Longident.t option -> t -> 'a -> 'a
val fold_cltypes :
  (string -> Path.t -> class_type_declaration -> 'a -> 'a) ->
    Longident.t option -> t -> 'a -> 'a
val scrape_alias : t -> module_type -> module_type[@@ocaml.doc " Utilities "]
val check_value_name : string -> Location.t -> unit
module Persistent_signature :
sig
  type t =
    {
    filename: string
      [@ocaml.doc " Name of the file containing the signature. "];
    cmi: Cmi_format.cmi_infos }
  val load : (unit_name:string -> t option) ref[@@ocaml.doc
                                                 " Function used to load a persistent signature. The default is to look for\n      the .cmi file in the load path. This function can be overridden to load\n      it from memory, for instance to build a self-contained toplevel. "]
end

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

open Types

open Misc.Stdlib

type summary =
| Env_empty 
| Env_value of summary * Ident.t * value_description 
| Env_type of summary * Ident.t * type_declaration 
| Env_extension of summary * Ident.t * extension_constructor 
| Env_module of summary * Ident.t * module_declaration 
| Env_modtype of summary * Ident.t * modtype_declaration 
| Env_class of summary * Ident.t * class_declaration 
| Env_cltype of summary * Ident.t * class_type_declaration 
| Env_open of summary * String.Set.t * Path.t
[@ocaml.doc
  " The string set argument of [Env_open] represents a list of module names\n      to skip, i.e. that won't be imported in the toplevel namespace. "]
| Env_functor_arg of summary * Ident.t 
| Env_constraints of summary * type_declaration Path.Map.t 
| Env_copy_types of summary * string list 
  

type t
  

val empty : t


val initial_safe_string : t


val initial_unsafe_string : t


val diff : t -> t -> Ident.t list


val copy_local : from:t -> t -> t


type type_descriptions =
(constructor_description list * label_description list)
  

type iter_cont
  

val iter_types :
  (Path.t -> (Path.t * (type_declaration * type_descriptions)) -> unit) ->
    t -> iter_cont


val run_iter_cont : iter_cont list -> (Path.t * iter_cont) list


val same_types : t -> t -> bool


val used_persistent : unit -> Concr.t


val find_shadowed_types : Path.t -> t -> Path.t list


val without_cmis : ('a -> 'b) -> 'a -> 'b


val find_value : Path.t -> t -> value_description


val find_type : Path.t -> t -> type_declaration


val find_type_descrs : Path.t -> t -> type_descriptions


val find_module : Path.t -> t -> module_declaration


val find_modtype : Path.t -> t -> modtype_declaration


val find_class : Path.t -> t -> class_declaration


val find_cltype : Path.t -> t -> class_type_declaration


val find_type_expansion :
  Path.t -> t -> (type_expr list * type_expr * int option)


val find_type_expansion_opt :
  Path.t -> t -> (type_expr list * type_expr * int option)


val find_modtype_expansion : Path.t -> t -> module_type


val add_functor_arg : Ident.t -> t -> t


val is_functor_arg : Path.t -> t -> bool


val normalize_path : Location.t option -> t -> Path.t -> Path.t


val normalize_path_prefix : Location.t option -> t -> Path.t -> Path.t


val reset_required_globals : unit -> unit


val get_required_globals : unit -> Ident.t list


val add_required_global : Ident.t -> unit


val has_local_constraints : t -> bool


val lookup_value :
  ?loc:Location.t ->
    ?mark:bool -> Longident.t -> t -> (Path.t * value_description)


val lookup_constructor :
  ?loc:Location.t ->
    ?mark:bool -> Longident.t -> t -> constructor_description


val lookup_all_constructors :
  ?loc:Location.t ->
    ?mark:bool ->
      Longident.t -> t -> (constructor_description * (unit -> unit)) list


val lookup_label :
  ?loc:Location.t -> ?mark:bool -> Longident.t -> t -> label_description


val lookup_all_labels :
  ?loc:Location.t ->
    ?mark:bool ->
      Longident.t -> t -> (label_description * (unit -> unit)) list


val lookup_type : ?loc:Location.t -> ?mark:bool -> Longident.t -> t -> Path.t


val lookup_module :
  load:bool -> ?loc:Location.t -> ?mark:bool -> Longident.t -> t -> Path.t


val lookup_modtype :
  ?loc:Location.t ->
    ?mark:bool -> Longident.t -> t -> (Path.t * modtype_declaration)


val lookup_class :
  ?loc:Location.t ->
    ?mark:bool -> Longident.t -> t -> (Path.t * class_declaration)


val lookup_cltype :
  ?loc:Location.t ->
    ?mark:bool -> Longident.t -> t -> (Path.t * class_type_declaration)


type copy_of_types
  

val make_copy_of_types : string list -> t -> copy_of_types


val do_copy_types : copy_of_types -> t -> t[@@ocaml.doc
                                             " [do_copy_types copy env] will raise a fatal error if the values in\n    [env] are different from the env passed to [make_copy_of_types]. "]


exception Recmodule 

val add_value :
  ?check:(string -> Warnings.t) -> Ident.t -> value_description -> t -> t


val add_type : check:bool -> Ident.t -> type_declaration -> t -> t


val add_extension : check:bool -> Ident.t -> extension_constructor -> t -> t


val add_module : ?arg:bool -> Ident.t -> module_type -> t -> t


val add_module_declaration :
  ?arg:bool -> check:bool -> Ident.t -> module_declaration -> t -> t


val add_modtype : Ident.t -> modtype_declaration -> t -> t


val add_class : Ident.t -> class_declaration -> t -> t


val add_cltype : Ident.t -> class_type_declaration -> t -> t


val add_local_type : Path.t -> type_declaration -> t -> t


val add_item : signature_item -> t -> t


val add_signature : signature -> t -> t


val open_signature :
  ?used_slot:bool ref ->
    ?loc:Location.t ->
      ?toplevel:bool -> Asttypes.override_flag -> Path.t -> t -> t option


val open_signature_of_initially_opened_module : Path.t -> t -> t option


val open_signature_from_env_summary :
  Path.t -> t -> hidden_submodules:String.Set.t -> t option


val open_pers_signature : string -> t -> t


val enter_value :
  ?check:(string -> Warnings.t) ->
    string -> value_description -> t -> (Ident.t * t)


val enter_type : string -> type_declaration -> t -> (Ident.t * t)


val enter_extension : string -> extension_constructor -> t -> (Ident.t * t)


val enter_module : ?arg:bool -> string -> module_type -> t -> (Ident.t * t)


val enter_module_declaration :
  ?arg:bool -> Ident.t -> module_declaration -> t -> t


val enter_modtype : string -> modtype_declaration -> t -> (Ident.t * t)


val enter_class : string -> class_declaration -> t -> (Ident.t * t)


val enter_cltype : string -> class_type_declaration -> t -> (Ident.t * t)


val reset_cache : unit -> unit


val reset_cache_toplevel : unit -> unit


val set_unit_name : string -> unit


val get_unit_name : unit -> string


val read_signature : string -> string -> signature


val save_signature :
  deprecated:string option ->
    signature -> string -> string -> Cmi_format.cmi_infos


val save_signature_with_imports :
  deprecated:string option ->
    signature ->
      string ->
        string -> (string * Digest.t option) list -> Cmi_format.cmi_infos


val crc_of_unit : string -> Digest.t


val imports : unit -> (string * Digest.t option) list


val is_imported_opaque : string -> bool


val crc_units : Consistbl.t


val add_import : string -> unit


val summary : t -> summary


val keep_only_summary : t -> t


val env_of_only_summary : (summary -> Subst.t -> t) -> t -> t


type error =
| Illegal_renaming of string * string * string 
| Inconsistent_import of string * string * string 
| Need_recursive_types of string * string 
| Depend_on_unsafe_string_unit of string * string 
| Missing_module of Location.t * Path.t * Path.t 
| Illegal_value_name of Location.t * string 
  

exception Error of error 

open Format

val report_error : formatter -> error -> unit


val mark_value_used : string -> value_description -> unit


val mark_module_used : string -> Location.t -> unit


val mark_type_used : string -> type_declaration -> unit


type constructor_usage =
| Positive 
| Pattern 
| Privatize 
  

val mark_constructor_used :
  constructor_usage -> string -> type_declaration -> string -> unit


val mark_constructor :
  constructor_usage -> t -> string -> constructor_description -> unit


val mark_extension_used :
  constructor_usage -> extension_constructor -> string -> unit


val in_signature : bool -> t -> t


val is_in_signature : t -> bool


val set_value_used_callback :
  string -> value_description -> (unit -> unit) -> unit


val set_type_used_callback :
  string -> type_declaration -> ((unit -> unit) -> unit) -> unit


val check_modtype_inclusion :
  (loc:Location.t -> t -> module_type -> Path.t -> module_type -> unit) ref


val check_well_formed_module :
  (t -> Location.t -> string -> module_type -> unit) ref


val add_delayed_check_forward : ((unit -> unit) -> unit) ref


val strengthen :
  (aliasable:bool -> t -> module_type -> Path.t -> module_type) ref


val same_constr : (t -> type_expr -> type_expr -> bool) ref


[@@@ocaml.text " Folding over all identifiers (for analysis purpose) "]

val fold_values :
  (string -> Path.t -> value_description -> 'a -> 'a) ->
    Longident.t option -> t -> 'a -> 'a


val fold_types :
  (string -> Path.t -> (type_declaration * type_descriptions) -> 'a -> 'a) ->
    Longident.t option -> t -> 'a -> 'a


val fold_constructors :
  (constructor_description -> 'a -> 'a) ->
    Longident.t option -> t -> 'a -> 'a


val fold_labels :
  (label_description -> 'a -> 'a) -> Longident.t option -> t -> 'a -> 'a


val fold_modules :
  (string -> Path.t -> module_declaration -> 'a -> 'a) ->
    Longident.t option -> t -> 'a -> 'a[@@ocaml.doc
                                         " Persistent structures are only traversed if they are already loaded. "]


val fold_modtypes :
  (string -> Path.t -> modtype_declaration -> 'a -> 'a) ->
    Longident.t option -> t -> 'a -> 'a


val fold_classs :
  (string -> Path.t -> class_declaration -> 'a -> 'a) ->
    Longident.t option -> t -> 'a -> 'a


val fold_cltypes :
  (string -> Path.t -> class_type_declaration -> 'a -> 'a) ->
    Longident.t option -> t -> 'a -> 'a


val scrape_alias : t -> module_type -> module_type[@@ocaml.doc " Utilities "]


val check_value_name : string -> Location.t -> unit


module Persistent_signature :
sig
  type t =
  {
  filename: string
    [@ocaml.doc " Name of the file containing the signature. "];
  cmi: Cmi_format.cmi_infos }
    
  val load : (unit_name:string -> t option) ref[@@ocaml.doc
                                                 " Function used to load a persistent signature. The default is to look for\n      the .cmi file in the load path. This function can be overridden to load\n      it from memory, for instance to build a self-contained toplevel. "]
  
end
File "./asttypes.mli", line 28, characters 19-24:
Error: Symbol int32 not found
