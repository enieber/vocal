
*******************************
********** Parsed file ********
*******************************
val ocamlrun_ocamlc : string -> string
val ocamlrun_ocamlopt : string -> string
val ocamlrun_ocaml : string -> string
val ocamlrun_expect_test : string -> string
val ocamlrun_ocamllex : string -> string
val ocamlrun_ocamldoc : string -> string
val ocamlrun_ocamldebug : string -> string
val ocamlrun_ocamlobjinfo : string -> string
val ocamlrun_ocamlmklib : string -> string
val ocamlrun_codegen : string -> string

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

val ocamlrun_ocamlc : string -> string


val ocamlrun_ocamlopt : string -> string


val ocamlrun_ocaml : string -> string


val ocamlrun_expect_test : string -> string


val ocamlrun_ocamllex : string -> string


val ocamlrun_ocamldoc : string -> string


val ocamlrun_ocamldebug : string -> string


val ocamlrun_ocamlobjinfo : string -> string


val ocamlrun_ocamlmklib : string -> string


val ocamlrun_codegen : string -> string


*******************************
********* Typed GOSPEL ********
*******************************
module ocaml_commands.mli

  Namespace: ocaml_commands.mli
    Type symbols
      
    Logic Symbols
      
    Exception Symbols
      
    Namespaces
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    val ocamlrun_ocamlc : string -> string
    
    
    val ocamlrun_ocamlopt : string -> string
    
    
    val ocamlrun_ocaml : string -> string
    
    
    val ocamlrun_expect_test : string -> string
    
    
    val ocamlrun_ocamllex : string -> string
    
    
    val ocamlrun_ocamldoc : string -> string
    
    
    val ocamlrun_ocamldebug : string -> string
    
    
    val ocamlrun_ocamlobjinfo : string -> string
    
    
    val ocamlrun_ocamlmklib : string -> string
    
    
    val ocamlrun_codegen : string -> string
    


*** OK ***

