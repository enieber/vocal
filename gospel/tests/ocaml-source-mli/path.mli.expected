
*******************************
********** Parsed file ********
*******************************
type t =
  | Pident of Ident.t 
  | Pdot of t * string * int 
  | Papply of t * t 
val same : t -> t -> bool
val compare : t -> t -> int
val find_free_opt : Ident.t list -> t -> Ident.t option
val exists_free : Ident.t list -> t -> bool
val binding_time : t -> int
val flatten : t -> [ `Contains_apply  | `Ok of (Ident.t * string list) ]
val nopos : int
val name : ?paren:(string -> bool) -> t -> string
val head : t -> Ident.t
val heads : t -> Ident.t list
val last : t -> string
type typath =
  | Regular of t 
  | Ext of t * string 
  | LocalExt of Ident.t 
  | Cstr of t * string 
val constructor_typath : t -> typath
val is_constructor_typath : t -> bool
module Map : Map.S with type  key =  t
module Set : Set.S with type  elt =  t

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

type t =
| Pident of Ident.t 
| Pdot of t * string * int 
| Papply of t * t 
  

val same : t -> t -> bool


val compare : t -> t -> int


val find_free_opt : Ident.t list -> t -> Ident.t option


val exists_free : Ident.t list -> t -> bool


val binding_time : t -> int


val flatten : t -> [ `Contains_apply  | `Ok of (Ident.t * string list) ]


val nopos : int


val name : ?paren:(string -> bool) -> t -> string


val head : t -> Ident.t


val heads : t -> Ident.t list


val last : t -> string


type typath =
| Regular of t 
| Ext of t * string 
| LocalExt of Ident.t 
| Cstr of t * string 
  

val constructor_typath : t -> typath


val is_constructor_typath : t -> bool


module Map : Map.S with type  key =  t

module Set : Set.S with type  elt =  t
File "path.mli", line 49, characters 13-18:
Error: Symbol Map.S not found
