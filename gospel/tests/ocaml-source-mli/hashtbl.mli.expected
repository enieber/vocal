
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.text
  " Hash tables and hash functions.\n\n   Hash tables are hashed association tables, with in-place modification.\n"]
[@@@ocaml.text " {1 Generic interface} "]
type ('a, 'b) t[@@ocaml.doc
                 " The type of hash tables from type ['a] to type ['b]. "]
val create : ?random:bool -> int -> ('a, 'b) t[@@ocaml.doc
                                                " [Hashtbl.create n] creates a new, empty hash table, with\n   initial size [n].  For best results, [n] should be on the\n   order of the expected number of elements that will be in\n   the table.  The table grows as needed, so [n] is just an\n   initial guess.\n\n   The optional [random] parameter (a boolean) controls whether\n   the internal organization of the hash table is randomized at each\n   execution of [Hashtbl.create] or deterministic over all executions.\n\n   A hash table that is created with [~random:false] uses a\n   fixed hash function ({!Hashtbl.hash}) to distribute keys among\n   buckets.  As a consequence, collisions between keys happen\n   deterministically.  In Web-facing applications or other\n   security-sensitive applications, the deterministic collision\n   patterns can be exploited by a malicious user to create a\n   denial-of-service attack: the attacker sends input crafted to\n   create many collisions in the table, slowing the application down.\n\n   A hash table that is created with [~random:true] uses the seeded\n   hash function {!Hashtbl.seeded_hash} with a seed that is randomly\n   chosen at hash table creation time.  In effect, the hash function\n   used is randomly selected among [2^{30}] different hash functions.\n   All these hash functions have different collision patterns,\n   rendering ineffective the denial-of-service attack described above.\n   However, because of randomization, enumerating all elements of the\n   hash table using {!Hashtbl.fold} or {!Hashtbl.iter} is no longer\n   deterministic: elements are enumerated in different orders at\n   different runs of the program.\n\n   If no [~random] parameter is given, hash tables are created\n   in non-random mode by default.  This default can be changed\n   either programmatically by calling {!Hashtbl.randomize} or by\n   setting the [R] flag in the [OCAMLRUNPARAM] environment variable.\n\n   @before 4.00.0 the [random] parameter was not present and all\n   hash tables were created in non-randomized mode. "]
val clear : ('a, 'b) t -> unit[@@ocaml.doc
                                " Empty a hash table. Use [reset] instead of [clear] to shrink the\n    size of the bucket table to its initial size. "]
val reset : ('a, 'b) t -> unit[@@ocaml.doc
                                " Empty a hash table and shrink the size of the bucket table\n    to its initial size.\n    @since 4.00.0 "]
val copy : ('a, 'b) t -> ('a, 'b) t[@@ocaml.doc
                                     " Return a copy of the given hashtable. "]
val add : ('a, 'b) t -> 'a -> 'b -> unit[@@ocaml.doc
                                          " [Hashtbl.add tbl x y] adds a binding of [x] to [y] in table [tbl].\n   Previous bindings for [x] are not removed, but simply\n   hidden. That is, after performing {!Hashtbl.remove}[ tbl x],\n   the previous binding for [x], if any, is restored.\n   (Same behavior as with association lists.) "]
val find : ('a, 'b) t -> 'a -> 'b[@@ocaml.doc
                                   " [Hashtbl.find tbl x] returns the current binding of [x] in [tbl],\n   or raises [Not_found] if no such binding exists. "]
val find_opt : ('a, 'b) t -> 'a -> 'b option[@@ocaml.doc
                                              " [Hashtbl.find_opt tbl x] returns the current binding of [x] in [tbl],\n    or [None] if no such binding exists.\n    @since 4.05 "]
val find_all : ('a, 'b) t -> 'a -> 'b list[@@ocaml.doc
                                            " [Hashtbl.find_all tbl x] returns the list of all data\n   associated with [x] in [tbl].\n   The current binding is returned first, then the previous\n   bindings, in reverse order of introduction in the table. "]
val mem : ('a, 'b) t -> 'a -> bool[@@ocaml.doc
                                    " [Hashtbl.mem tbl x] checks if [x] is bound in [tbl]. "]
val remove : ('a, 'b) t -> 'a -> unit[@@ocaml.doc
                                       " [Hashtbl.remove tbl x] removes the current binding of [x] in [tbl],\n   restoring the previous binding if it exists.\n   It does nothing if [x] is not bound in [tbl]. "]
val replace : ('a, 'b) t -> 'a -> 'b -> unit[@@ocaml.doc
                                              " [Hashtbl.replace tbl x y] replaces the current binding of [x]\n   in [tbl] by a binding of [x] to [y].  If [x] is unbound in [tbl],\n   a binding of [x] to [y] is added to [tbl].\n   This is functionally equivalent to {!Hashtbl.remove}[ tbl x]\n   followed by {!Hashtbl.add}[ tbl x y]. "]
val iter : ('a -> 'b -> unit) -> ('a, 'b) t -> unit[@@ocaml.doc
                                                     " [Hashtbl.iter f tbl] applies [f] to all bindings in table [tbl].\n   [f] receives the key as first argument, and the associated value\n   as second argument. Each binding is presented exactly once to [f].\n\n   The order in which the bindings are passed to [f] is unspecified.\n   However, if the table contains several bindings for the same key,\n   they are passed to [f] in reverse order of introduction, that is,\n   the most recent binding is passed first.\n\n   If the hash table was created in non-randomized mode, the order\n   in which the bindings are enumerated is reproducible between\n   successive runs of the program, and even between minor versions\n   of OCaml.  For randomized hash tables, the order of enumeration\n   is entirely random.\n\n   The behavior is not defined if the hash table is modified\n   by [f] during the iteration.\n"]
val filter_map_inplace : ('a -> 'b -> 'b option) -> ('a, 'b) t -> unit
[@@ocaml.doc
  " [Hashtbl.filter_map_inplace f tbl] applies [f] to all bindings in\n    table [tbl] and update each binding depending on the result of\n    [f].  If [f] returns [None], the binding is discarded.  If it\n    returns [Some new_val], the binding is update to associate the key\n    to [new_val].\n\n    Other comments for {!Hashtbl.iter} apply as well.\n    @since 4.03.0 "]
val fold : ('a -> 'b -> 'c -> 'c) -> ('a, 'b) t -> 'c -> 'c[@@ocaml.doc
                                                             " [Hashtbl.fold f tbl init] computes\n   [(f kN dN ... (f k1 d1 init)...)],\n   where [k1 ... kN] are the keys of all bindings in [tbl],\n   and [d1 ... dN] are the associated values.\n   Each binding is presented exactly once to [f].\n\n   The order in which the bindings are passed to [f] is unspecified.\n   However, if the table contains several bindings for the same key,\n   they are passed to [f] in reverse order of introduction, that is,\n   the most recent binding is passed first.\n\n   If the hash table was created in non-randomized mode, the order\n   in which the bindings are enumerated is reproducible between\n   successive runs of the program, and even between minor versions\n   of OCaml.  For randomized hash tables, the order of enumeration\n   is entirely random.\n\n   The behavior is not defined if the hash table is modified\n   by [f] during the iteration.\n"]
val length : ('a, 'b) t -> int[@@ocaml.doc
                                " [Hashtbl.length tbl] returns the number of bindings in [tbl].\n   It takes constant time.  Multiple bindings are counted once each, so\n   [Hashtbl.length] gives the number of times [Hashtbl.iter] calls its\n   first argument. "]
val randomize : unit -> unit[@@ocaml.doc
                              " After a call to [Hashtbl.randomize()], hash tables are created in\n    randomized mode by default: {!Hashtbl.create} returns randomized\n    hash tables, unless the [~random:false] optional parameter is given.\n    The same effect can be achieved by setting the [R] parameter in\n    the [OCAMLRUNPARAM] environment variable.\n\n    It is recommended that applications or Web frameworks that need to\n    protect themselves against the denial-of-service attack described\n    in {!Hashtbl.create} call [Hashtbl.randomize()] at initialization\n    time.\n\n    Note that once [Hashtbl.randomize()] was called, there is no way\n    to revert to the non-randomized default behavior of {!Hashtbl.create}.\n    This is intentional.  Non-randomized hash tables can still be\n    created using [Hashtbl.create ~random:false].\n\n    @since 4.00.0 "]
val is_randomized : unit -> bool[@@ocaml.doc
                                  " return if the tables are currently created in randomized mode by default\n\n    @since 4.03.0 "]
type statistics =
  {
  num_bindings: int
    [@ocaml.doc
      " Number of bindings present in the table.\n        Same value as returned by {!Hashtbl.length}. "];
  num_buckets: int [@ocaml.doc " Number of buckets in the table. "];
  max_bucket_length: int
    [@ocaml.doc " Maximal number of bindings per bucket. "];
  bucket_histogram: int array
    [@ocaml.doc
      " Histogram of bucket sizes.  This array [histo] has\n        length [max_bucket_length + 1].  The value of\n        [histo.(i)] is the number of buckets whose size is [i]. "]}
[@@ocaml.doc " @since 4.00.0 "]
val stats : ('a, 'b) t -> statistics[@@ocaml.doc
                                      " [Hashtbl.stats tbl] returns statistics about the table [tbl]:\n   number of buckets, size of the biggest bucket, distribution of\n   buckets by size.\n   @since 4.00.0 "]
[@@@ocaml.text " {6 Iterators} "]
val to_seq : ('a, 'b) t -> ('a * 'b) Seq.t[@@ocaml.doc
                                            " Iterate on the whole table, in unspecified order.\n\n    The behavior is not defined if the hash table is modified\n    during the iteration.\n\n    @since 4.07 "]
val to_seq_keys : ('a, _) t -> 'a Seq.t[@@ocaml.doc
                                         " Iterate on 'as, in ascending order\n    @since 4.07 "]
val to_seq_values : (_, 'b) t -> 'b Seq.t[@@ocaml.doc
                                           " Iterate on values, in ascending order of their corresponding 'a\n    @since 4.07 "]
val add_seq : ('a, 'b) t -> ('a * 'b) Seq.t -> unit[@@ocaml.doc
                                                     " Add the given bindings to the table, using {!add}\n    @since 4.07 "]
val replace_seq : ('a, 'b) t -> ('a * 'b) Seq.t -> unit[@@ocaml.doc
                                                         " Add the given bindings to the table, using {!replace}\n    @since 4.07 "]
val of_seq : ('a * 'b) Seq.t -> ('a, 'b) t[@@ocaml.doc
                                            " Build a table from the given bindings. The bindings are added\n    in the same order they appear in the sequence, using {!replace_seq},\n    which means that if two pairs have the same key, only the latest one\n    will appear in the table.\n    @since 4.07 "]
[@@@ocaml.text " {1 Functorial interface} "]
[@@@ocaml.text
  " The functorial interface allows the use of specific comparison\n    and hash functions, either for performance/security concerns,\n    or because keys are not hashable/comparable with the polymorphic builtins.\n\n    For instance, one might want to specialize a table for integer keys:\n    {[\n      module IntHash =\n        struct\n          type t = int\n          let equal i j = i=j\n          let hash i = i land max_int\n        end\n\n      module IntHashtbl = Hashtbl.Make(IntHash)\n\n      let h = IntHashtbl.create 17 in\n      IntHashtbl.add h 12 \"hello\"\n    ]}\n\n    This creates a new module [IntHashtbl], with a new type ['a\n    IntHashtbl.t] of tables from [int] to ['a]. In this example, [h]\n    contains [string] values so its type is [string IntHashtbl.t].\n\n    Note that the new type ['a IntHashtbl.t] is not compatible with\n    the type [('a,'b) Hashtbl.t] of the generic interface. For\n    example, [Hashtbl.length h] would not type-check, you must use\n    [IntHashtbl.length].\n"]
module type HashedType  =
  sig
    type t[@@ocaml.doc " The type of the hashtable keys. "]
    val equal : t -> t -> bool[@@ocaml.doc
                                " The equality predicate used to compare keys. "]
    val hash : t -> int[@@ocaml.doc
                         " A hashing function on keys. It must be such that if two keys are\n          equal according to [equal], then they have identical hash values\n          as computed by [hash].\n          Examples: suitable ([equal], [hash]) pairs for arbitrary key\n          types include\n-         ([(=)], {!Hashtbl.hash}) for comparing objects by structure\n              (provided objects do not contain floats)\n-         ([(fun x y -> compare x y = 0)], {!Hashtbl.hash})\n              for comparing objects by structure\n              and handling {!Stdlib.nan} correctly\n-         ([(==)], {!Hashtbl.hash}) for comparing objects by physical\n              equality (e.g. for mutable or cyclic objects). "]
  end[@@ocaml.doc " The input signature of the functor {!Hashtbl.Make}. "]
module type S  =
  sig
    type key
    type 'a t
    val create : int -> 'a t
    val clear : 'a t -> unit
    val reset : 'a t -> unit[@@ocaml.doc " @since 4.00.0 "]
    val copy : 'a t -> 'a t
    val add : 'a t -> key -> 'a -> unit
    val remove : 'a t -> key -> unit
    val find : 'a t -> key -> 'a
    val find_opt : 'a t -> key -> 'a option[@@ocaml.doc " @since 4.05.0 "]
    val find_all : 'a t -> key -> 'a list
    val replace : 'a t -> key -> 'a -> unit
    val mem : 'a t -> key -> bool
    val iter : (key -> 'a -> unit) -> 'a t -> unit
    val filter_map_inplace : (key -> 'a -> 'a option) -> 'a t -> unit
    [@@ocaml.doc " @since 4.03.0 "]
    val fold : (key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b
    val length : 'a t -> int
    val stats : 'a t -> statistics[@@ocaml.doc " @since 4.00.0 "]
    val to_seq : 'a t -> (key * 'a) Seq.t[@@ocaml.doc " @since 4.07 "]
    val to_seq_keys : _ t -> key Seq.t[@@ocaml.doc " @since 4.07 "]
    val to_seq_values : 'a t -> 'a Seq.t[@@ocaml.doc " @since 4.07 "]
    val add_seq : 'a t -> (key * 'a) Seq.t -> unit[@@ocaml.doc
                                                    " @since 4.07 "]
    val replace_seq : 'a t -> (key * 'a) Seq.t -> unit[@@ocaml.doc
                                                        " @since 4.07 "]
    val of_seq : (key * 'a) Seq.t -> 'a t[@@ocaml.doc " @since 4.07 "]
  end[@@ocaml.doc " The output signature of the functor {!Hashtbl.Make}. "]
module Make : functor (H : HashedType) -> S with type  key =  H.t[@@ocaml.doc
                                                                   " Functor building an implementation of the hashtable structure.\n    The functor [Hashtbl.Make] returns a structure containing\n    a type [key] of keys and a type ['a t] of hash tables\n    associating data of type ['a] to keys of type [key].\n    The operations perform similarly to those of the generic\n    interface, but use the hashing and equality functions\n    specified in the functor argument [H] instead of generic\n    equality and hashing.  Since the hash function is not seeded,\n    the [create] operation of the result structure always returns\n    non-randomized hash tables. "]
module type SeededHashedType  =
  sig
    type t[@@ocaml.doc " The type of the hashtable keys. "]
    val equal : t -> t -> bool[@@ocaml.doc
                                " The equality predicate used to compare keys. "]
    val hash : int -> t -> int[@@ocaml.doc
                                " A seeded hashing function on keys.  The first argument is\n          the seed.  It must be the case that if [equal x y] is true,\n          then [hash seed x = hash seed y] for any value of [seed].\n          A suitable choice for [hash] is the function {!Hashtbl.seeded_hash}\n          below. "]
  end[@@ocaml.doc
       " The input signature of the functor {!Hashtbl.MakeSeeded}.\n    @since 4.00.0 "]
module type SeededS  =
  sig
    type key
    type 'a t
    val create : ?random:bool -> int -> 'a t
    val clear : 'a t -> unit
    val reset : 'a t -> unit
    val copy : 'a t -> 'a t
    val add : 'a t -> key -> 'a -> unit
    val remove : 'a t -> key -> unit
    val find : 'a t -> key -> 'a
    val find_opt : 'a t -> key -> 'a option[@@ocaml.doc " @since 4.05.0 "]
    val find_all : 'a t -> key -> 'a list
    val replace : 'a t -> key -> 'a -> unit
    val mem : 'a t -> key -> bool
    val iter : (key -> 'a -> unit) -> 'a t -> unit
    val filter_map_inplace : (key -> 'a -> 'a option) -> 'a t -> unit
    [@@ocaml.doc " @since 4.03.0 "]
    val fold : (key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b
    val length : 'a t -> int
    val stats : 'a t -> statistics
    val to_seq : 'a t -> (key * 'a) Seq.t[@@ocaml.doc " @since 4.07 "]
    val to_seq_keys : _ t -> key Seq.t[@@ocaml.doc " @since 4.07 "]
    val to_seq_values : 'a t -> 'a Seq.t[@@ocaml.doc " @since 4.07 "]
    val add_seq : 'a t -> (key * 'a) Seq.t -> unit[@@ocaml.doc
                                                    " @since 4.07 "]
    val replace_seq : 'a t -> (key * 'a) Seq.t -> unit[@@ocaml.doc
                                                        " @since 4.07 "]
    val of_seq : (key * 'a) Seq.t -> 'a t[@@ocaml.doc " @since 4.07 "]
  end[@@ocaml.doc
       " The output signature of the functor {!Hashtbl.MakeSeeded}.\n    @since 4.00.0 "]
module MakeSeeded :
functor (H : SeededHashedType) -> SeededS with type  key =  H.t[@@ocaml.doc
                                                                 " Functor building an implementation of the hashtable structure.\n    The functor [Hashtbl.MakeSeeded] returns a structure containing\n    a type [key] of keys and a type ['a t] of hash tables\n    associating data of type ['a] to keys of type [key].\n    The operations perform similarly to those of the generic\n    interface, but use the seeded hashing and equality functions\n    specified in the functor argument [H] instead of generic\n    equality and hashing.  The [create] operation of the\n    result structure supports the [~random] optional parameter\n    and returns randomized hash tables if [~random:true] is passed\n    or if randomization is globally on (see {!Hashtbl.randomize}).\n    @since 4.00.0 "]
[@@@ocaml.text " {1 The polymorphic hash functions} "]
val hash : 'a -> int[@@ocaml.doc
                      " [Hashtbl.hash x] associates a nonnegative integer to any value of\n   any type. It is guaranteed that\n   if [x = y] or [Stdlib.compare x y = 0], then [hash x = hash y].\n   Moreover, [hash] always terminates, even on cyclic structures. "]
val seeded_hash : int -> 'a -> int[@@ocaml.doc
                                    " A variant of {!Hashtbl.hash} that is further parameterized by\n   an integer seed.\n   @since 4.00.0 "]
val hash_param : int -> int -> 'a -> int[@@ocaml.doc
                                          " [Hashtbl.hash_param meaningful total x] computes a hash value for [x],\n   with the same properties as for [hash]. The two extra integer\n   parameters [meaningful] and [total] give more precise control over\n   hashing. Hashing performs a breadth-first, left-to-right traversal\n   of the structure [x], stopping after [meaningful] meaningful nodes\n   were encountered, or [total] nodes (meaningful or not) were\n   encountered.  If [total] as specified by the user exceeds a certain\n   value, currently 256, then it is capped to that value.\n   Meaningful nodes are: integers; floating-point\n   numbers; strings; characters; booleans; and constant\n   constructors. Larger values of [meaningful] and [total] means that\n   more nodes are taken into account to compute the final hash value,\n   and therefore collisions are less likely to happen.  However,\n   hashing takes longer. The parameters [meaningful] and [total]\n   govern the tradeoff between accuracy and speed.  As default\n   choices, {!Hashtbl.hash} and {!Hashtbl.seeded_hash} take\n   [meaningful = 10] and [total = 100]. "]
val seeded_hash_param : int -> int -> int -> 'a -> int[@@ocaml.doc
                                                        " A variant of {!Hashtbl.hash_param} that is further parameterized by\n   an integer seed.  Usage:\n   [Hashtbl.seeded_hash_param meaningful total seed x].\n   @since 4.00.0 "]

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.text
  " Hash tables and hash functions.\n\n   Hash tables are hashed association tables, with in-place modification.\n"]

[@@@ocaml.text " {1 Generic interface} "]

type ('a, 'b) t[@@ocaml.doc
                 " The type of hash tables from type ['a] to type ['b]. "]
  

val create : ?random:bool -> int -> ('a, 'b) t[@@ocaml.doc
                                                " [Hashtbl.create n] creates a new, empty hash table, with\n   initial size [n].  For best results, [n] should be on the\n   order of the expected number of elements that will be in\n   the table.  The table grows as needed, so [n] is just an\n   initial guess.\n\n   The optional [random] parameter (a boolean) controls whether\n   the internal organization of the hash table is randomized at each\n   execution of [Hashtbl.create] or deterministic over all executions.\n\n   A hash table that is created with [~random:false] uses a\n   fixed hash function ({!Hashtbl.hash}) to distribute keys among\n   buckets.  As a consequence, collisions between keys happen\n   deterministically.  In Web-facing applications or other\n   security-sensitive applications, the deterministic collision\n   patterns can be exploited by a malicious user to create a\n   denial-of-service attack: the attacker sends input crafted to\n   create many collisions in the table, slowing the application down.\n\n   A hash table that is created with [~random:true] uses the seeded\n   hash function {!Hashtbl.seeded_hash} with a seed that is randomly\n   chosen at hash table creation time.  In effect, the hash function\n   used is randomly selected among [2^{30}] different hash functions.\n   All these hash functions have different collision patterns,\n   rendering ineffective the denial-of-service attack described above.\n   However, because of randomization, enumerating all elements of the\n   hash table using {!Hashtbl.fold} or {!Hashtbl.iter} is no longer\n   deterministic: elements are enumerated in different orders at\n   different runs of the program.\n\n   If no [~random] parameter is given, hash tables are created\n   in non-random mode by default.  This default can be changed\n   either programmatically by calling {!Hashtbl.randomize} or by\n   setting the [R] flag in the [OCAMLRUNPARAM] environment variable.\n\n   @before 4.00.0 the [random] parameter was not present and all\n   hash tables were created in non-randomized mode. "]


val clear : ('a, 'b) t -> unit[@@ocaml.doc
                                " Empty a hash table. Use [reset] instead of [clear] to shrink the\n    size of the bucket table to its initial size. "]


val reset : ('a, 'b) t -> unit[@@ocaml.doc
                                " Empty a hash table and shrink the size of the bucket table\n    to its initial size.\n    @since 4.00.0 "]


val copy : ('a, 'b) t -> ('a, 'b) t[@@ocaml.doc
                                     " Return a copy of the given hashtable. "]


val add : ('a, 'b) t -> 'a -> 'b -> unit[@@ocaml.doc
                                          " [Hashtbl.add tbl x y] adds a binding of [x] to [y] in table [tbl].\n   Previous bindings for [x] are not removed, but simply\n   hidden. That is, after performing {!Hashtbl.remove}[ tbl x],\n   the previous binding for [x], if any, is restored.\n   (Same behavior as with association lists.) "]


val find : ('a, 'b) t -> 'a -> 'b[@@ocaml.doc
                                   " [Hashtbl.find tbl x] returns the current binding of [x] in [tbl],\n   or raises [Not_found] if no such binding exists. "]


val find_opt : ('a, 'b) t -> 'a -> 'b option[@@ocaml.doc
                                              " [Hashtbl.find_opt tbl x] returns the current binding of [x] in [tbl],\n    or [None] if no such binding exists.\n    @since 4.05 "]


val find_all : ('a, 'b) t -> 'a -> 'b list[@@ocaml.doc
                                            " [Hashtbl.find_all tbl x] returns the list of all data\n   associated with [x] in [tbl].\n   The current binding is returned first, then the previous\n   bindings, in reverse order of introduction in the table. "]


val mem : ('a, 'b) t -> 'a -> bool[@@ocaml.doc
                                    " [Hashtbl.mem tbl x] checks if [x] is bound in [tbl]. "]


val remove : ('a, 'b) t -> 'a -> unit[@@ocaml.doc
                                       " [Hashtbl.remove tbl x] removes the current binding of [x] in [tbl],\n   restoring the previous binding if it exists.\n   It does nothing if [x] is not bound in [tbl]. "]


val replace : ('a, 'b) t -> 'a -> 'b -> unit[@@ocaml.doc
                                              " [Hashtbl.replace tbl x y] replaces the current binding of [x]\n   in [tbl] by a binding of [x] to [y].  If [x] is unbound in [tbl],\n   a binding of [x] to [y] is added to [tbl].\n   This is functionally equivalent to {!Hashtbl.remove}[ tbl x]\n   followed by {!Hashtbl.add}[ tbl x y]. "]


val iter : ('a -> 'b -> unit) -> ('a, 'b) t -> unit[@@ocaml.doc
                                                     " [Hashtbl.iter f tbl] applies [f] to all bindings in table [tbl].\n   [f] receives the key as first argument, and the associated value\n   as second argument. Each binding is presented exactly once to [f].\n\n   The order in which the bindings are passed to [f] is unspecified.\n   However, if the table contains several bindings for the same key,\n   they are passed to [f] in reverse order of introduction, that is,\n   the most recent binding is passed first.\n\n   If the hash table was created in non-randomized mode, the order\n   in which the bindings are enumerated is reproducible between\n   successive runs of the program, and even between minor versions\n   of OCaml.  For randomized hash tables, the order of enumeration\n   is entirely random.\n\n   The behavior is not defined if the hash table is modified\n   by [f] during the iteration.\n"]


val filter_map_inplace : ('a -> 'b -> 'b option) -> ('a, 'b) t -> unit
[@@ocaml.doc
  " [Hashtbl.filter_map_inplace f tbl] applies [f] to all bindings in\n    table [tbl] and update each binding depending on the result of\n    [f].  If [f] returns [None], the binding is discarded.  If it\n    returns [Some new_val], the binding is update to associate the key\n    to [new_val].\n\n    Other comments for {!Hashtbl.iter} apply as well.\n    @since 4.03.0 "]


val fold : ('a -> 'b -> 'c -> 'c) -> ('a, 'b) t -> 'c -> 'c[@@ocaml.doc
                                                             " [Hashtbl.fold f tbl init] computes\n   [(f kN dN ... (f k1 d1 init)...)],\n   where [k1 ... kN] are the keys of all bindings in [tbl],\n   and [d1 ... dN] are the associated values.\n   Each binding is presented exactly once to [f].\n\n   The order in which the bindings are passed to [f] is unspecified.\n   However, if the table contains several bindings for the same key,\n   they are passed to [f] in reverse order of introduction, that is,\n   the most recent binding is passed first.\n\n   If the hash table was created in non-randomized mode, the order\n   in which the bindings are enumerated is reproducible between\n   successive runs of the program, and even between minor versions\n   of OCaml.  For randomized hash tables, the order of enumeration\n   is entirely random.\n\n   The behavior is not defined if the hash table is modified\n   by [f] during the iteration.\n"]


val length : ('a, 'b) t -> int[@@ocaml.doc
                                " [Hashtbl.length tbl] returns the number of bindings in [tbl].\n   It takes constant time.  Multiple bindings are counted once each, so\n   [Hashtbl.length] gives the number of times [Hashtbl.iter] calls its\n   first argument. "]


val randomize : unit -> unit[@@ocaml.doc
                              " After a call to [Hashtbl.randomize()], hash tables are created in\n    randomized mode by default: {!Hashtbl.create} returns randomized\n    hash tables, unless the [~random:false] optional parameter is given.\n    The same effect can be achieved by setting the [R] parameter in\n    the [OCAMLRUNPARAM] environment variable.\n\n    It is recommended that applications or Web frameworks that need to\n    protect themselves against the denial-of-service attack described\n    in {!Hashtbl.create} call [Hashtbl.randomize()] at initialization\n    time.\n\n    Note that once [Hashtbl.randomize()] was called, there is no way\n    to revert to the non-randomized default behavior of {!Hashtbl.create}.\n    This is intentional.  Non-randomized hash tables can still be\n    created using [Hashtbl.create ~random:false].\n\n    @since 4.00.0 "]


val is_randomized : unit -> bool[@@ocaml.doc
                                  " return if the tables are currently created in randomized mode by default\n\n    @since 4.03.0 "]


type statistics =
{
num_bindings: int
  [@ocaml.doc
    " Number of bindings present in the table.\n        Same value as returned by {!Hashtbl.length}. "];
num_buckets: int [@ocaml.doc " Number of buckets in the table. "];
max_bucket_length: int
  [@ocaml.doc " Maximal number of bindings per bucket. "];
bucket_histogram: int array
  [@ocaml.doc
    " Histogram of bucket sizes.  This array [histo] has\n        length [max_bucket_length + 1].  The value of\n        [histo.(i)] is the number of buckets whose size is [i]. "]}
[@@ocaml.doc " @since 4.00.0 "]
  

val stats : ('a, 'b) t -> statistics[@@ocaml.doc
                                      " [Hashtbl.stats tbl] returns statistics about the table [tbl]:\n   number of buckets, size of the biggest bucket, distribution of\n   buckets by size.\n   @since 4.00.0 "]


[@@@ocaml.text " {6 Iterators} "]

val to_seq : ('a, 'b) t -> ('a * 'b) Seq.t[@@ocaml.doc
                                            " Iterate on the whole table, in unspecified order.\n\n    The behavior is not defined if the hash table is modified\n    during the iteration.\n\n    @since 4.07 "]


val to_seq_keys : ('a, _) t -> 'a Seq.t[@@ocaml.doc
                                         " Iterate on 'as, in ascending order\n    @since 4.07 "]


val to_seq_values : (_, 'b) t -> 'b Seq.t[@@ocaml.doc
                                           " Iterate on values, in ascending order of their corresponding 'a\n    @since 4.07 "]


val add_seq : ('a, 'b) t -> ('a * 'b) Seq.t -> unit[@@ocaml.doc
                                                     " Add the given bindings to the table, using {!add}\n    @since 4.07 "]


val replace_seq : ('a, 'b) t -> ('a * 'b) Seq.t -> unit[@@ocaml.doc
                                                         " Add the given bindings to the table, using {!replace}\n    @since 4.07 "]


val of_seq : ('a * 'b) Seq.t -> ('a, 'b) t[@@ocaml.doc
                                            " Build a table from the given bindings. The bindings are added\n    in the same order they appear in the sequence, using {!replace_seq},\n    which means that if two pairs have the same key, only the latest one\n    will appear in the table.\n    @since 4.07 "]


[@@@ocaml.text " {1 Functorial interface} "]

[@@@ocaml.text
  " The functorial interface allows the use of specific comparison\n    and hash functions, either for performance/security concerns,\n    or because keys are not hashable/comparable with the polymorphic builtins.\n\n    For instance, one might want to specialize a table for integer keys:\n    {[\n      module IntHash =\n        struct\n          type t = int\n          let equal i j = i=j\n          let hash i = i land max_int\n        end\n\n      module IntHashtbl = Hashtbl.Make(IntHash)\n\n      let h = IntHashtbl.create 17 in\n      IntHashtbl.add h 12 \"hello\"\n    ]}\n\n    This creates a new module [IntHashtbl], with a new type ['a\n    IntHashtbl.t] of tables from [int] to ['a]. In this example, [h]\n    contains [string] values so its type is [string IntHashtbl.t].\n\n    Note that the new type ['a IntHashtbl.t] is not compatible with\n    the type [('a,'b) Hashtbl.t] of the generic interface. For\n    example, [Hashtbl.length h] would not type-check, you must use\n    [IntHashtbl.length].\n"]

module type HashedType  =
  sig
    type t[@@ocaml.doc " The type of the hashtable keys. "]
      
    val equal : t -> t -> bool[@@ocaml.doc
                                " The equality predicate used to compare keys. "]
    
    val hash : t -> int[@@ocaml.doc
                         " A hashing function on keys. It must be such that if two keys are\n          equal according to [equal], then they have identical hash values\n          as computed by [hash].\n          Examples: suitable ([equal], [hash]) pairs for arbitrary key\n          types include\n-         ([(=)], {!Hashtbl.hash}) for comparing objects by structure\n              (provided objects do not contain floats)\n-         ([(fun x y -> compare x y = 0)], {!Hashtbl.hash})\n              for comparing objects by structure\n              and handling {!Stdlib.nan} correctly\n-         ([(==)], {!Hashtbl.hash}) for comparing objects by physical\n              equality (e.g. for mutable or cyclic objects). "]
    
  end[@@ocaml.doc " The input signature of the functor {!Hashtbl.Make}. "]

module type S  =
  sig
    type key
      
    type 'a t
      
    val create : int -> 'a t
    
    val clear : 'a t -> unit
    
    val reset : 'a t -> unit[@@ocaml.doc " @since 4.00.0 "]
    
    val copy : 'a t -> 'a t
    
    val add : 'a t -> key -> 'a -> unit
    
    val remove : 'a t -> key -> unit
    
    val find : 'a t -> key -> 'a
    
    val find_opt : 'a t -> key -> 'a option[@@ocaml.doc " @since 4.05.0 "]
    
    val find_all : 'a t -> key -> 'a list
    
    val replace : 'a t -> key -> 'a -> unit
    
    val mem : 'a t -> key -> bool
    
    val iter : (key -> 'a -> unit) -> 'a t -> unit
    
    val filter_map_inplace : (key -> 'a -> 'a option) -> 'a t -> unit
    [@@ocaml.doc " @since 4.03.0 "]
    
    val fold : (key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b
    
    val length : 'a t -> int
    
    val stats : 'a t -> statistics[@@ocaml.doc " @since 4.00.0 "]
    
    val to_seq : 'a t -> (key * 'a) Seq.t[@@ocaml.doc " @since 4.07 "]
    
    val to_seq_keys : _ t -> key Seq.t[@@ocaml.doc " @since 4.07 "]
    
    val to_seq_values : 'a t -> 'a Seq.t[@@ocaml.doc " @since 4.07 "]
    
    val add_seq : 'a t -> (key * 'a) Seq.t -> unit[@@ocaml.doc
                                                    " @since 4.07 "]
    
    val replace_seq : 'a t -> (key * 'a) Seq.t -> unit[@@ocaml.doc
                                                        " @since 4.07 "]
    
    val of_seq : (key * 'a) Seq.t -> 'a t[@@ocaml.doc " @since 4.07 "]
    
  end[@@ocaml.doc " The output signature of the functor {!Hashtbl.Make}. "]

module Make : functor (H : HashedType) -> S with type  key =  H.t[@@ocaml.doc
                                                                   " Functor building an implementation of the hashtable structure.\n    The functor [Hashtbl.Make] returns a structure containing\n    a type [key] of keys and a type ['a t] of hash tables\n    associating data of type ['a] to keys of type [key].\n    The operations perform similarly to those of the generic\n    interface, but use the hashing and equality functions\n    specified in the functor argument [H] instead of generic\n    equality and hashing.  Since the hash function is not seeded,\n    the [create] operation of the result structure always returns\n    non-randomized hash tables. "]

module type SeededHashedType  =
  sig
    type t[@@ocaml.doc " The type of the hashtable keys. "]
      
    val equal : t -> t -> bool[@@ocaml.doc
                                " The equality predicate used to compare keys. "]
    
    val hash : int -> t -> int[@@ocaml.doc
                                " A seeded hashing function on keys.  The first argument is\n          the seed.  It must be the case that if [equal x y] is true,\n          then [hash seed x = hash seed y] for any value of [seed].\n          A suitable choice for [hash] is the function {!Hashtbl.seeded_hash}\n          below. "]
    
  end[@@ocaml.doc
       " The input signature of the functor {!Hashtbl.MakeSeeded}.\n    @since 4.00.0 "]

module type SeededS  =
  sig
    type key
      
    type 'a t
      
    val create : ?random:bool -> int -> 'a t
    
    val clear : 'a t -> unit
    
    val reset : 'a t -> unit
    
    val copy : 'a t -> 'a t
    
    val add : 'a t -> key -> 'a -> unit
    
    val remove : 'a t -> key -> unit
    
    val find : 'a t -> key -> 'a
    
    val find_opt : 'a t -> key -> 'a option[@@ocaml.doc " @since 4.05.0 "]
    
    val find_all : 'a t -> key -> 'a list
    
    val replace : 'a t -> key -> 'a -> unit
    
    val mem : 'a t -> key -> bool
    
    val iter : (key -> 'a -> unit) -> 'a t -> unit
    
    val filter_map_inplace : (key -> 'a -> 'a option) -> 'a t -> unit
    [@@ocaml.doc " @since 4.03.0 "]
    
    val fold : (key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b
    
    val length : 'a t -> int
    
    val stats : 'a t -> statistics
    
    val to_seq : 'a t -> (key * 'a) Seq.t[@@ocaml.doc " @since 4.07 "]
    
    val to_seq_keys : _ t -> key Seq.t[@@ocaml.doc " @since 4.07 "]
    
    val to_seq_values : 'a t -> 'a Seq.t[@@ocaml.doc " @since 4.07 "]
    
    val add_seq : 'a t -> (key * 'a) Seq.t -> unit[@@ocaml.doc
                                                    " @since 4.07 "]
    
    val replace_seq : 'a t -> (key * 'a) Seq.t -> unit[@@ocaml.doc
                                                        " @since 4.07 "]
    
    val of_seq : (key * 'a) Seq.t -> 'a t[@@ocaml.doc " @since 4.07 "]
    
  end[@@ocaml.doc
       " The output signature of the functor {!Hashtbl.MakeSeeded}.\n    @since 4.00.0 "]

module MakeSeeded :
functor (H : SeededHashedType) -> SeededS with type  key =  H.t[@@ocaml.doc
                                                                 " Functor building an implementation of the hashtable structure.\n    The functor [Hashtbl.MakeSeeded] returns a structure containing\n    a type [key] of keys and a type ['a t] of hash tables\n    associating data of type ['a] to keys of type [key].\n    The operations perform similarly to those of the generic\n    interface, but use the seeded hashing and equality functions\n    specified in the functor argument [H] instead of generic\n    equality and hashing.  The [create] operation of the\n    result structure supports the [~random] optional parameter\n    and returns randomized hash tables if [~random:true] is passed\n    or if randomization is globally on (see {!Hashtbl.randomize}).\n    @since 4.00.0 "]

[@@@ocaml.text " {1 The polymorphic hash functions} "]

val hash : 'a -> int[@@ocaml.doc
                      " [Hashtbl.hash x] associates a nonnegative integer to any value of\n   any type. It is guaranteed that\n   if [x = y] or [Stdlib.compare x y = 0], then [hash x = hash y].\n   Moreover, [hash] always terminates, even on cyclic structures. "]


val seeded_hash : int -> 'a -> int[@@ocaml.doc
                                    " A variant of {!Hashtbl.hash} that is further parameterized by\n   an integer seed.\n   @since 4.00.0 "]


val hash_param : int -> int -> 'a -> int[@@ocaml.doc
                                          " [Hashtbl.hash_param meaningful total x] computes a hash value for [x],\n   with the same properties as for [hash]. The two extra integer\n   parameters [meaningful] and [total] give more precise control over\n   hashing. Hashing performs a breadth-first, left-to-right traversal\n   of the structure [x], stopping after [meaningful] meaningful nodes\n   were encountered, or [total] nodes (meaningful or not) were\n   encountered.  If [total] as specified by the user exceeds a certain\n   value, currently 256, then it is capped to that value.\n   Meaningful nodes are: integers; floating-point\n   numbers; strings; characters; booleans; and constant\n   constructors. Larger values of [meaningful] and [total] means that\n   more nodes are taken into account to compute the final hash value,\n   and therefore collisions are less likely to happen.  However,\n   hashing takes longer. The parameters [meaningful] and [total]\n   govern the tradeoff between accuracy and speed.  As default\n   choices, {!Hashtbl.hash} and {!Hashtbl.seeded_hash} take\n   [meaningful = 10] and [total = 100]. "]


val seeded_hash_param : int -> int -> int -> 'a -> int[@@ocaml.doc
                                                        " A variant of {!Hashtbl.hash_param} that is further parameterized by\n   an integer seed.  Usage:\n   [Hashtbl.seeded_hash_param meaningful total seed x].\n   @since 4.00.0 "]

File "hashtbl.mli", line 285, characters 9-10:
Error: Multiple definitions of type t
