
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.text " Recording sections written to a bytecode executable file "]
val init_record : out_channel -> unit
val record : out_channel -> string -> unit
val write_toc_and_trailer : out_channel -> unit
[@@@ocaml.text " Reading sections from a bytecode executable file "]
val read_toc : in_channel -> unit
exception Bad_magic_number 
val toc : unit -> (string * int) list
val seek_section : in_channel -> string -> int
val read_section_string : in_channel -> string -> string
val read_section_struct : in_channel -> string -> 'a
val pos_first_section : in_channel -> int
val reset : unit -> unit

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.text " Recording sections written to a bytecode executable file "]

val init_record : out_channel -> unit


val record : out_channel -> string -> unit


val write_toc_and_trailer : out_channel -> unit


[@@@ocaml.text " Reading sections from a bytecode executable file "]

val read_toc : in_channel -> unit


exception Bad_magic_number 

val toc : unit -> (string * int) list


val seek_section : in_channel -> string -> int


val read_section_string : in_channel -> string -> string


val read_section_struct : in_channel -> string -> 'a


val pos_first_section : in_channel -> int


val reset : unit -> unit


*******************************
********* Typed GOSPEL ********
*******************************
module bytesections.mli

  Namespace: bytesections.mli
    Type symbols
      
    Logic Symbols
      
    Exception Symbols
      Bad_magic_number
      
    Namespaces
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    [@@@ocaml.text
      " Recording sections written to a bytecode executable file "]
    
    val init_record : out_channel -> unit
    
    
    val record : out_channel -> string -> unit
    
    
    val write_toc_and_trailer : out_channel -> unit
    
    
    [@@@ocaml.text " Reading sections from a bytecode executable file "]
    
    val read_toc : in_channel -> unit
    
    
    exception Bad_magic_number
    
    val toc : unit -> (string * int) list
    
    
    val seek_section : in_channel -> string -> int
    
    
    val read_section_string : in_channel -> string -> string
    
    
    val read_section_struct : in_channel -> string -> 'a
    
    
    val pos_first_section : in_channel -> int
    
    
    val reset : unit -> unit
    


*** OK ***

