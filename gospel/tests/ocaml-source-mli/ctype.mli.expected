
*******************************
********** Parsed file ********
*******************************
open Asttypes
open Types
exception Unify of (type_expr * type_expr) list 
exception Tags of label * label 
exception Subtype of (type_expr * type_expr) list * (type_expr * type_expr)
  list 
exception Cannot_expand 
exception Cannot_apply 
val init_def : int -> unit
val begin_def : unit -> unit
val end_def : unit -> unit
val begin_class_def : unit -> unit
val raise_nongen_level : unit -> unit
val reset_global_level : unit -> unit
val increase_global_level : unit -> int
val restore_global_level : int -> unit
type levels =
  {
  current_level: int ;
  nongen_level: int ;
  global_level: int ;
  saved_level: (int * int) list }
val save_levels : unit -> levels
val set_levels : levels -> unit
val newty : type_desc -> type_expr
val newvar : ?name:string -> unit -> type_expr
val newvar2 : ?name:string -> int -> type_expr
val new_global_var : ?name:string -> unit -> type_expr
val newobj : type_expr -> type_expr
val newconstr : Path.t -> type_expr list -> type_expr
val none : type_expr
val repr : type_expr -> type_expr
val object_fields : type_expr -> type_expr
val flatten_fields :
  type_expr -> ((string * field_kind * type_expr) list * type_expr)
val associate_fields :
  (string * field_kind * type_expr) list ->
    (string * field_kind * type_expr) list ->
      ((string * field_kind * type_expr * field_kind * type_expr) list *
        (string * field_kind * type_expr) list * (string * field_kind *
        type_expr) list)
val opened_object : type_expr -> bool
val close_object : type_expr -> unit
val row_variable : type_expr -> type_expr
val set_object_name :
  Ident.t -> type_expr -> type_expr list -> type_expr -> unit
val remove_object_name : type_expr -> unit
val hide_private_methods : type_expr -> unit
val find_cltype_for_path : Env.t -> Path.t -> (type_declaration * type_expr)
val lid_of_path : ?hash:string -> Path.t -> Longident.t
val sort_row_fields : (label * row_field) list -> (label * row_field) list
val merge_row_fields :
  (label * row_field) list ->
    (label * row_field) list ->
      ((label * row_field) list * (label * row_field) list * (label *
        row_field * row_field) list)
val filter_row_fields :
  bool -> (label * row_field) list -> (label * row_field) list
val generalize : type_expr -> unit
val generalize_expansive : Env.t -> type_expr -> unit
val generalize_structure : type_expr -> unit
val generalize_spine : type_expr -> unit
val correct_levels : type_expr -> type_expr
val limited_generalize : type_expr -> type_expr -> unit
val check_scope_escape : int -> type_expr -> unit
val instance : ?partial:bool -> type_expr -> type_expr
val generic_instance : type_expr -> type_expr
val instance_list : type_expr list -> type_expr list
val existential_name : constructor_description -> type_expr -> string
val instance_constructor :
  ?in_pattern:(Env.t ref * int) ->
    constructor_description -> (type_expr list * type_expr)
val instance_parameterized_type :
  ?keep_names:bool ->
    type_expr list -> type_expr -> (type_expr list * type_expr)
val instance_parameterized_type_2 :
  type_expr list ->
    type_expr list ->
      type_expr -> (type_expr list * type_expr list * type_expr)
val instance_declaration : type_declaration -> type_declaration
val instance_class :
  type_expr list -> class_type -> (type_expr list * class_type)
val instance_poly :
  ?keep_names:bool ->
    bool -> type_expr list -> type_expr -> (type_expr list * type_expr)
val instance_label :
  bool -> label_description -> (type_expr list * type_expr * type_expr)
val apply :
  Env.t -> type_expr list -> type_expr -> type_expr list -> type_expr
val expand_head_once : Env.t -> type_expr -> type_expr
val expand_head : Env.t -> type_expr -> type_expr
val try_expand_once_opt : Env.t -> type_expr -> type_expr
val expand_head_opt : Env.t -> type_expr -> type_expr[@@ocaml.doc
                                                       " The compiler's own version of [expand_head] necessary for type-based\n    optimisations. "]
val full_expand : Env.t -> type_expr -> type_expr
val extract_concrete_typedecl :
  Env.t -> type_expr -> (Path.t * Path.t * type_declaration)
val enforce_constraints : Env.t -> type_expr -> unit
val unify : Env.t -> type_expr -> type_expr -> unit
val unify_gadt :
  equations_level:int -> Env.t ref -> type_expr -> type_expr -> unit
val unify_var : Env.t -> type_expr -> type_expr -> unit
val with_passive_variants : ('a -> 'b) -> 'a -> 'b
val filter_arrow : Env.t -> type_expr -> arg_label -> (type_expr * type_expr)
val filter_method : Env.t -> string -> private_flag -> type_expr -> type_expr
val check_filter_method :
  Env.t -> string -> private_flag -> type_expr -> unit
val occur_in : Env.t -> type_expr -> type_expr -> bool
val deep_occur : type_expr -> type_expr -> bool
val filter_self_method :
  Env.t ->
    string ->
      private_flag ->
        (Ident.t * type_expr) Meths.t ref ->
          type_expr -> (Ident.t * type_expr)
val moregeneral : Env.t -> bool -> type_expr -> type_expr -> bool
val rigidify : type_expr -> type_expr list
val all_distinct_vars : Env.t -> type_expr list -> bool
val matches : Env.t -> type_expr -> type_expr -> bool
val reify_univars : Types.type_expr -> Types.type_expr
type class_match_failure =
  | CM_Virtual_class 
  | CM_Parameter_arity_mismatch of int * int 
  | CM_Type_parameter_mismatch of Env.t * (type_expr * type_expr) list 
  | CM_Class_type_mismatch of Env.t * class_type * class_type 
  | CM_Parameter_mismatch of Env.t * (type_expr * type_expr) list 
  | CM_Val_type_mismatch of string * Env.t * (type_expr * type_expr) list 
  | CM_Meth_type_mismatch of string * Env.t * (type_expr * type_expr) list 
  | CM_Non_mutable_value of string 
  | CM_Non_concrete_value of string 
  | CM_Missing_value of string 
  | CM_Missing_method of string 
  | CM_Hide_public of string 
  | CM_Hide_virtual of string * string 
  | CM_Public_method of string 
  | CM_Private_method of string 
  | CM_Virtual_method of string 
val match_class_types :
  ?trace:bool ->
    Env.t -> class_type -> class_type -> class_match_failure list
val equal : Env.t -> bool -> type_expr list -> type_expr list -> bool
val match_class_declarations :
  Env.t ->
    type_expr list ->
      class_type -> type_expr list -> class_type -> class_match_failure list
val enlarge_type : Env.t -> type_expr -> (type_expr * bool)
val subtype : Env.t -> type_expr -> type_expr -> unit -> unit
exception Nondep_cannot_erase of Ident.t 
val nondep_type : Env.t -> Ident.t list -> type_expr -> type_expr
val nondep_type_decl :
  Env.t -> Ident.t list -> bool -> type_declaration -> type_declaration
val nondep_extension_constructor :
  Env.t -> Ident.t list -> extension_constructor -> extension_constructor
val nondep_class_declaration :
  Env.t -> Ident.t list -> class_declaration -> class_declaration
val nondep_cltype_declaration :
  Env.t -> Ident.t list -> class_type_declaration -> class_type_declaration
val cyclic_abbrev : Env.t -> Ident.t -> type_expr -> bool
val is_contractive : Env.t -> Path.t -> bool
val normalize_type : Env.t -> type_expr -> unit
val closed_schema : Env.t -> type_expr -> bool
val free_variables : ?env:Env.t -> type_expr -> type_expr list
val closed_type_decl : type_declaration -> type_expr option
val closed_extension_constructor : extension_constructor -> type_expr option
type closed_class_failure =
  | CC_Method of type_expr * bool * string * type_expr 
  | CC_Value of type_expr * bool * string * type_expr 
val closed_class :
  type_expr list -> class_signature -> closed_class_failure option
val unalias : type_expr -> type_expr
val signature_of_class_type : class_type -> class_signature
val self_type : class_type -> type_expr
val class_type_arity : class_type -> int
val arity : type_expr -> int
val collapse_conj_params : Env.t -> type_expr list -> unit
val get_current_level : unit -> int
val wrap_trace_gadt_instances : Env.t -> ('a -> 'b) -> 'a -> 'b
val reset_reified_var_counter : unit -> unit
val maybe_pointer_type : Env.t -> type_expr -> bool
val package_subtype :
  (Env.t ->
     Path.t ->
       Longident.t list ->
         type_expr list ->
           Path.t -> Longident.t list -> type_expr list -> bool)
    ref
val mcomp : Env.t -> type_expr -> type_expr -> unit

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

open Asttypes

open Types

exception Unify of (type_expr * type_expr) list 

exception Tags of label * label 

exception Subtype of (type_expr * type_expr) list * (type_expr * type_expr)
  list 

exception Cannot_expand 

exception Cannot_apply 

val init_def : int -> unit


val begin_def : unit -> unit


val end_def : unit -> unit


val begin_class_def : unit -> unit


val raise_nongen_level : unit -> unit


val reset_global_level : unit -> unit


val increase_global_level : unit -> int


val restore_global_level : int -> unit


type levels =
{
current_level: int ;
nongen_level: int ;
global_level: int ;
saved_level: (int * int) list }
  

val save_levels : unit -> levels


val set_levels : levels -> unit


val newty : type_desc -> type_expr


val newvar : ?name:string -> unit -> type_expr


val newvar2 : ?name:string -> int -> type_expr


val new_global_var : ?name:string -> unit -> type_expr


val newobj : type_expr -> type_expr


val newconstr : Path.t -> type_expr list -> type_expr


val none : type_expr


val repr : type_expr -> type_expr


val object_fields : type_expr -> type_expr


val flatten_fields :
  type_expr -> ((string * field_kind * type_expr) list * type_expr)


val associate_fields :
  (string * field_kind * type_expr) list ->
    (string * field_kind * type_expr) list ->
      ((string * field_kind * type_expr * field_kind * type_expr) list *
        (string * field_kind * type_expr) list * (string * field_kind *
        type_expr) list)


val opened_object : type_expr -> bool


val close_object : type_expr -> unit


val row_variable : type_expr -> type_expr


val set_object_name :
  Ident.t -> type_expr -> type_expr list -> type_expr -> unit


val remove_object_name : type_expr -> unit


val hide_private_methods : type_expr -> unit


val find_cltype_for_path : Env.t -> Path.t -> (type_declaration * type_expr)


val lid_of_path : ?hash:string -> Path.t -> Longident.t


val sort_row_fields : (label * row_field) list -> (label * row_field) list


val merge_row_fields :
  (label * row_field) list ->
    (label * row_field) list ->
      ((label * row_field) list * (label * row_field) list * (label *
        row_field * row_field) list)


val filter_row_fields :
  bool -> (label * row_field) list -> (label * row_field) list


val generalize : type_expr -> unit


val generalize_expansive : Env.t -> type_expr -> unit


val generalize_structure : type_expr -> unit


val generalize_spine : type_expr -> unit


val correct_levels : type_expr -> type_expr


val limited_generalize : type_expr -> type_expr -> unit


val check_scope_escape : int -> type_expr -> unit


val instance : ?partial:bool -> type_expr -> type_expr


val generic_instance : type_expr -> type_expr


val instance_list : type_expr list -> type_expr list


val existential_name : constructor_description -> type_expr -> string


val instance_constructor :
  ?in_pattern:(Env.t ref * int) ->
    constructor_description -> (type_expr list * type_expr)


val instance_parameterized_type :
  ?keep_names:bool ->
    type_expr list -> type_expr -> (type_expr list * type_expr)


val instance_parameterized_type_2 :
  type_expr list ->
    type_expr list ->
      type_expr -> (type_expr list * type_expr list * type_expr)


val instance_declaration : type_declaration -> type_declaration


val instance_class :
  type_expr list -> class_type -> (type_expr list * class_type)


val instance_poly :
  ?keep_names:bool ->
    bool -> type_expr list -> type_expr -> (type_expr list * type_expr)


val instance_label :
  bool -> label_description -> (type_expr list * type_expr * type_expr)


val apply :
  Env.t -> type_expr list -> type_expr -> type_expr list -> type_expr


val expand_head_once : Env.t -> type_expr -> type_expr


val expand_head : Env.t -> type_expr -> type_expr


val try_expand_once_opt : Env.t -> type_expr -> type_expr


val expand_head_opt : Env.t -> type_expr -> type_expr[@@ocaml.doc
                                                       " The compiler's own version of [expand_head] necessary for type-based\n    optimisations. "]


val full_expand : Env.t -> type_expr -> type_expr


val extract_concrete_typedecl :
  Env.t -> type_expr -> (Path.t * Path.t * type_declaration)


val enforce_constraints : Env.t -> type_expr -> unit


val unify : Env.t -> type_expr -> type_expr -> unit


val unify_gadt :
  equations_level:int -> Env.t ref -> type_expr -> type_expr -> unit


val unify_var : Env.t -> type_expr -> type_expr -> unit


val with_passive_variants : ('a -> 'b) -> 'a -> 'b


val filter_arrow : Env.t -> type_expr -> arg_label -> (type_expr * type_expr)


val filter_method : Env.t -> string -> private_flag -> type_expr -> type_expr


val check_filter_method :
  Env.t -> string -> private_flag -> type_expr -> unit


val occur_in : Env.t -> type_expr -> type_expr -> bool


val deep_occur : type_expr -> type_expr -> bool


val filter_self_method :
  Env.t ->
    string ->
      private_flag ->
        (Ident.t * type_expr) Meths.t ref ->
          type_expr -> (Ident.t * type_expr)


val moregeneral : Env.t -> bool -> type_expr -> type_expr -> bool


val rigidify : type_expr -> type_expr list


val all_distinct_vars : Env.t -> type_expr list -> bool


val matches : Env.t -> type_expr -> type_expr -> bool


val reify_univars : Types.type_expr -> Types.type_expr


type class_match_failure =
| CM_Virtual_class 
| CM_Parameter_arity_mismatch of int * int 
| CM_Type_parameter_mismatch of Env.t * (type_expr * type_expr) list 
| CM_Class_type_mismatch of Env.t * class_type * class_type 
| CM_Parameter_mismatch of Env.t * (type_expr * type_expr) list 
| CM_Val_type_mismatch of string * Env.t * (type_expr * type_expr) list 
| CM_Meth_type_mismatch of string * Env.t * (type_expr * type_expr) list 
| CM_Non_mutable_value of string 
| CM_Non_concrete_value of string 
| CM_Missing_value of string 
| CM_Missing_method of string 
| CM_Hide_public of string 
| CM_Hide_virtual of string * string 
| CM_Public_method of string 
| CM_Private_method of string 
| CM_Virtual_method of string 
  

val match_class_types :
  ?trace:bool ->
    Env.t -> class_type -> class_type -> class_match_failure list


val equal : Env.t -> bool -> type_expr list -> type_expr list -> bool


val match_class_declarations :
  Env.t ->
    type_expr list ->
      class_type -> type_expr list -> class_type -> class_match_failure list


val enlarge_type : Env.t -> type_expr -> (type_expr * bool)


val subtype : Env.t -> type_expr -> type_expr -> unit -> unit


exception Nondep_cannot_erase of Ident.t 

val nondep_type : Env.t -> Ident.t list -> type_expr -> type_expr


val nondep_type_decl :
  Env.t -> Ident.t list -> bool -> type_declaration -> type_declaration


val nondep_extension_constructor :
  Env.t -> Ident.t list -> extension_constructor -> extension_constructor


val nondep_class_declaration :
  Env.t -> Ident.t list -> class_declaration -> class_declaration


val nondep_cltype_declaration :
  Env.t -> Ident.t list -> class_type_declaration -> class_type_declaration


val cyclic_abbrev : Env.t -> Ident.t -> type_expr -> bool


val is_contractive : Env.t -> Path.t -> bool


val normalize_type : Env.t -> type_expr -> unit


val closed_schema : Env.t -> type_expr -> bool


val free_variables : ?env:Env.t -> type_expr -> type_expr list


val closed_type_decl : type_declaration -> type_expr option


val closed_extension_constructor : extension_constructor -> type_expr option


type closed_class_failure =
| CC_Method of type_expr * bool * string * type_expr 
| CC_Value of type_expr * bool * string * type_expr 
  

val closed_class :
  type_expr list -> class_signature -> closed_class_failure option


val unalias : type_expr -> type_expr


val signature_of_class_type : class_type -> class_signature


val self_type : class_type -> type_expr


val class_type_arity : class_type -> int


val arity : type_expr -> int


val collapse_conj_params : Env.t -> type_expr list -> unit


val get_current_level : unit -> int


val wrap_trace_gadt_instances : Env.t -> ('a -> 'b) -> 'a -> 'b


val reset_reified_var_counter : unit -> unit


val maybe_pointer_type : Env.t -> type_expr -> bool


val package_subtype :
  (Env.t ->
     Path.t ->
       Longident.t list ->
         type_expr list ->
           Path.t -> Longident.t list -> type_expr list -> bool)
    ref


val mcomp : Env.t -> type_expr -> type_expr -> unit

File "./asttypes.mli", line 28, characters 19-24:
Error: Symbol int32 not found
