
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.text
  " Extensible buffers.\n\n   This module implements buffers that automatically expand\n   as necessary.  It provides accumulative concatenation of strings\n   in quasi-linear time (instead of quadratic time when strings are\n   concatenated pairwise).\n"]
type t[@@ocaml.doc " The abstract type of buffers. "]
val create : int -> t[@@ocaml.doc
                       " [create n] returns a fresh buffer, initially empty.\n   The [n] parameter is the initial size of the internal byte sequence\n   that holds the buffer contents. That byte sequence is automatically\n   reallocated when more than [n] characters are stored in the buffer,\n   but shrinks back to [n] characters when [reset] is called.\n   For best performance, [n] should be of the same order of magnitude\n   as the number of characters that are expected to be stored in\n   the buffer (for instance, 80 for a buffer that holds one output\n   line).  Nothing bad will happen if the buffer grows beyond that\n   limit, however. In doubt, take [n = 16] for instance.\n   If [n] is not between 1 and {!Sys.max_string_length}, it will\n   be clipped to that interval. "]
val contents : t -> string[@@ocaml.doc
                            " Return a copy of the current contents of the buffer.\n    The buffer itself is unchanged. "]
val to_bytes : t -> bytes[@@ocaml.doc
                           " Return a copy of the current contents of the buffer.\n    The buffer itself is unchanged.\n    @since 4.02 "]
val sub : t -> int -> int -> string[@@ocaml.doc
                                     " [Buffer.sub b off len] returns a copy of [len] bytes from the\n    current contents of the buffer [b], starting at offset [off].\n\n    Raise [Invalid_argument] if [srcoff] and [len] do not designate a valid\n    range of [b]. "]
val blit : t -> int -> bytes -> int -> int -> unit[@@ocaml.doc
                                                    " [Buffer.blit src srcoff dst dstoff len] copies [len] characters from\n   the current contents of the buffer [src], starting at offset [srcoff]\n   to [dst], starting at character [dstoff].\n\n   Raise [Invalid_argument] if [srcoff] and [len] do not designate a valid\n   range of [src], or if [dstoff] and [len] do not designate a valid\n   range of [dst].\n   @since 3.11.2\n"]
val nth : t -> int -> char[@@ocaml.doc
                            " Get the n-th character of the buffer. Raise [Invalid_argument] if\n    index out of bounds "]
val length : t -> int[@@ocaml.doc
                       " Return the number of characters currently contained in the buffer. "]
val clear : t -> unit[@@ocaml.doc " Empty the buffer. "]
val reset : t -> unit[@@ocaml.doc
                       " Empty the buffer and deallocate the internal byte sequence holding the\n   buffer contents, replacing it with the initial internal byte sequence\n   of length [n] that was allocated by {!Buffer.create} [n].\n   For long-lived buffers that may have grown a lot, [reset] allows\n   faster reclamation of the space used by the buffer. "]
val add_char : t -> char -> unit[@@ocaml.doc
                                  " [add_char b c] appends the character [c] at the end of buffer [b]. "]
val add_utf_8_uchar : t -> Uchar.t -> unit[@@ocaml.doc
                                            " [add_utf_8_uchar b u] appends the {{:https://tools.ietf.org/html/rfc3629}\n    UTF-8} encoding of [u] at the end of buffer [b].\n\n    @since 4.06.0 "]
val add_utf_16le_uchar : t -> Uchar.t -> unit[@@ocaml.doc
                                               " [add_utf_16le_uchar b u] appends the\n    {{:https://tools.ietf.org/html/rfc2781}UTF-16LE} encoding of [u]\n    at the end of buffer [b].\n\n    @since 4.06.0 "]
val add_utf_16be_uchar : t -> Uchar.t -> unit[@@ocaml.doc
                                               " [add_utf_16be_uchar b u] appends the\n    {{:https://tools.ietf.org/html/rfc2781}UTF-16BE} encoding of [u]\n    at the end of buffer [b].\n\n    @since 4.06.0 "]
val add_string : t -> string -> unit[@@ocaml.doc
                                      " [add_string b s] appends the string [s] at the end of buffer [b]. "]
val add_bytes : t -> bytes -> unit[@@ocaml.doc
                                    " [add_bytes b s] appends the byte sequence [s] at the end of buffer [b].\n    @since 4.02 "]
val add_substring : t -> string -> int -> int -> unit[@@ocaml.doc
                                                       " [add_substring b s ofs len] takes [len] characters from offset\n   [ofs] in string [s] and appends them at the end of buffer [b]. "]
val add_subbytes : t -> bytes -> int -> int -> unit[@@ocaml.doc
                                                     " [add_subbytes b s ofs len] takes [len] characters from offset\n    [ofs] in byte sequence [s] and appends them at the end of buffer [b].\n    @since 4.02 "]
val add_substitute : t -> (string -> string) -> string -> unit[@@ocaml.doc
                                                                " [add_substitute b f s] appends the string pattern [s] at the end\n   of buffer [b] with substitution.\n   The substitution process looks for variables into\n   the pattern and substitutes each variable name by its value, as\n   obtained by applying the mapping [f] to the variable name. Inside the\n   string pattern, a variable name immediately follows a non-escaped\n   [$] character and is one of the following:\n   - a non empty sequence of alphanumeric or [_] characters,\n   - an arbitrary sequence of characters enclosed by a pair of\n   matching parentheses or curly brackets.\n   An escaped [$] character is a [$] that immediately follows a backslash\n   character; it then stands for a plain [$].\n   Raise [Not_found] if the closing character of a parenthesized variable\n   cannot be found. "]
val add_buffer : t -> t -> unit[@@ocaml.doc
                                 " [add_buffer b1 b2] appends the current contents of buffer [b2]\n   at the end of buffer [b1].  [b2] is not modified. "]
val add_channel : t -> in_channel -> int -> unit[@@ocaml.doc
                                                  " [add_channel b ic n] reads at most [n] characters from the\n   input channel [ic] and stores them at the end of buffer [b].\n   Raise [End_of_file] if the channel contains fewer than [n]\n   characters. In this case, the characters are still added to\n   the buffer, so as to avoid loss of data. "]
val output_buffer : out_channel -> t -> unit[@@ocaml.doc
                                              " [output_buffer oc b] writes the current contents of buffer [b]\n   on the output channel [oc]. "]
val truncate : t -> int -> unit[@@ocaml.doc
                                 " [truncate b len] truncates the length of [b] to [len]\n  Note: the internal byte sequence is not shortened.\n  Raise [Invalid_argument] if [len < 0] or [len > length b].\n  @since 4.05.0 "]
[@@@ocaml.text " {6 Iterators} "]
val to_seq : t -> char Seq.t[@@ocaml.doc
                              " Iterate on the buffer, in increasing order.\n    Modification of the buffer during iteration is undefined behavior.\n    @since 4.07 "]
val to_seqi : t -> (int * char) Seq.t[@@ocaml.doc
                                       " Iterate on the buffer, in increasing order, yielding indices along chars.\n    Modification of the buffer during iteration is undefined behavior.\n    @since 4.07 "]
val add_seq : t -> char Seq.t -> unit[@@ocaml.doc
                                       " Add chars to the buffer\n    @since 4.07 "]
val of_seq : char Seq.t -> t[@@ocaml.doc
                              " Create a buffer from the generator\n    @since 4.07 "]

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.text
  " Extensible buffers.\n\n   This module implements buffers that automatically expand\n   as necessary.  It provides accumulative concatenation of strings\n   in quasi-linear time (instead of quadratic time when strings are\n   concatenated pairwise).\n"]

type t[@@ocaml.doc " The abstract type of buffers. "]
  

val create : int -> t[@@ocaml.doc
                       " [create n] returns a fresh buffer, initially empty.\n   The [n] parameter is the initial size of the internal byte sequence\n   that holds the buffer contents. That byte sequence is automatically\n   reallocated when more than [n] characters are stored in the buffer,\n   but shrinks back to [n] characters when [reset] is called.\n   For best performance, [n] should be of the same order of magnitude\n   as the number of characters that are expected to be stored in\n   the buffer (for instance, 80 for a buffer that holds one output\n   line).  Nothing bad will happen if the buffer grows beyond that\n   limit, however. In doubt, take [n = 16] for instance.\n   If [n] is not between 1 and {!Sys.max_string_length}, it will\n   be clipped to that interval. "]


val contents : t -> string[@@ocaml.doc
                            " Return a copy of the current contents of the buffer.\n    The buffer itself is unchanged. "]


val to_bytes : t -> bytes[@@ocaml.doc
                           " Return a copy of the current contents of the buffer.\n    The buffer itself is unchanged.\n    @since 4.02 "]


val sub : t -> int -> int -> string[@@ocaml.doc
                                     " [Buffer.sub b off len] returns a copy of [len] bytes from the\n    current contents of the buffer [b], starting at offset [off].\n\n    Raise [Invalid_argument] if [srcoff] and [len] do not designate a valid\n    range of [b]. "]


val blit : t -> int -> bytes -> int -> int -> unit[@@ocaml.doc
                                                    " [Buffer.blit src srcoff dst dstoff len] copies [len] characters from\n   the current contents of the buffer [src], starting at offset [srcoff]\n   to [dst], starting at character [dstoff].\n\n   Raise [Invalid_argument] if [srcoff] and [len] do not designate a valid\n   range of [src], or if [dstoff] and [len] do not designate a valid\n   range of [dst].\n   @since 3.11.2\n"]


val nth : t -> int -> char[@@ocaml.doc
                            " Get the n-th character of the buffer. Raise [Invalid_argument] if\n    index out of bounds "]


val length : t -> int[@@ocaml.doc
                       " Return the number of characters currently contained in the buffer. "]


val clear : t -> unit[@@ocaml.doc " Empty the buffer. "]


val reset : t -> unit[@@ocaml.doc
                       " Empty the buffer and deallocate the internal byte sequence holding the\n   buffer contents, replacing it with the initial internal byte sequence\n   of length [n] that was allocated by {!Buffer.create} [n].\n   For long-lived buffers that may have grown a lot, [reset] allows\n   faster reclamation of the space used by the buffer. "]


val add_char : t -> char -> unit[@@ocaml.doc
                                  " [add_char b c] appends the character [c] at the end of buffer [b]. "]


val add_utf_8_uchar : t -> Uchar.t -> unit[@@ocaml.doc
                                            " [add_utf_8_uchar b u] appends the {{:https://tools.ietf.org/html/rfc3629}\n    UTF-8} encoding of [u] at the end of buffer [b].\n\n    @since 4.06.0 "]


val add_utf_16le_uchar : t -> Uchar.t -> unit[@@ocaml.doc
                                               " [add_utf_16le_uchar b u] appends the\n    {{:https://tools.ietf.org/html/rfc2781}UTF-16LE} encoding of [u]\n    at the end of buffer [b].\n\n    @since 4.06.0 "]


val add_utf_16be_uchar : t -> Uchar.t -> unit[@@ocaml.doc
                                               " [add_utf_16be_uchar b u] appends the\n    {{:https://tools.ietf.org/html/rfc2781}UTF-16BE} encoding of [u]\n    at the end of buffer [b].\n\n    @since 4.06.0 "]


val add_string : t -> string -> unit[@@ocaml.doc
                                      " [add_string b s] appends the string [s] at the end of buffer [b]. "]


val add_bytes : t -> bytes -> unit[@@ocaml.doc
                                    " [add_bytes b s] appends the byte sequence [s] at the end of buffer [b].\n    @since 4.02 "]


val add_substring : t -> string -> int -> int -> unit[@@ocaml.doc
                                                       " [add_substring b s ofs len] takes [len] characters from offset\n   [ofs] in string [s] and appends them at the end of buffer [b]. "]


val add_subbytes : t -> bytes -> int -> int -> unit[@@ocaml.doc
                                                     " [add_subbytes b s ofs len] takes [len] characters from offset\n    [ofs] in byte sequence [s] and appends them at the end of buffer [b].\n    @since 4.02 "]


val add_substitute : t -> (string -> string) -> string -> unit[@@ocaml.doc
                                                                " [add_substitute b f s] appends the string pattern [s] at the end\n   of buffer [b] with substitution.\n   The substitution process looks for variables into\n   the pattern and substitutes each variable name by its value, as\n   obtained by applying the mapping [f] to the variable name. Inside the\n   string pattern, a variable name immediately follows a non-escaped\n   [$] character and is one of the following:\n   - a non empty sequence of alphanumeric or [_] characters,\n   - an arbitrary sequence of characters enclosed by a pair of\n   matching parentheses or curly brackets.\n   An escaped [$] character is a [$] that immediately follows a backslash\n   character; it then stands for a plain [$].\n   Raise [Not_found] if the closing character of a parenthesized variable\n   cannot be found. "]


val add_buffer : t -> t -> unit[@@ocaml.doc
                                 " [add_buffer b1 b2] appends the current contents of buffer [b2]\n   at the end of buffer [b1].  [b2] is not modified. "]


val add_channel : t -> in_channel -> int -> unit[@@ocaml.doc
                                                  " [add_channel b ic n] reads at most [n] characters from the\n   input channel [ic] and stores them at the end of buffer [b].\n   Raise [End_of_file] if the channel contains fewer than [n]\n   characters. In this case, the characters are still added to\n   the buffer, so as to avoid loss of data. "]


val output_buffer : out_channel -> t -> unit[@@ocaml.doc
                                              " [output_buffer oc b] writes the current contents of buffer [b]\n   on the output channel [oc]. "]


val truncate : t -> int -> unit[@@ocaml.doc
                                 " [truncate b len] truncates the length of [b] to [len]\n  Note: the internal byte sequence is not shortened.\n  Raise [Invalid_argument] if [len < 0] or [len > length b].\n  @since 4.05.0 "]


[@@@ocaml.text " {6 Iterators} "]

val to_seq : t -> char Seq.t[@@ocaml.doc
                              " Iterate on the buffer, in increasing order.\n    Modification of the buffer during iteration is undefined behavior.\n    @since 4.07 "]


val to_seqi : t -> (int * char) Seq.t[@@ocaml.doc
                                       " Iterate on the buffer, in increasing order, yielding indices along chars.\n    Modification of the buffer during iteration is undefined behavior.\n    @since 4.07 "]


val add_seq : t -> char Seq.t -> unit[@@ocaml.doc
                                       " Add chars to the buffer\n    @since 4.07 "]


val of_seq : char Seq.t -> t[@@ocaml.doc
                              " Create a buffer from the generator\n    @since 4.07 "]


*******************************
********* Typed GOSPEL ********
*******************************
module buffer.mli

  Namespace: buffer.mli
    Type symbols
       t
      
    Logic Symbols
      
    Exception Symbols
      
    Namespaces
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    [@@@ocaml.text
      " Extensible buffers.\n\n   This module implements buffers that automatically expand\n   as necessary.  It provides accumulative concatenation of strings\n   in quasi-linear time (instead of quadratic time when strings are\n   concatenated pairwise).\n"]
    
    type t
    
    
    val create :
    int -> t[@@ocaml.doc
              " [create n] returns a fresh buffer, initially empty.\n   The [n] parameter is the initial size of the internal byte sequence\n   that holds the buffer contents. That byte sequence is automatically\n   reallocated when more than [n] characters are stored in the buffer,\n   but shrinks back to [n] characters when [reset] is called.\n   For best performance, [n] should be of the same order of magnitude\n   as the number of characters that are expected to be stored in\n   the buffer (for instance, 80 for a buffer that holds one output\n   line).  Nothing bad will happen if the buffer grows beyond that\n   limit, however. In doubt, take [n = 16] for instance.\n   If [n] is not between 1 and {!Sys.max_string_length}, it will\n   be clipped to that interval. "]
    
    
    val contents :
    t -> string[@@ocaml.doc
                 " Return a copy of the current contents of the buffer.\n    The buffer itself is unchanged. "]
    
    
    val to_bytes :
    t -> bytes[@@ocaml.doc
                " Return a copy of the current contents of the buffer.\n    The buffer itself is unchanged.\n    @since 4.02 "]
    
    
    val sub :
    t -> int -> int -> string[@@ocaml.doc
                               " [Buffer.sub b off len] returns a copy of [len] bytes from the\n    current contents of the buffer [b], starting at offset [off].\n\n    Raise [Invalid_argument] if [srcoff] and [len] do not designate a valid\n    range of [b]. "]
    
    
    val blit :
    t -> int -> bytes -> int -> int -> unit[@@ocaml.doc
                                             " [Buffer.blit src srcoff dst dstoff len] copies [len] characters from\n   the current contents of the buffer [src], starting at offset [srcoff]\n   to [dst], starting at character [dstoff].\n\n   Raise [Invalid_argument] if [srcoff] and [len] do not designate a valid\n   range of [src], or if [dstoff] and [len] do not designate a valid\n   range of [dst].\n   @since 3.11.2\n"]
    
    
    val nth :
    t -> int -> char[@@ocaml.doc
                      " Get the n-th character of the buffer. Raise [Invalid_argument] if\n    index out of bounds "]
    
    
    val length :
    t -> int[@@ocaml.doc
              " Return the number of characters currently contained in the buffer. "]
    
    
    val clear : t -> unit[@@ocaml.doc " Empty the buffer. "]
    
    
    val reset :
    t -> unit[@@ocaml.doc
               " Empty the buffer and deallocate the internal byte sequence holding the\n   buffer contents, replacing it with the initial internal byte sequence\n   of length [n] that was allocated by {!Buffer.create} [n].\n   For long-lived buffers that may have grown a lot, [reset] allows\n   faster reclamation of the space used by the buffer. "]
    
    
    val add_char :
    t -> char -> unit[@@ocaml.doc
                       " [add_char b c] appends the character [c] at the end of buffer [b]. "]
    
    
    val add_utf_8_uchar :
    t -> Uchar.t -> unit[@@ocaml.doc
                          " [add_utf_8_uchar b u] appends the {{:https://tools.ietf.org/html/rfc3629}\n    UTF-8} encoding of [u] at the end of buffer [b].\n\n    @since 4.06.0 "]
    
    
    val add_utf_16le_uchar :
    t -> Uchar.t -> unit[@@ocaml.doc
                          " [add_utf_16le_uchar b u] appends the\n    {{:https://tools.ietf.org/html/rfc2781}UTF-16LE} encoding of [u]\n    at the end of buffer [b].\n\n    @since 4.06.0 "]
    
    
    val add_utf_16be_uchar :
    t -> Uchar.t -> unit[@@ocaml.doc
                          " [add_utf_16be_uchar b u] appends the\n    {{:https://tools.ietf.org/html/rfc2781}UTF-16BE} encoding of [u]\n    at the end of buffer [b].\n\n    @since 4.06.0 "]
    
    
    val add_string :
    t -> string -> unit[@@ocaml.doc
                         " [add_string b s] appends the string [s] at the end of buffer [b]. "]
    
    
    val add_bytes :
    t -> bytes -> unit[@@ocaml.doc
                        " [add_bytes b s] appends the byte sequence [s] at the end of buffer [b].\n    @since 4.02 "]
    
    
    val add_substring :
    t -> string -> int -> int -> unit[@@ocaml.doc
                                       " [add_substring b s ofs len] takes [len] characters from offset\n   [ofs] in string [s] and appends them at the end of buffer [b]. "]
    
    
    val add_subbytes :
    t -> bytes -> int -> int -> unit[@@ocaml.doc
                                      " [add_subbytes b s ofs len] takes [len] characters from offset\n    [ofs] in byte sequence [s] and appends them at the end of buffer [b].\n    @since 4.02 "]
    
    
    val add_substitute :
    t -> (string -> string) -> string -> unit[@@ocaml.doc
                                               " [add_substitute b f s] appends the string pattern [s] at the end\n   of buffer [b] with substitution.\n   The substitution process looks for variables into\n   the pattern and substitutes each variable name by its value, as\n   obtained by applying the mapping [f] to the variable name. Inside the\n   string pattern, a variable name immediately follows a non-escaped\n   [$] character and is one of the following:\n   - a non empty sequence of alphanumeric or [_] characters,\n   - an arbitrary sequence of characters enclosed by a pair of\n   matching parentheses or curly brackets.\n   An escaped [$] character is a [$] that immediately follows a backslash\n   character; it then stands for a plain [$].\n   Raise [Not_found] if the closing character of a parenthesized variable\n   cannot be found. "]
    
    
    val add_buffer :
    t -> t -> unit[@@ocaml.doc
                    " [add_buffer b1 b2] appends the current contents of buffer [b2]\n   at the end of buffer [b1].  [b2] is not modified. "]
    
    
    val add_channel :
    t -> in_channel -> int -> unit[@@ocaml.doc
                                    " [add_channel b ic n] reads at most [n] characters from the\n   input channel [ic] and stores them at the end of buffer [b].\n   Raise [End_of_file] if the channel contains fewer than [n]\n   characters. In this case, the characters are still added to\n   the buffer, so as to avoid loss of data. "]
    
    
    val output_buffer :
    out_channel -> t -> unit[@@ocaml.doc
                              " [output_buffer oc b] writes the current contents of buffer [b]\n   on the output channel [oc]. "]
    
    
    val truncate :
    t -> int -> unit[@@ocaml.doc
                      " [truncate b len] truncates the length of [b] to [len]\n  Note: the internal byte sequence is not shortened.\n  Raise [Invalid_argument] if [len < 0] or [len > length b].\n  @since 4.05.0 "]
    
    
    [@@@ocaml.text " {6 Iterators} "]
    
    val to_seq :
    t -> char Seq.t[@@ocaml.doc
                     " Iterate on the buffer, in increasing order.\n    Modification of the buffer during iteration is undefined behavior.\n    @since 4.07 "]
    
    
    val to_seqi :
    t -> (int * char) Seq.t[@@ocaml.doc
                             " Iterate on the buffer, in increasing order, yielding indices along chars.\n    Modification of the buffer during iteration is undefined behavior.\n    @since 4.07 "]
    
    
    val add_seq :
    t -> char Seq.t -> unit[@@ocaml.doc
                             " Add chars to the buffer\n    @since 4.07 "]
    
    
    val of_seq :
    char Seq.t -> t[@@ocaml.doc
                     " Create a buffer from the generator\n    @since 4.07 "]
    


*** OK ***

