
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.text " Pseudo-random number generators (PRNG). "]
[@@@ocaml.text " {1 Basic functions} "]
val init : int -> unit[@@ocaml.doc
                        " Initialize the generator, using the argument as a seed.\n     The same seed will always yield the same sequence of numbers. "]
val full_init : int array -> unit[@@ocaml.doc
                                   " Same as {!Random.init} but takes more data as seed. "]
val self_init : unit -> unit[@@ocaml.doc
                              " Initialize the generator with a random seed chosen\n   in a system-dependent way.  If [/dev/urandom] is available on\n   the host machine, it is used to provide a highly random initial\n   seed.  Otherwise, a less random seed is computed from system\n   parameters (current time, process IDs). "]
val bits : unit -> int[@@ocaml.doc
                        " Return 30 random bits in a nonnegative integer.\n    @before 3.12.0 used a different algorithm (affects all the following\n                   functions)\n"]
val int : int -> int[@@ocaml.doc
                      " [Random.int bound] returns a random integer between 0 (inclusive)\n     and [bound] (exclusive).  [bound] must be greater than 0 and less\n     than 2{^30}. "]
val int32 : Int32.t -> Int32.t[@@ocaml.doc
                                " [Random.int32 bound] returns a random integer between 0 (inclusive)\n     and [bound] (exclusive).  [bound] must be greater than 0. "]
val nativeint : Nativeint.t -> Nativeint.t[@@ocaml.doc
                                            " [Random.nativeint bound] returns a random integer between 0 (inclusive)\n     and [bound] (exclusive).  [bound] must be greater than 0. "]
val int64 : Int64.t -> Int64.t[@@ocaml.doc
                                " [Random.int64 bound] returns a random integer between 0 (inclusive)\n     and [bound] (exclusive).  [bound] must be greater than 0. "]
val float : float -> float[@@ocaml.doc
                            " [Random.float bound] returns a random floating-point number\n   between 0 and [bound] (inclusive).  If [bound] is\n   negative, the result is negative or zero.  If [bound] is 0,\n   the result is 0. "]
val bool : unit -> bool[@@ocaml.doc
                         " [Random.bool ()] returns [true] or [false] with probability 0.5 each. "]
[@@@ocaml.text " {1 Advanced functions} "]
[@@@ocaml.text
  " The functions from module {!State} manipulate the current state\n    of the random generator explicitly.\n    This allows using one or several deterministic PRNGs,\n    even in a multi-threaded program, without interference from\n    other parts of the program.\n"]
module State :
sig
  type t[@@ocaml.doc " The type of PRNG states. "]
  val make : int array -> t[@@ocaml.doc
                             " Create a new state and initialize it with the given seed. "]
  val make_self_init : unit -> t[@@ocaml.doc
                                  " Create a new state and initialize it with a system-dependent\n      low-entropy seed. "]
  val copy : t -> t[@@ocaml.doc " Return a copy of the given state. "]
  val bits : t -> int
  val int : t -> int -> int
  val int32 : t -> Int32.t -> Int32.t
  val nativeint : t -> Nativeint.t -> Nativeint.t
  val int64 : t -> Int64.t -> Int64.t
  val float : t -> float -> float
  val bool : t -> bool[@@ocaml.doc
                        " These functions are the same as the basic functions, except that they\n      use (and update) the given PRNG state instead of the default one.\n  "]
end
val get_state : unit -> State.t[@@ocaml.doc
                                 " Return the current state of the generator used by the basic functions. "]
val set_state : State.t -> unit[@@ocaml.doc
                                 " Set the state of the generator used by the basic functions. "]

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.text " Pseudo-random number generators (PRNG). "]

[@@@ocaml.text " {1 Basic functions} "]

val init : int -> unit[@@ocaml.doc
                        " Initialize the generator, using the argument as a seed.\n     The same seed will always yield the same sequence of numbers. "]


val full_init : int array -> unit[@@ocaml.doc
                                   " Same as {!Random.init} but takes more data as seed. "]


val self_init : unit -> unit[@@ocaml.doc
                              " Initialize the generator with a random seed chosen\n   in a system-dependent way.  If [/dev/urandom] is available on\n   the host machine, it is used to provide a highly random initial\n   seed.  Otherwise, a less random seed is computed from system\n   parameters (current time, process IDs). "]


val bits : unit -> int[@@ocaml.doc
                        " Return 30 random bits in a nonnegative integer.\n    @before 3.12.0 used a different algorithm (affects all the following\n                   functions)\n"]


val int : int -> int[@@ocaml.doc
                      " [Random.int bound] returns a random integer between 0 (inclusive)\n     and [bound] (exclusive).  [bound] must be greater than 0 and less\n     than 2{^30}. "]


val int32 : Int32.t -> Int32.t[@@ocaml.doc
                                " [Random.int32 bound] returns a random integer between 0 (inclusive)\n     and [bound] (exclusive).  [bound] must be greater than 0. "]


val nativeint : Nativeint.t -> Nativeint.t[@@ocaml.doc
                                            " [Random.nativeint bound] returns a random integer between 0 (inclusive)\n     and [bound] (exclusive).  [bound] must be greater than 0. "]


val int64 : Int64.t -> Int64.t[@@ocaml.doc
                                " [Random.int64 bound] returns a random integer between 0 (inclusive)\n     and [bound] (exclusive).  [bound] must be greater than 0. "]


val float : float -> float[@@ocaml.doc
                            " [Random.float bound] returns a random floating-point number\n   between 0 and [bound] (inclusive).  If [bound] is\n   negative, the result is negative or zero.  If [bound] is 0,\n   the result is 0. "]


val bool : unit -> bool[@@ocaml.doc
                         " [Random.bool ()] returns [true] or [false] with probability 0.5 each. "]


[@@@ocaml.text " {1 Advanced functions} "]

[@@@ocaml.text
  " The functions from module {!State} manipulate the current state\n    of the random generator explicitly.\n    This allows using one or several deterministic PRNGs,\n    even in a multi-threaded program, without interference from\n    other parts of the program.\n"]

module State :
sig
  type t[@@ocaml.doc " The type of PRNG states. "]
    
  val make : int array -> t[@@ocaml.doc
                             " Create a new state and initialize it with the given seed. "]
  
  val make_self_init : unit -> t[@@ocaml.doc
                                  " Create a new state and initialize it with a system-dependent\n      low-entropy seed. "]
  
  val copy : t -> t[@@ocaml.doc " Return a copy of the given state. "]
  
  val bits : t -> int
  
  val int : t -> int -> int
  
  val int32 : t -> Int32.t -> Int32.t
  
  val nativeint : t -> Nativeint.t -> Nativeint.t
  
  val int64 : t -> Int64.t -> Int64.t
  
  val float : t -> float -> float
  
  val bool : t -> bool[@@ocaml.doc
                        " These functions are the same as the basic functions, except that they\n      use (and update) the given PRNG state instead of the default one.\n  "]
  
end

val get_state : unit -> State.t[@@ocaml.doc
                                 " Return the current state of the generator used by the basic functions. "]


val set_state : State.t -> unit[@@ocaml.doc
                                 " Set the state of the generator used by the basic functions. "]


*******************************
********* Typed GOSPEL ********
*******************************
module random.mli

  Namespace: random.mli
    Type symbols
      
    Logic Symbols
      
    Exception Symbols
      
    Namespaces
      Namespace: State
        Type symbols
           t
          
        Logic Symbols
          
        Exception Symbols
          
        Namespaces
          
        Type Namespaces
          
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    [@@@ocaml.text " Pseudo-random number generators (PRNG). "]
    
    [@@@ocaml.text " {1 Basic functions} "]
    
    val init :
    int -> unit[@@ocaml.doc
                 " Initialize the generator, using the argument as a seed.\n     The same seed will always yield the same sequence of numbers. "]
    
    
    val full_init :
    int array -> unit[@@ocaml.doc
                       " Same as {!Random.init} but takes more data as seed. "]
    
    
    val self_init :
    unit -> unit[@@ocaml.doc
                  " Initialize the generator with a random seed chosen\n   in a system-dependent way.  If [/dev/urandom] is available on\n   the host machine, it is used to provide a highly random initial\n   seed.  Otherwise, a less random seed is computed from system\n   parameters (current time, process IDs). "]
    
    
    val bits :
    unit -> int[@@ocaml.doc
                 " Return 30 random bits in a nonnegative integer.\n    @before 3.12.0 used a different algorithm (affects all the following\n                   functions)\n"]
    
    
    val int :
    int -> int[@@ocaml.doc
                " [Random.int bound] returns a random integer between 0 (inclusive)\n     and [bound] (exclusive).  [bound] must be greater than 0 and less\n     than 2{^30}. "]
    
    
    val int32 :
    Int32.t -> Int32.t[@@ocaml.doc
                        " [Random.int32 bound] returns a random integer between 0 (inclusive)\n     and [bound] (exclusive).  [bound] must be greater than 0. "]
    
    
    val nativeint :
    Nativeint.t -> Nativeint.t[@@ocaml.doc
                                " [Random.nativeint bound] returns a random integer between 0 (inclusive)\n     and [bound] (exclusive).  [bound] must be greater than 0. "]
    
    
    val int64 :
    Int64.t -> Int64.t[@@ocaml.doc
                        " [Random.int64 bound] returns a random integer between 0 (inclusive)\n     and [bound] (exclusive).  [bound] must be greater than 0. "]
    
    
    val float :
    float -> float[@@ocaml.doc
                    " [Random.float bound] returns a random floating-point number\n   between 0 and [bound] (inclusive).  If [bound] is\n   negative, the result is negative or zero.  If [bound] is 0,\n   the result is 0. "]
    
    
    val bool :
    unit -> bool[@@ocaml.doc
                  " [Random.bool ()] returns [true] or [false] with probability 0.5 each. "]
    
    
    [@@@ocaml.text " {1 Advanced functions} "]
    
    [@@@ocaml.text
      " The functions from module {!State} manipulate the current state\n    of the random generator explicitly.\n    This allows using one or several deterministic PRNGs,\n    even in a multi-threaded program, without interference from\n    other parts of the program.\n"]
    
    module State :
    sig
      type t
      
      val make :
      int array -> t[@@ocaml.doc
                      " Create a new state and initialize it with the given seed. "]
      
      val make_self_init :
      unit -> t[@@ocaml.doc
                 " Create a new state and initialize it with a system-dependent\n      low-entropy seed. "]
      
      val copy : t -> t[@@ocaml.doc " Return a copy of the given state. "]
      
      val bits#1 : t -> int
      
      val int#1 : t -> int -> int
      
      val int32#1 : t -> Int32.t -> Int32.t
      
      val nativeint#1 : t -> Nativeint.t -> Nativeint.t
      
      val int64#1 : t -> Int64.t -> Int64.t
      
      val float#1 : t -> float -> float
      
      val bool#1 :
      t -> bool[@@ocaml.doc
                 " These functions are the same as the basic functions, except that they\n      use (and update) the given PRNG state instead of the default one.\n  "]
      
    end
    
    val get_state :
    unit -> State.t[@@ocaml.doc
                     " Return the current state of the generator used by the basic functions. "]
    
    
    val set_state :
    State.t -> unit[@@ocaml.doc
                     " Set the state of the generator used by the basic functions. "]
    


*** OK ***

