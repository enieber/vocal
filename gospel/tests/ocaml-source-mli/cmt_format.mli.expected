
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.text " cmt and cmti files format. "]
[@@@ocaml.text
  " The layout of a cmt file is as follows:\n      <cmt> := \\{<cmi>\\} <cmt magic> \\{cmt infos\\} \\{<source info>\\}\n    where <cmi> is the cmi file format:\n      <cmi> := <cmi magic> <cmi info>.\n    More precisely, the optional <cmi> part must be present if and only if\n    the file is:\n    - a cmti, or\n    - a cmt, for a ml file which has no corresponding mli (hence no\n    corresponding cmti).\n\n    Thus, we provide a common reading function for cmi and cmt(i)\n    files which returns an option for each of the three parts: cmi\n    info, cmt info, source info. "]
open Typedtree
type binary_annots =
  | Packed of Types.signature * string list 
  | Implementation of structure 
  | Interface of signature 
  | Partial_implementation of binary_part array 
  | Partial_interface of binary_part array 
and binary_part =
  | Partial_structure of structure 
  | Partial_structure_item of structure_item 
  | Partial_expression of expression 
  | Partial_pattern of pattern 
  | Partial_class_expr of class_expr 
  | Partial_signature of signature 
  | Partial_signature_item of signature_item 
  | Partial_module_type of module_type 
type cmt_infos =
  {
  cmt_modname: string ;
  cmt_annots: binary_annots ;
  cmt_value_dependencies:
    (Types.value_description * Types.value_description) list ;
  cmt_comments: (string * Location.t) list ;
  cmt_args: string array ;
  cmt_sourcefile: string option ;
  cmt_builddir: string ;
  cmt_loadpath: string list ;
  cmt_source_digest: string option ;
  cmt_initial_env: Env.t ;
  cmt_imports: (string * Digest.t option) list ;
  cmt_interface_digest: Digest.t option ;
  cmt_use_summaries: bool }
type error =
  | Not_a_typedtree of string 
exception Error of error 
val read : string -> (Cmi_format.cmi_infos option * cmt_infos option)
[@@ocaml.doc
  " [read filename] opens filename, and extract both the cmi_infos, if\n    it exists, and the cmt_infos, if it exists. Thus, it can be used\n    with .cmi, .cmt and .cmti files.\n\n    .cmti files always contain a cmi_infos at the beginning. .cmt files\n    only contain a cmi_infos at the beginning if there is no associated\n    .cmti file.\n"]
val read_cmt : string -> cmt_infos
val read_cmi : string -> Cmi_format.cmi_infos
val save_cmt :
  string ->
    string ->
      binary_annots ->
        string option -> Env.t -> Cmi_format.cmi_infos option -> unit
[@@ocaml.doc
  " [save_cmt filename modname binary_annots sourcefile initial_env cmi]\n    writes a cmt(i) file.  "]
val read_magic_number : in_channel -> string
val clear : unit -> unit
val add_saved_type : binary_part -> unit
val get_saved_types : unit -> binary_part list
val set_saved_types : binary_part list -> unit
val record_value_dependency :
  Types.value_description -> Types.value_description -> unit

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.text " cmt and cmti files format. "]

[@@@ocaml.text
  " The layout of a cmt file is as follows:\n      <cmt> := \\{<cmi>\\} <cmt magic> \\{cmt infos\\} \\{<source info>\\}\n    where <cmi> is the cmi file format:\n      <cmi> := <cmi magic> <cmi info>.\n    More precisely, the optional <cmi> part must be present if and only if\n    the file is:\n    - a cmti, or\n    - a cmt, for a ml file which has no corresponding mli (hence no\n    corresponding cmti).\n\n    Thus, we provide a common reading function for cmi and cmt(i)\n    files which returns an option for each of the three parts: cmi\n    info, cmt info, source info. "]

open Typedtree

type binary_annots =
| Packed of Types.signature * string list 
| Implementation of structure 
| Interface of signature 
| Partial_implementation of binary_part array 
| Partial_interface of binary_part array 
  
and binary_part =
| Partial_structure of structure 
| Partial_structure_item of structure_item 
| Partial_expression of expression 
| Partial_pattern of pattern 
| Partial_class_expr of class_expr 
| Partial_signature of signature 
| Partial_signature_item of signature_item 
| Partial_module_type of module_type 
  

type cmt_infos =
{
cmt_modname: string ;
cmt_annots: binary_annots ;
cmt_value_dependencies:
  (Types.value_description * Types.value_description) list ;
cmt_comments: (string * Location.t) list ;
cmt_args: string array ;
cmt_sourcefile: string option ;
cmt_builddir: string ;
cmt_loadpath: string list ;
cmt_source_digest: string option ;
cmt_initial_env: Env.t ;
cmt_imports: (string * Digest.t option) list ;
cmt_interface_digest: Digest.t option ;
cmt_use_summaries: bool }
  

type error =
| Not_a_typedtree of string 
  

exception Error of error 

val read : string -> (Cmi_format.cmi_infos option * cmt_infos option)
[@@ocaml.doc
  " [read filename] opens filename, and extract both the cmi_infos, if\n    it exists, and the cmt_infos, if it exists. Thus, it can be used\n    with .cmi, .cmt and .cmti files.\n\n    .cmti files always contain a cmi_infos at the beginning. .cmt files\n    only contain a cmi_infos at the beginning if there is no associated\n    .cmti file.\n"]


val read_cmt : string -> cmt_infos


val read_cmi : string -> Cmi_format.cmi_infos


val save_cmt :
  string ->
    string ->
      binary_annots ->
        string option -> Env.t -> Cmi_format.cmi_infos option -> unit
[@@ocaml.doc
  " [save_cmt filename modname binary_annots sourcefile initial_env cmi]\n    writes a cmt(i) file.  "]


val read_magic_number : in_channel -> string


val clear : unit -> unit


val add_saved_type : binary_part -> unit


val get_saved_types : unit -> binary_part list


val set_saved_types : binary_part list -> unit


val record_value_dependency :
  Types.value_description -> Types.value_description -> unit

File "./asttypes.mli", line 28, characters 19-24:
Error: Symbol int32 not found
