
*******************************
********** Parsed file ********
*******************************
val input_line_opt : in_channel -> string option
module Char : sig include module type of Char val is_blank : char -> bool end
module Filename :
sig
  include module type of Filename
  val path_sep : string
  val maybe_quote : string -> string
  val make_filename : string -> string -> string
  val make_path : string list -> string
  val mkexe : string -> string
end
module List :
sig
  include module type of List
  val concatmap : ('a -> 'b list) -> 'a list -> 'b list
end
module String :
sig
  include module type of Misc.Stdlib.String
  val words : string -> string list
end
module Sys :
sig
  include module type of Sys
  val file_is_empty : string -> bool
  val run_system_command : string -> unit
  val make_directory : string -> unit
  val string_of_file : string -> string
  val copy_file : string -> string -> unit
  val force_remove : string -> unit
  val has_symlink : unit -> bool
  val with_chdir : string -> (unit -> 'a) -> 'a
  val getenv_with_default_value : string -> string -> string
  val safe_getenv : string -> string
end

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

val input_line_opt : in_channel -> string option


module Char : sig include module type of Char val is_blank : char -> bool
                 end

module Filename :
sig
  include module type of Filename
  val path_sep : string
  
  val maybe_quote : string -> string
  
  val make_filename : string -> string -> string
  
  val make_path : string list -> string
  
  val mkexe : string -> string
  
end

module List :
sig
  include module type of List
  val concatmap : ('a -> 'b list) -> 'a list -> 'b list
  
end

module String :
sig
  include module type of Misc.Stdlib.String
  val words : string -> string list
  
end

module Sys :
sig
  include module type of Sys
  val file_is_empty : string -> bool
  
  val run_system_command : string -> unit
  
  val make_directory : string -> unit
  
  val string_of_file : string -> string
  
  val copy_file : string -> string -> unit
  
  val force_remove : string -> unit
  
  val has_symlink : unit -> bool
  
  val with_chdir : string -> (unit -> 'a) -> 'a
  
  val getenv_with_default_value : string -> string -> string
  
  val safe_getenv : string -> string
  
end

*******************************
********* Typed GOSPEL ********
*******************************
module ocamltest_stdlib.mli

  Namespace: ocamltest_stdlib.mli
    Type symbols
      
    Logic Symbols
      
    Exception Symbols
      
    Namespaces
      Namespace: Char
        Type symbols
          
        Logic Symbols
          
        Exception Symbols
          
        Namespaces
          
        Type Namespaces
          
      Namespace: Filename
        Type symbols
          
        Logic Symbols
          
        Exception Symbols
          
        Namespaces
          
        Type Namespaces
          
      Namespace: List
        Type symbols
          
        Logic Symbols
          
        Exception Symbols
          
        Namespaces
          
        Type Namespaces
          
      Namespace: String
        Type symbols
          
        Logic Symbols
          
        Exception Symbols
          
        Namespaces
          
        Type Namespaces
          
      Namespace: Sys
        Type symbols
          
        Logic Symbols
          
        Exception Symbols
          
        Namespaces
          
        Type Namespaces
          
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    val input_line_opt : in_channel -> string option
    
    
    module Char :
    sig
      include module type of Char
      val is_blank : char -> bool
      
    end
    
    module Filename :
    sig
      include module type of Filename
      val path_sep : string
      
      val maybe_quote : string -> string
      
      val make_filename : string -> string -> string
      
      val make_path : string list -> string
      
      val mkexe : string -> string
      
    end
    
    module List :
    sig
      include module type of List
      val concatmap : ('a -> 'b list) -> 'a list -> 'b list
      
    end
    
    module String :
    sig
      include module type of Misc.Stdlib.String
      val words : string -> string list
      
    end
    
    module Sys :
    sig
      include module type of Sys
      val file_is_empty : string -> bool
      
      val run_system_command : string -> unit
      
      val make_directory : string -> unit
      
      val string_of_file : string -> string
      
      val copy_file : string -> string -> unit
      
      val force_remove : string -> unit
      
      val has_symlink : unit -> bool
      
      val with_chdir : string -> (unit -> 'a) -> 'a
      
      val getenv_with_default_value : string -> string -> string
      
      val safe_getenv : string -> string
      
    end


*** OK ***

