
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.text
  " Complex numbers.\n\n    This module provides arithmetic operations on complex numbers.\n    Complex numbers are represented by their real and imaginary parts\n    (cartesian representation).  Each part is represented by a\n    double-precision floating-point number (type [float]).   "]
type t = {
  re: float ;
  im: float }[@@ocaml.doc
               " The type of complex numbers.  [re] is the real part and [im] the\n    imaginary part. "]
val zero : t[@@ocaml.doc " The complex number [0]. "]
val one : t[@@ocaml.doc " The complex number [1]. "]
val i : t[@@ocaml.doc " The complex number [i]. "]
val neg : t -> t[@@ocaml.doc " Unary negation. "]
val conj : t -> t[@@ocaml.doc
                   " Conjugate: given the complex [x + i.y], returns [x - i.y]. "]
val add : t -> t -> t[@@ocaml.doc " Addition "]
val sub : t -> t -> t[@@ocaml.doc " Subtraction "]
val mul : t -> t -> t[@@ocaml.doc " Multiplication "]
val inv : t -> t[@@ocaml.doc " Multiplicative inverse ([1/z]). "]
val div : t -> t -> t[@@ocaml.doc " Division "]
val sqrt : t -> t[@@ocaml.doc
                   " Square root.  The result [x + i.y] is such that [x > 0] or\n    [x = 0] and [y >= 0].\n    This function has a discontinuity along the negative real axis. "]
val norm2 : t -> float[@@ocaml.doc
                        " Norm squared: given [x + i.y], returns [x^2 + y^2]. "]
val norm : t -> float[@@ocaml.doc
                       " Norm: given [x + i.y], returns [sqrt(x^2 + y^2)]. "]
val arg : t -> float[@@ocaml.doc
                      " Argument.  The argument of a complex number is the angle\n    in the complex plane between the positive real axis and a line\n    passing through zero and the number.  This angle ranges from\n    [-pi] to [pi].  This function has a discontinuity along the\n    negative real axis. "]
val polar : float -> float -> t[@@ocaml.doc
                                 " [polar norm arg] returns the complex having norm [norm]\n    and argument [arg]. "]
val exp : t -> t[@@ocaml.doc
                  " Exponentiation.  [exp z] returns [e] to the [z] power. "]
val log : t -> t[@@ocaml.doc " Natural logarithm (in base [e]). "]
val pow : t -> t -> t[@@ocaml.doc
                       " Power function.  [pow z1 z2] returns [z1] to the [z2] power. "]

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.text
  " Complex numbers.\n\n    This module provides arithmetic operations on complex numbers.\n    Complex numbers are represented by their real and imaginary parts\n    (cartesian representation).  Each part is represented by a\n    double-precision floating-point number (type [float]).   "]

type t = {
re: float ;
im: float }[@@ocaml.doc
             " The type of complex numbers.  [re] is the real part and [im] the\n    imaginary part. "]
  

val zero : t[@@ocaml.doc " The complex number [0]. "]


val one : t[@@ocaml.doc " The complex number [1]. "]


val i : t[@@ocaml.doc " The complex number [i]. "]


val neg : t -> t[@@ocaml.doc " Unary negation. "]


val conj : t -> t[@@ocaml.doc
                   " Conjugate: given the complex [x + i.y], returns [x - i.y]. "]


val add : t -> t -> t[@@ocaml.doc " Addition "]


val sub : t -> t -> t[@@ocaml.doc " Subtraction "]


val mul : t -> t -> t[@@ocaml.doc " Multiplication "]


val inv : t -> t[@@ocaml.doc " Multiplicative inverse ([1/z]). "]


val div : t -> t -> t[@@ocaml.doc " Division "]


val sqrt : t -> t[@@ocaml.doc
                   " Square root.  The result [x + i.y] is such that [x > 0] or\n    [x = 0] and [y >= 0].\n    This function has a discontinuity along the negative real axis. "]


val norm2 : t -> float[@@ocaml.doc
                        " Norm squared: given [x + i.y], returns [x^2 + y^2]. "]


val norm : t -> float[@@ocaml.doc
                       " Norm: given [x + i.y], returns [sqrt(x^2 + y^2)]. "]


val arg : t -> float[@@ocaml.doc
                      " Argument.  The argument of a complex number is the angle\n    in the complex plane between the positive real axis and a line\n    passing through zero and the number.  This angle ranges from\n    [-pi] to [pi].  This function has a discontinuity along the\n    negative real axis. "]


val polar : float -> float -> t[@@ocaml.doc
                                 " [polar norm arg] returns the complex having norm [norm]\n    and argument [arg]. "]


val exp : t -> t[@@ocaml.doc
                  " Exponentiation.  [exp z] returns [e] to the [z] power. "]


val log : t -> t[@@ocaml.doc " Natural logarithm (in base [e]). "]


val pow : t -> t -> t[@@ocaml.doc
                       " Power function.  [pow z1 z2] returns [z1] to the [z2] power. "]


*******************************
********* Typed GOSPEL ********
*******************************
module complex.mli

  Namespace: complex.mli
    Type symbols
       t
      
    Logic Symbols
      function constr#t (_:float) (_:float) : t
      function im (_:t) : float
      function re (_:t) : float
      
    Exception Symbols
      
    Namespaces
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    [@@@ocaml.text
      " Complex numbers.\n\n    This module provides arithmetic operations on complex numbers.\n    Complex numbers are represented by their real and imaginary parts\n    (cartesian representation).  Each part is represented by a\n    double-precision floating-point number (type [float]).   "]
    
    type t = {re:float; im:float}
          function constr#t (_:float) (_:float) : t
            function re (_:t) : float
            function im (_:t) : float
    
    
    val zero : t[@@ocaml.doc " The complex number [0]. "]
    
    
    val one : t[@@ocaml.doc " The complex number [1]. "]
    
    
    val i : t[@@ocaml.doc " The complex number [i]. "]
    
    
    val neg : t -> t[@@ocaml.doc " Unary negation. "]
    
    
    val conj :
    t -> t[@@ocaml.doc
            " Conjugate: given the complex [x + i.y], returns [x - i.y]. "]
    
    
    val add : t -> t -> t[@@ocaml.doc " Addition "]
    
    
    val sub : t -> t -> t[@@ocaml.doc " Subtraction "]
    
    
    val mul : t -> t -> t[@@ocaml.doc " Multiplication "]
    
    
    val inv : t -> t[@@ocaml.doc " Multiplicative inverse ([1/z]). "]
    
    
    val div : t -> t -> t[@@ocaml.doc " Division "]
    
    
    val sqrt :
    t -> t[@@ocaml.doc
            " Square root.  The result [x + i.y] is such that [x > 0] or\n    [x = 0] and [y >= 0].\n    This function has a discontinuity along the negative real axis. "]
    
    
    val norm2 :
    t -> float[@@ocaml.doc
                " Norm squared: given [x + i.y], returns [x^2 + y^2]. "]
    
    
    val norm :
    t -> float[@@ocaml.doc
                " Norm: given [x + i.y], returns [sqrt(x^2 + y^2)]. "]
    
    
    val arg :
    t -> float[@@ocaml.doc
                " Argument.  The argument of a complex number is the angle\n    in the complex plane between the positive real axis and a line\n    passing through zero and the number.  This angle ranges from\n    [-pi] to [pi].  This function has a discontinuity along the\n    negative real axis. "]
    
    
    val polar :
    float -> float -> t[@@ocaml.doc
                         " [polar norm arg] returns the complex having norm [norm]\n    and argument [arg]. "]
    
    
    val exp :
    t -> t[@@ocaml.doc
            " Exponentiation.  [exp z] returns [e] to the [z] power. "]
    
    
    val log : t -> t[@@ocaml.doc " Natural logarithm (in base [e]). "]
    
    
    val pow :
    t -> t -> t[@@ocaml.doc
                 " Power function.  [pow z1 z2] returns [z1] to the [z2] power. "]
    


*** OK ***

