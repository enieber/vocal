
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.warning "+a-4-9-30-40-41-42"]
[@@@ocaml.text
  " Measurement of the cost (including cost in space) of Flambda terms\n    in the context of inlining. "]
module Threshold :
sig
  type t =
    | Never_inline 
    | Can_inline_if_no_larger_than of int [@@ocaml.doc
                                            " The maximum size, in some abstract measure of space cost, that an\n     Flambda expression may be in order to be inlined. "]
  val add : t -> t -> t
  val sub : t -> t -> t
  val min : t -> t -> t
  val equal : t -> t -> bool
end
val can_inline : Flambda.t -> Threshold.t -> bonus:int -> bool
val can_try_inlining :
  Flambda.t ->
    Threshold.t ->
      number_of_arguments:int ->
        size_from_approximation:int option -> Threshold.t
module Benefit :
sig
  type t
  val zero : t
  val (+) : t -> t -> t
  val max : round:int -> t -> t -> t
  val remove_call : t -> t
  val remove_alloc : t -> t
  val remove_prim : t -> t
  val remove_prims : t -> int -> t
  val remove_branch : t -> t
  val direct_call_of_indirect : t -> t
  val requested_inline : t -> size_of:Flambda.t -> t
  val remove_code : Flambda.t -> t -> t
  val remove_code_named : Flambda.named -> t -> t
  val remove_projection : Projection.t -> t -> t
  val add_code : Flambda.t -> t -> t
  val add_code_named : Flambda.named -> t -> t
  val add_projection : Projection.t -> t -> t
  val print : Format.formatter -> t -> unit
end
module Whether_sufficient_benefit :
sig
  type t
  val create :
    original:Flambda.t ->
      toplevel:bool ->
        branch_depth:int ->
          Flambda.t -> benefit:Benefit.t -> lifting:bool -> round:int -> t
  val create_estimate :
    original_size:int ->
      toplevel:bool ->
        branch_depth:int ->
          new_size:int -> benefit:Benefit.t -> lifting:bool -> round:int -> t
  val evaluate : t -> bool
  val to_string : t -> string
  val print_description : subfunctions:bool -> Format.formatter -> t -> unit
end
val scale_inline_threshold_by : int
val default_toplevel_multiplier : int
val direct_call_size : int
val maximum_interesting_size_of_function_body : int -> int[@@ocaml.doc
                                                            " If a function body exceeds this size, we can make a fast decision not\n    to inline it (see [Inlining_decision]). "]
val lambda_smaller' : Flambda.expr -> than:int -> int option[@@ocaml.doc
                                                              " Measure the given expression to determine whether its size is at or\n    below the given threshold.  [None] is returned if it is too big; otherwise\n    [Some] is returned with the measured size. "]
val lambda_size : Flambda.expr -> int

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.warning "+a-4-9-30-40-41-42"]

[@@@ocaml.text
  " Measurement of the cost (including cost in space) of Flambda terms\n    in the context of inlining. "]

module Threshold :
sig
  type t =
  | Never_inline 
  | Can_inline_if_no_larger_than of int [@@ocaml.doc
                                          " The maximum size, in some abstract measure of space cost, that an\n     Flambda expression may be in order to be inlined. "]
    
  val add : t -> t -> t
  
  val sub : t -> t -> t
  
  val min : t -> t -> t
  
  val equal : t -> t -> bool
  
end

val can_inline : Flambda.t -> Threshold.t -> bonus:int -> bool


val can_try_inlining :
  Flambda.t ->
    Threshold.t ->
      number_of_arguments:int ->
        size_from_approximation:int option -> Threshold.t


module Benefit :
sig
  type t
    
  val zero : t
  
  val (+) : t -> t -> t
  
  val max : round:int -> t -> t -> t
  
  val remove_call : t -> t
  
  val remove_alloc : t -> t
  
  val remove_prim : t -> t
  
  val remove_prims : t -> int -> t
  
  val remove_branch : t -> t
  
  val direct_call_of_indirect : t -> t
  
  val requested_inline : t -> size_of:Flambda.t -> t
  
  val remove_code : Flambda.t -> t -> t
  
  val remove_code_named : Flambda.named -> t -> t
  
  val remove_projection : Projection.t -> t -> t
  
  val add_code : Flambda.t -> t -> t
  
  val add_code_named : Flambda.named -> t -> t
  
  val add_projection : Projection.t -> t -> t
  
  val print : Format.formatter -> t -> unit
  
end

module Whether_sufficient_benefit :
sig
  type t
    
  val create :
    original:Flambda.t ->
      toplevel:bool ->
        branch_depth:int ->
          Flambda.t -> benefit:Benefit.t -> lifting:bool -> round:int -> t
  
  val create_estimate :
    original_size:int ->
      toplevel:bool ->
        branch_depth:int ->
          new_size:int -> benefit:Benefit.t -> lifting:bool -> round:int -> t
  
  val evaluate : t -> bool
  
  val to_string : t -> string
  
  val print_description : subfunctions:bool -> Format.formatter -> t -> unit
  
end

val scale_inline_threshold_by : int


val default_toplevel_multiplier : int


val direct_call_size : int


val maximum_interesting_size_of_function_body : int -> int[@@ocaml.doc
                                                            " If a function body exceeds this size, we can make a fast decision not\n    to inline it (see [Inlining_decision]). "]


val lambda_smaller' : Flambda.expr -> than:int -> int option[@@ocaml.doc
                                                              " Measure the given expression to determine whether its size is at or\n    below the given threshold.  [None] is returned if it is too big; otherwise\n    [Some] is returned with the measured size. "]


val lambda_size : Flambda.expr -> int


*******************************
********* Typed GOSPEL ********
*******************************
module inlining_cost.mli

  Namespace: inlining_cost.mli
    Type symbols
      
    Logic Symbols
      
    Exception Symbols
      
    Namespaces
      Namespace: Benefit
        Type symbols
           t
          
        Logic Symbols
          
        Exception Symbols
          
        Namespaces
          
        Type Namespaces
          
      Namespace: Threshold
        Type symbols
           t#1
          
        Logic Symbols
          function Can_inline_if_no_larger_than (_:int) : t#1
          function Never_inline  : t#1
          
        Exception Symbols
          
        Namespaces
          
        Type Namespaces
          
      Namespace: Whether_sufficient_benefit
        Type symbols
           t#2
          
        Logic Symbols
          
        Exception Symbols
          
        Namespaces
          
        Type Namespaces
          
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    [@@@ocaml.warning "+a-4-9-30-40-41-42"]
    
    [@@@ocaml.text
      " Measurement of the cost (including cost in space) of Flambda terms\n    in the context of inlining. "]
    
    module Threshold :
    sig
      type t#1 = Never_inline of 
                 function Never_inline  : t#1
              | Can_inline_if_no_larger_than of int
                function Can_inline_if_no_larger_than (_:int) : t#1
      
      val add : t -> t -> t
      
      val sub : t -> t -> t
      
      val min : t -> t -> t
      
      val equal : t -> t -> bool
      
    end
    
    val can_inline : Flambda.t -> Threshold.t -> bonus:int -> bool
    
    
    val can_try_inlining :
    Flambda.t ->
      Threshold.t ->
        number_of_arguments:int ->
          size_from_approximation:int option -> Threshold.t
    
    
    module Benefit :
    sig
      type t
      
      val zero : t
      
      val + : t -> t -> t
      
      val max : round:int -> t -> t -> t
      
      val remove_call : t -> t
      
      val remove_alloc : t -> t
      
      val remove_prim : t -> t
      
      val remove_prims : t -> int -> t
      
      val remove_branch : t -> t
      
      val direct_call_of_indirect : t -> t
      
      val requested_inline : t -> size_of:Flambda.t -> t
      
      val remove_code : Flambda.t -> t -> t
      
      val remove_code_named : Flambda.named -> t -> t
      
      val remove_projection : Projection.t -> t -> t
      
      val add_code : Flambda.t -> t -> t
      
      val add_code_named : Flambda.named -> t -> t
      
      val add_projection : Projection.t -> t -> t
      
      val print : Format.formatter -> t -> unit
      
    end
    
    module Whether_sufficient_benefit :
    sig
      type t#2
      
      val create :
      original:Flambda.t ->
        toplevel:bool ->
          branch_depth:int ->
            Flambda.t -> benefit:Benefit.t -> lifting:bool -> round:int -> t
      
      val create_estimate :
      original_size:int ->
        toplevel:bool ->
          branch_depth:int ->
            new_size:int ->
              benefit:Benefit.t -> lifting:bool -> round:int -> t
      
      val evaluate : t -> bool
      
      val to_string : t -> string
      
      val print_description :
      subfunctions:bool -> Format.formatter -> t -> unit
      
    end
    
    val scale_inline_threshold_by : int
    
    
    val default_toplevel_multiplier : int
    
    
    val direct_call_size : int
    
    
    val maximum_interesting_size_of_function_body :
    int -> int[@@ocaml.doc
                " If a function body exceeds this size, we can make a fast decision not\n    to inline it (see [Inlining_decision]). "]
    
    
    val lambda_smaller' :
    Flambda.expr -> than:int -> int option[@@ocaml.doc
                                            " Measure the given expression to determine whether its size is at or\n    below the given threshold.  [None] is returned if it is too big; otherwise\n    [Some] is returned with the measured size. "]
    
    
    val lambda_size : Flambda.expr -> int
    


*** OK ***

