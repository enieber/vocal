
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.text
  " Rewrite paths for reproducible builds\n\n  {b Warning:} this module is unstable and part of\n  {{!Compiler_libs}compiler-libs}.\n\n"]
type path = string
type path_prefix = string
type error_message = string
val encode_prefix : path_prefix -> string
val decode_prefix : string -> (path_prefix, error_message) result
type pair = {
  target: path_prefix ;
  source: path_prefix }
val encode_pair : pair -> string
val decode_pair : string -> (pair, error_message) result
type map = pair option list
val encode_map : map -> string
val decode_map : string -> (map, error_message) result
val rewrite_opt : map -> path -> path option[@@ocaml.doc
                                              " [rewrite_opt map path] tries to find a source in [map]\n    that is a prefix of the input [path]. If it succeeds,\n    it replaces this prefix with the corresponding target.\n    If it fails, it just returns [None]. "]
val rewrite : map -> path -> path

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.text
  " Rewrite paths for reproducible builds\n\n  {b Warning:} this module is unstable and part of\n  {{!Compiler_libs}compiler-libs}.\n\n"]

type path = string
  

type path_prefix = string
  

type error_message = string
  

val encode_prefix : path_prefix -> string


val decode_prefix : string -> (path_prefix, error_message) result


type pair = {
target: path_prefix ;
source: path_prefix }
  

val encode_pair : pair -> string


val decode_pair : string -> (pair, error_message) result


type map = pair option list
  

val encode_map : map -> string


val decode_map : string -> (map, error_message) result


val rewrite_opt : map -> path -> path option[@@ocaml.doc
                                              " [rewrite_opt map path] tries to find a source in [map]\n    that is a prefix of the input [path]. If it succeeds,\n    it replaces this prefix with the corresponding target.\n    If it fails, it just returns [None]. "]


val rewrite : map -> path -> path


*******************************
********* Typed GOSPEL ********
*******************************
module build_path_prefix_map.mli

  Namespace: build_path_prefix_map.mli
    Type symbols
       error_message [=string]
       map [=pair option list]
       pair
       path [=string]
       path_prefix [=string]
      
    Logic Symbols
      function constr#pair (_:string) (_:string) : pair
      function source (_:pair) : string
      function target (_:pair) : string
      
    Exception Symbols
      
    Namespaces
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    [@@@ocaml.text
      " Rewrite paths for reproducible builds\n\n  {b Warning:} this module is unstable and part of\n  {{!Compiler_libs}compiler-libs}.\n\n"]
    
    type path = string
    
    
    type path_prefix = string
    
    
    type error_message = string
    
    
    val encode_prefix : path_prefix -> string
    
    
    val decode_prefix : string -> (path_prefix, error_message) result
    
    
    type pair = {target:string; source:string}
             function constr#pair (_:string) (_:string) : pair
               function target (_:pair) : string
               function source (_:pair) : string
    
    
    val encode_pair : pair -> string
    
    
    val decode_pair : string -> (pair, error_message) result
    
    
    type map = pair option list
    
    
    val encode_map : map -> string
    
    
    val decode_map : string -> (map, error_message) result
    
    
    val rewrite_opt :
    map -> path -> path option[@@ocaml.doc
                                " [rewrite_opt map path] tries to find a source in [map]\n    that is a prefix of the input [path]. If it succeeds,\n    it replaces this prefix with the corresponding target.\n    If it fails, it just returns [None]. "]
    
    
    val rewrite : map -> path -> path
    


*** OK ***

