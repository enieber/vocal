
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.text
  " Environment for finding complete names from relative names. "]
type env[@@ocaml.doc
          " An environment of known names,\n   from simple name to complete name. "]
val empty : env[@@ocaml.doc " The empty environment. "]
[@@@ocaml.text " Extending an environment "]
val add_signature : env -> string -> ?rel:string -> Types.signature -> env
val add_extension : env -> Odoc_name.t -> env
val add_type : env -> Odoc_name.t -> env
val add_value : env -> Odoc_name.t -> env
val add_module : env -> Odoc_name.t -> env
val add_module_type : env -> Odoc_name.t -> env
val add_class : env -> Odoc_name.t -> env
val add_class_type : env -> Odoc_name.t -> env
[@@@ocaml.text " Retrieving fully qualified names from an environment "]
val full_module_name : env -> Odoc_name.t -> Odoc_name.t[@@ocaml.doc
                                                          " Get the fully qualified module name from a name."]
val full_module_type_name : env -> Odoc_name.t -> Odoc_name.t[@@ocaml.doc
                                                               " Get the fully qualified module type name from a name."]
val full_module_or_module_type_name : env -> Odoc_name.t -> Odoc_name.t
[@@ocaml.doc
  " Get the fully qualified module or module type name from a name.\n   We look for a module type if we don't find a module."]
val full_type_name : env -> Odoc_name.t -> Odoc_name.t[@@ocaml.doc
                                                        " Get the fully qualified type name from a name."]
val full_value_name : env -> Odoc_name.t -> Odoc_name.t[@@ocaml.doc
                                                         " Get the fully qualified value name from a name."]
val full_extension_constructor_name : env -> Odoc_name.t -> Odoc_name.t
[@@ocaml.doc " Get the fully qualified extension name from a name."]
val full_class_name : env -> Odoc_name.t -> Odoc_name.t[@@ocaml.doc
                                                         " Get the fully qualified class name from a name."]
val full_class_type_name : env -> Odoc_name.t -> Odoc_name.t[@@ocaml.doc
                                                              " Get the fully qualified class type name from a name."]
val full_class_or_class_type_name : env -> Odoc_name.t -> Odoc_name.t
[@@ocaml.doc
  " Get the fully qualified class or class type name from a name."]
[@@@ocaml.text " Substitutions "]
val subst_type : env -> Types.type_expr -> Types.type_expr[@@ocaml.doc
                                                            " Replace the [Path.t] by a complete [Path.t] in a [Types.type_expr]."]
val subst_module_type : env -> Types.module_type -> Types.module_type
[@@ocaml.doc
  " Replace the [Path.t] by a complete [Path.t] in a [Types.module_type]."]
val subst_class_type : env -> Types.class_type -> Types.class_type[@@ocaml.doc
                                                                    " Replace the [Path.t] by a complete [Path.t] in a [Types.class_type].\n   Also empty the structures to get only [object end] when the type\n   is printed.\n"]

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.text
  " Environment for finding complete names from relative names. "]

type env[@@ocaml.doc
          " An environment of known names,\n   from simple name to complete name. "]
  

val empty : env[@@ocaml.doc " The empty environment. "]


[@@@ocaml.text " Extending an environment "]

val add_signature : env -> string -> ?rel:string -> Types.signature -> env


val add_extension : env -> Odoc_name.t -> env


val add_type : env -> Odoc_name.t -> env


val add_value : env -> Odoc_name.t -> env


val add_module : env -> Odoc_name.t -> env


val add_module_type : env -> Odoc_name.t -> env


val add_class : env -> Odoc_name.t -> env


val add_class_type : env -> Odoc_name.t -> env


[@@@ocaml.text " Retrieving fully qualified names from an environment "]

val full_module_name : env -> Odoc_name.t -> Odoc_name.t[@@ocaml.doc
                                                          " Get the fully qualified module name from a name."]


val full_module_type_name : env -> Odoc_name.t -> Odoc_name.t[@@ocaml.doc
                                                               " Get the fully qualified module type name from a name."]


val full_module_or_module_type_name : env -> Odoc_name.t -> Odoc_name.t
[@@ocaml.doc
  " Get the fully qualified module or module type name from a name.\n   We look for a module type if we don't find a module."]


val full_type_name : env -> Odoc_name.t -> Odoc_name.t[@@ocaml.doc
                                                        " Get the fully qualified type name from a name."]


val full_value_name : env -> Odoc_name.t -> Odoc_name.t[@@ocaml.doc
                                                         " Get the fully qualified value name from a name."]


val full_extension_constructor_name : env -> Odoc_name.t -> Odoc_name.t
[@@ocaml.doc " Get the fully qualified extension name from a name."]


val full_class_name : env -> Odoc_name.t -> Odoc_name.t[@@ocaml.doc
                                                         " Get the fully qualified class name from a name."]


val full_class_type_name : env -> Odoc_name.t -> Odoc_name.t[@@ocaml.doc
                                                              " Get the fully qualified class type name from a name."]


val full_class_or_class_type_name : env -> Odoc_name.t -> Odoc_name.t
[@@ocaml.doc
  " Get the fully qualified class or class type name from a name."]


[@@@ocaml.text " Substitutions "]

val subst_type : env -> Types.type_expr -> Types.type_expr[@@ocaml.doc
                                                            " Replace the [Path.t] by a complete [Path.t] in a [Types.type_expr]."]


val subst_module_type : env -> Types.module_type -> Types.module_type
[@@ocaml.doc
  " Replace the [Path.t] by a complete [Path.t] in a [Types.module_type]."]


val subst_class_type : env -> Types.class_type -> Types.class_type[@@ocaml.doc
                                                                    " Replace the [Path.t] by a complete [Path.t] in a [Types.class_type].\n   Also empty the structures to get only [object end] when the type\n   is printed.\n"]


*******************************
********* Typed GOSPEL ********
*******************************
module odoc_env.mli

  Namespace: odoc_env.mli
    Type symbols
       env
      
    Logic Symbols
      
    Exception Symbols
      
    Namespaces
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    [@@@ocaml.text
      " Environment for finding complete names from relative names. "]
    
    type env
    
    
    val empty : env[@@ocaml.doc " The empty environment. "]
    
    
    [@@@ocaml.text " Extending an environment "]
    
    val add_signature :
    env -> string -> ?rel:string -> Types.signature -> env
    
    
    val add_extension : env -> Odoc_name.t -> env
    
    
    val add_type : env -> Odoc_name.t -> env
    
    
    val add_value : env -> Odoc_name.t -> env
    
    
    val add_module : env -> Odoc_name.t -> env
    
    
    val add_module_type : env -> Odoc_name.t -> env
    
    
    val add_class : env -> Odoc_name.t -> env
    
    
    val add_class_type : env -> Odoc_name.t -> env
    
    
    [@@@ocaml.text " Retrieving fully qualified names from an environment "]
    
    val full_module_name :
    env -> Odoc_name.t -> Odoc_name.t[@@ocaml.doc
                                       " Get the fully qualified module name from a name."]
    
    
    val full_module_type_name :
    env -> Odoc_name.t -> Odoc_name.t[@@ocaml.doc
                                       " Get the fully qualified module type name from a name."]
    
    
    val full_module_or_module_type_name :
    env -> Odoc_name.t -> Odoc_name.t[@@ocaml.doc
                                       " Get the fully qualified module or module type name from a name.\n   We look for a module type if we don't find a module."]
    
    
    val full_type_name :
    env -> Odoc_name.t -> Odoc_name.t[@@ocaml.doc
                                       " Get the fully qualified type name from a name."]
    
    
    val full_value_name :
    env -> Odoc_name.t -> Odoc_name.t[@@ocaml.doc
                                       " Get the fully qualified value name from a name."]
    
    
    val full_extension_constructor_name :
    env -> Odoc_name.t -> Odoc_name.t[@@ocaml.doc
                                       " Get the fully qualified extension name from a name."]
    
    
    val full_class_name :
    env -> Odoc_name.t -> Odoc_name.t[@@ocaml.doc
                                       " Get the fully qualified class name from a name."]
    
    
    val full_class_type_name :
    env -> Odoc_name.t -> Odoc_name.t[@@ocaml.doc
                                       " Get the fully qualified class type name from a name."]
    
    
    val full_class_or_class_type_name :
    env -> Odoc_name.t -> Odoc_name.t[@@ocaml.doc
                                       " Get the fully qualified class or class type name from a name."]
    
    
    [@@@ocaml.text " Substitutions "]
    
    val subst_type :
    env -> Types.type_expr -> Types.type_expr[@@ocaml.doc
                                               " Replace the [Path.t] by a complete [Path.t] in a [Types.type_expr]."]
    
    
    val subst_module_type :
    env -> Types.module_type -> Types.module_type[@@ocaml.doc
                                                   " Replace the [Path.t] by a complete [Path.t] in a [Types.module_type]."]
    
    
    val subst_class_type :
    env -> Types.class_type -> Types.class_type[@@ocaml.doc
                                                 " Replace the [Path.t] by a complete [Path.t] in a [Types.class_type].\n   Also empty the structures to get only [object end] when the type\n   is printed.\n"]
    


*** OK ***

