
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.text
  " Processor-native integers.\n\n   This module provides operations on the type [nativeint] of\n   signed 32-bit integers (on 32-bit platforms) or\n   signed 64-bit integers (on 64-bit platforms).\n   This integer type has exactly the same width as that of a\n   pointer type in the C compiler.  All arithmetic operations over\n   [nativeint] are taken modulo 2{^32} or 2{^64} depending\n   on the word size of the architecture.\n\n   Performance notice: values of type [nativeint] occupy more memory\n   space than values of type [int], and arithmetic operations on\n   [nativeint] are generally slower than those on [int].  Use [nativeint]\n   only when the application requires the extra bit of precision\n   over the [int] type.\n\n    Literals for native integers are suffixed by n:\n    {[\n      let zero: nativeint = 0n\n      let one: nativeint = 1n\n      let m_one: nativeint = -1n\n    ]}\n"]
val zero : nativeint[@@ocaml.doc " The native integer 0."]
val one : nativeint[@@ocaml.doc " The native integer 1."]
val minus_one : nativeint[@@ocaml.doc " The native integer -1."]
external neg : nativeint -> nativeint = "%nativeint_neg"[@@ocaml.doc
                                                          " Unary negation. "]
external add : nativeint -> nativeint -> nativeint = "%nativeint_add"
[@@ocaml.doc " Addition. "]
external sub : nativeint -> nativeint -> nativeint = "%nativeint_sub"
[@@ocaml.doc " Subtraction. "]
external mul : nativeint -> nativeint -> nativeint = "%nativeint_mul"
[@@ocaml.doc " Multiplication. "]
external div : nativeint -> nativeint -> nativeint = "%nativeint_div"
[@@ocaml.doc
  " Integer division.  Raise [Division_by_zero] if the second\n   argument is zero.  This division rounds the real quotient of\n   its arguments towards zero, as specified for {!Stdlib.(/)}. "]
external rem : nativeint -> nativeint -> nativeint = "%nativeint_mod"
[@@ocaml.doc
  " Integer remainder.  If [y] is not zero, the result\n   of [Nativeint.rem x y] satisfies the following properties:\n   [Nativeint.zero <= Nativeint.rem x y < Nativeint.abs y] and\n   [x = Nativeint.add (Nativeint.mul (Nativeint.div x y) y)\n                      (Nativeint.rem x y)].\n   If [y = 0], [Nativeint.rem x y] raises [Division_by_zero]. "]
val succ : nativeint -> nativeint[@@ocaml.doc
                                   " Successor.\n   [Nativeint.succ x] is [Nativeint.add x Nativeint.one]. "]
val pred : nativeint -> nativeint[@@ocaml.doc
                                   " Predecessor.\n   [Nativeint.pred x] is [Nativeint.sub x Nativeint.one]. "]
val abs : nativeint -> nativeint[@@ocaml.doc
                                  " Return the absolute value of its argument. "]
val size : int[@@ocaml.doc
                " The size in bits of a native integer.  This is equal to [32]\n   on a 32-bit platform and to [64] on a 64-bit platform. "]
val max_int : nativeint[@@ocaml.doc
                         " The greatest representable native integer,\n   either 2{^31} - 1 on a 32-bit platform,\n   or 2{^63} - 1 on a 64-bit platform. "]
val min_int : nativeint[@@ocaml.doc
                         " The smallest representable native integer,\n   either -2{^31} on a 32-bit platform,\n   or -2{^63} on a 64-bit platform. "]
external logand : nativeint -> nativeint -> nativeint = "%nativeint_and"
[@@ocaml.doc " Bitwise logical and. "]
external logor : nativeint -> nativeint -> nativeint = "%nativeint_or"
[@@ocaml.doc " Bitwise logical or. "]
external logxor : nativeint -> nativeint -> nativeint = "%nativeint_xor"
[@@ocaml.doc " Bitwise logical exclusive or. "]
val lognot : nativeint -> nativeint[@@ocaml.doc
                                     " Bitwise logical negation. "]
external shift_left : nativeint -> int -> nativeint = "%nativeint_lsl"
[@@ocaml.doc
  " [Nativeint.shift_left x y] shifts [x] to the left by [y] bits.\n   The result is unspecified if [y < 0] or [y >= bitsize],\n   where [bitsize] is [32] on a 32-bit platform and\n   [64] on a 64-bit platform. "]
external shift_right : nativeint -> int -> nativeint = "%nativeint_asr"
[@@ocaml.doc
  " [Nativeint.shift_right x y] shifts [x] to the right by [y] bits.\n   This is an arithmetic shift: the sign bit of [x] is replicated\n   and inserted in the vacated bits.\n   The result is unspecified if [y < 0] or [y >= bitsize]. "]
external shift_right_logical :
  nativeint -> int -> nativeint = "%nativeint_lsr"[@@ocaml.doc
                                                    " [Nativeint.shift_right_logical x y] shifts [x] to the right\n   by [y] bits.\n   This is a logical shift: zeroes are inserted in the vacated bits\n   regardless of the sign of [x].\n   The result is unspecified if [y < 0] or [y >= bitsize]. "]
external of_int : int -> nativeint = "%nativeint_of_int"[@@ocaml.doc
                                                          " Convert the given integer (type [int]) to a native integer\n   (type [nativeint]). "]
external to_int : nativeint -> int = "%nativeint_to_int"[@@ocaml.doc
                                                          " Convert the given native integer (type [nativeint]) to an\n   integer (type [int]).  The high-order bit is lost during\n   the conversion. "]
external of_float :
  float -> nativeint = "caml_nativeint_of_float"
    "caml_nativeint_of_float_unboxed"[@@unboxed ][@@noalloc ][@@ocaml.doc
                                                               " Convert the given floating-point number to a native integer,\n   discarding the fractional part (truncate towards 0).\n   The result of the conversion is undefined if, after truncation,\n   the number is outside the range\n   \\[{!Nativeint.min_int}, {!Nativeint.max_int}\\]. "]
external to_float :
  nativeint -> float = "caml_nativeint_to_float"
    "caml_nativeint_to_float_unboxed"[@@unboxed ][@@noalloc ][@@ocaml.doc
                                                               " Convert the given native integer to a floating-point number. "]
external of_int32 : int32 -> nativeint = "%nativeint_of_int32"[@@ocaml.doc
                                                                " Convert the given 32-bit integer (type [int32])\n   to a native integer. "]
external to_int32 : nativeint -> int32 = "%nativeint_to_int32"[@@ocaml.doc
                                                                " Convert the given native integer to a\n   32-bit integer (type [int32]).  On 64-bit platforms,\n   the 64-bit native integer is taken modulo 2{^32},\n   i.e. the top 32 bits are lost.  On 32-bit platforms,\n   the conversion is exact. "]
external of_string : string -> nativeint = "caml_nativeint_of_string"
[@@ocaml.doc
  " Convert the given string to a native integer.\n   The string is read in decimal (by default, or if the string\n   begins with [0u]) or in hexadecimal, octal or binary if the\n   string begins with [0x], [0o] or [0b] respectively.\n\n   The [0u] prefix reads the input as an unsigned integer in the range\n   [[0, 2*Nativeint.max_int+1]].  If the input exceeds {!Nativeint.max_int}\n   it is converted to the signed integer\n   [Int64.min_int + input - Nativeint.max_int - 1].\n\n   Raise [Failure \"Nativeint.of_string\"] if the given string is not\n   a valid representation of an integer, or if the integer represented\n   exceeds the range of integers representable in type [nativeint]. "]
val of_string_opt : string -> nativeint option[@@ocaml.doc
                                                " Same as [of_string], but return [None] instead of raising.\n    @since 4.05 "]
val to_string : nativeint -> string[@@ocaml.doc
                                     " Return the string representation of its argument, in decimal. "]
type t = nativeint[@@ocaml.doc " An alias for the type of native integers. "]
val compare : t -> t -> int[@@ocaml.doc
                             " The comparison function for native integers, with the same specification as\n    {!Stdlib.compare}.  Along with the type [t], this function [compare]\n    allows the module [Nativeint] to be passed as argument to the functors\n    {!Set.Make} and {!Map.Make}. "]
val equal : t -> t -> bool[@@ocaml.doc
                            " The equal function for native ints.\n    @since 4.03.0 "]
[@@@ocaml.text "/*"]
[@@@ocaml.text " {1 Deprecated functions} "]
external format : string -> nativeint -> string = "caml_nativeint_format"
[@@ocaml.doc
  " [Nativeint.format fmt n] return the string representation of the\n   native integer [n] in the format specified by [fmt].\n   [fmt] is a [Printf]-style format consisting of exactly\n   one [%d], [%i], [%u], [%x], [%X] or [%o] conversion specification.\n   This function is deprecated; use {!Printf.sprintf} with a [%nx] format\n   instead. "]

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.text
  " Processor-native integers.\n\n   This module provides operations on the type [nativeint] of\n   signed 32-bit integers (on 32-bit platforms) or\n   signed 64-bit integers (on 64-bit platforms).\n   This integer type has exactly the same width as that of a\n   pointer type in the C compiler.  All arithmetic operations over\n   [nativeint] are taken modulo 2{^32} or 2{^64} depending\n   on the word size of the architecture.\n\n   Performance notice: values of type [nativeint] occupy more memory\n   space than values of type [int], and arithmetic operations on\n   [nativeint] are generally slower than those on [int].  Use [nativeint]\n   only when the application requires the extra bit of precision\n   over the [int] type.\n\n    Literals for native integers are suffixed by n:\n    {[\n      let zero: nativeint = 0n\n      let one: nativeint = 1n\n      let m_one: nativeint = -1n\n    ]}\n"]

val zero : nativeint[@@ocaml.doc " The native integer 0."]


val one : nativeint[@@ocaml.doc " The native integer 1."]


val minus_one : nativeint[@@ocaml.doc " The native integer -1."]


external neg : nativeint -> nativeint = "%nativeint_neg"[@@ocaml.doc
                                                          " Unary negation. "]


external add : nativeint -> nativeint -> nativeint = "%nativeint_add"
[@@ocaml.doc " Addition. "]


external sub : nativeint -> nativeint -> nativeint = "%nativeint_sub"
[@@ocaml.doc " Subtraction. "]


external mul : nativeint -> nativeint -> nativeint = "%nativeint_mul"
[@@ocaml.doc " Multiplication. "]


external div : nativeint -> nativeint -> nativeint = "%nativeint_div"
[@@ocaml.doc
  " Integer division.  Raise [Division_by_zero] if the second\n   argument is zero.  This division rounds the real quotient of\n   its arguments towards zero, as specified for {!Stdlib.(/)}. "]


external rem : nativeint -> nativeint -> nativeint = "%nativeint_mod"
[@@ocaml.doc
  " Integer remainder.  If [y] is not zero, the result\n   of [Nativeint.rem x y] satisfies the following properties:\n   [Nativeint.zero <= Nativeint.rem x y < Nativeint.abs y] and\n   [x = Nativeint.add (Nativeint.mul (Nativeint.div x y) y)\n                      (Nativeint.rem x y)].\n   If [y = 0], [Nativeint.rem x y] raises [Division_by_zero]. "]


val succ : nativeint -> nativeint[@@ocaml.doc
                                   " Successor.\n   [Nativeint.succ x] is [Nativeint.add x Nativeint.one]. "]


val pred : nativeint -> nativeint[@@ocaml.doc
                                   " Predecessor.\n   [Nativeint.pred x] is [Nativeint.sub x Nativeint.one]. "]


val abs : nativeint -> nativeint[@@ocaml.doc
                                  " Return the absolute value of its argument. "]


val size : int[@@ocaml.doc
                " The size in bits of a native integer.  This is equal to [32]\n   on a 32-bit platform and to [64] on a 64-bit platform. "]


val max_int : nativeint[@@ocaml.doc
                         " The greatest representable native integer,\n   either 2{^31} - 1 on a 32-bit platform,\n   or 2{^63} - 1 on a 64-bit platform. "]


val min_int : nativeint[@@ocaml.doc
                         " The smallest representable native integer,\n   either -2{^31} on a 32-bit platform,\n   or -2{^63} on a 64-bit platform. "]


external logand : nativeint -> nativeint -> nativeint = "%nativeint_and"
[@@ocaml.doc " Bitwise logical and. "]


external logor : nativeint -> nativeint -> nativeint = "%nativeint_or"
[@@ocaml.doc " Bitwise logical or. "]


external logxor : nativeint -> nativeint -> nativeint = "%nativeint_xor"
[@@ocaml.doc " Bitwise logical exclusive or. "]


val lognot : nativeint -> nativeint[@@ocaml.doc
                                     " Bitwise logical negation. "]


external shift_left : nativeint -> int -> nativeint = "%nativeint_lsl"
[@@ocaml.doc
  " [Nativeint.shift_left x y] shifts [x] to the left by [y] bits.\n   The result is unspecified if [y < 0] or [y >= bitsize],\n   where [bitsize] is [32] on a 32-bit platform and\n   [64] on a 64-bit platform. "]


external shift_right : nativeint -> int -> nativeint = "%nativeint_asr"
[@@ocaml.doc
  " [Nativeint.shift_right x y] shifts [x] to the right by [y] bits.\n   This is an arithmetic shift: the sign bit of [x] is replicated\n   and inserted in the vacated bits.\n   The result is unspecified if [y < 0] or [y >= bitsize]. "]


external shift_right_logical :
  nativeint -> int -> nativeint = "%nativeint_lsr"[@@ocaml.doc
                                                    " [Nativeint.shift_right_logical x y] shifts [x] to the right\n   by [y] bits.\n   This is a logical shift: zeroes are inserted in the vacated bits\n   regardless of the sign of [x].\n   The result is unspecified if [y < 0] or [y >= bitsize]. "]


external of_int : int -> nativeint = "%nativeint_of_int"[@@ocaml.doc
                                                          " Convert the given integer (type [int]) to a native integer\n   (type [nativeint]). "]


external to_int : nativeint -> int = "%nativeint_to_int"[@@ocaml.doc
                                                          " Convert the given native integer (type [nativeint]) to an\n   integer (type [int]).  The high-order bit is lost during\n   the conversion. "]


external of_float :
  float -> nativeint = "caml_nativeint_of_float"
  "caml_nativeint_of_float_unboxed"[@@unboxed ][@@noalloc ][@@ocaml.doc
                                                             " Convert the given floating-point number to a native integer,\n   discarding the fractional part (truncate towards 0).\n   The result of the conversion is undefined if, after truncation,\n   the number is outside the range\n   \\[{!Nativeint.min_int}, {!Nativeint.max_int}\\]. "]


external to_float :
  nativeint -> float = "caml_nativeint_to_float"
  "caml_nativeint_to_float_unboxed"[@@unboxed ][@@noalloc ][@@ocaml.doc
                                                             " Convert the given native integer to a floating-point number. "]


external of_int32 : int32 -> nativeint = "%nativeint_of_int32"[@@ocaml.doc
                                                                " Convert the given 32-bit integer (type [int32])\n   to a native integer. "]


external to_int32 : nativeint -> int32 = "%nativeint_to_int32"[@@ocaml.doc
                                                                " Convert the given native integer to a\n   32-bit integer (type [int32]).  On 64-bit platforms,\n   the 64-bit native integer is taken modulo 2{^32},\n   i.e. the top 32 bits are lost.  On 32-bit platforms,\n   the conversion is exact. "]


external of_string : string -> nativeint = "caml_nativeint_of_string"
[@@ocaml.doc
  " Convert the given string to a native integer.\n   The string is read in decimal (by default, or if the string\n   begins with [0u]) or in hexadecimal, octal or binary if the\n   string begins with [0x], [0o] or [0b] respectively.\n\n   The [0u] prefix reads the input as an unsigned integer in the range\n   [[0, 2*Nativeint.max_int+1]].  If the input exceeds {!Nativeint.max_int}\n   it is converted to the signed integer\n   [Int64.min_int + input - Nativeint.max_int - 1].\n\n   Raise [Failure \"Nativeint.of_string\"] if the given string is not\n   a valid representation of an integer, or if the integer represented\n   exceeds the range of integers representable in type [nativeint]. "]


val of_string_opt : string -> nativeint option[@@ocaml.doc
                                                " Same as [of_string], but return [None] instead of raising.\n    @since 4.05 "]


val to_string : nativeint -> string[@@ocaml.doc
                                     " Return the string representation of its argument, in decimal. "]


type t = nativeint[@@ocaml.doc " An alias for the type of native integers. "]
  

val compare : t -> t -> int[@@ocaml.doc
                             " The comparison function for native integers, with the same specification as\n    {!Stdlib.compare}.  Along with the type [t], this function [compare]\n    allows the module [Nativeint] to be passed as argument to the functors\n    {!Set.Make} and {!Map.Make}. "]


val equal : t -> t -> bool[@@ocaml.doc
                            " The equal function for native ints.\n    @since 4.03.0 "]


[@@@ocaml.text "/*"]

[@@@ocaml.text " {1 Deprecated functions} "]

external format : string -> nativeint -> string = "caml_nativeint_format"
[@@ocaml.doc
  " [Nativeint.format fmt n] return the string representation of the\n   native integer [n] in the format specified by [fmt].\n   [fmt] is a [Printf]-style format consisting of exactly\n   one [%d], [%i], [%u], [%x], [%X] or [%o] conversion specification.\n   This function is deprecated; use {!Printf.sprintf} with a [%nx] format\n   instead. "]

File "nativeint.mli", line 188, characters 9-18:
Error: Symbol nativeint not found
