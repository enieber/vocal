
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.text
  " Profiling of a program's space behaviour over time.\n    Currently only supported on x86-64 platforms running 64-bit code.\n\n    To use the functions in this module you must:\n    - configure the compiler with \"-spacetime\";\n    - compile to native code.\n    Without these conditions being satisfied the functions in this module\n    will have no effect.\n\n    Instead of manually taking profiling heap snapshots with this module it is\n    possible to use an automatic snapshot facility that writes profiling\n    information at fixed intervals to a file. To enable this, all that needs to\n    be done is to build the relevant program using a compiler configured with\n    -spacetime; and set the environment variable OCAML_SPACETIME_INTERVAL to an\n    integer number of milliseconds giving the interval between profiling heap\n    snapshots. This interval should not be made excessively small relative to\n    the running time of the program. A typical interval to start with might be\n    1/100 of the running time of the program.  The program must exit \"normally\"\n    (i.e. by calling [exit], with whatever exit code, rather than being\n    abnormally terminated by a signal) so that the snapshot file is\n    correctly completed.\n\n    When using the automatic snapshot mode the profiling output is written\n    to a file called \"spacetime-<pid>\" where <pid> is the process ID of the\n    program.  (If the program forks and continues executing then multiple\n    files may be produced with different pid numbers.)  The profiling output\n    is by default written to the current working directory when the program\n    starts.  This may be customised by setting the OCAML_SPACETIME_SNAPSHOT_DIR\n    environment variable to the name of the desired directory.\n\n    If using automatic snapshots the presence of the\n    [save_event_for_automatic_snapshots] function, below, should be noted.\n\n    The functions in this module are thread safe.\n\n    For functions to decode the information recorded by the profiler,\n    see the Spacetime offline library in otherlibs/. "]
val enabled : bool[@@ocaml.doc
                    " [enabled] is [true] if the compiler is configured with spacetime and [false]\n    otherwise "]
module Series :
sig
  type t[@@ocaml.doc
          " Type representing a file that will hold a series of heap snapshots\n      together with additional information required to interpret those\n      snapshots. "]
  val create : path:string -> t[@@ocaml.doc
                                 " [create ~path] creates a series file at [path]. "]
  val save_event : ?time:float -> t -> event_name:string -> unit[@@ocaml.doc
                                                                  " [save_event] writes an event, which is an arbitrary string, into the\n      given series file.  This may be used for identifying particular points\n      during program execution when analysing the profile.\n      The optional [time] parameter is as for {!Snapshot.take}.\n  "]
  val save_and_close : ?time:float -> t -> unit[@@ocaml.doc
                                                 " [save_and_close series] writes information into [series] required for\n      interpreting the snapshots that [series] contains and then closes the\n      [series] file. This function must be called to produce a valid series\n      file.\n      The optional [time] parameter is as for {!Snapshot.take}.\n  "]
end
module Snapshot :
sig
  val take : ?time:float -> Series.t -> unit[@@ocaml.doc
                                              " [take series] takes a snapshot of the profiling annotations on the values\n      in the minor and major heaps, together with GC stats, and write the\n      result to the [series] file.  This function triggers a minor GC but does\n      not allocate any memory itself.\n      If the optional [time] is specified, it will be used instead of the\n      result of {!Sys.time} as the timestamp of the snapshot.  Such [time]s\n      should start from zero and be monotonically increasing.  This parameter\n      is intended to be used so that snapshots can be correlated against wall\n      clock time (which is not supported in the standard library) rather than\n      elapsed CPU time.\n  "]
end
val save_event_for_automatic_snapshots : event_name:string -> unit[@@ocaml.doc
                                                                    " Like {!Series.save_event}, but writes to the automatic snapshot file.\n    This function is a no-op if OCAML_SPACETIME_INTERVAL was not set. "]

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.text
  " Profiling of a program's space behaviour over time.\n    Currently only supported on x86-64 platforms running 64-bit code.\n\n    To use the functions in this module you must:\n    - configure the compiler with \"-spacetime\";\n    - compile to native code.\n    Without these conditions being satisfied the functions in this module\n    will have no effect.\n\n    Instead of manually taking profiling heap snapshots with this module it is\n    possible to use an automatic snapshot facility that writes profiling\n    information at fixed intervals to a file. To enable this, all that needs to\n    be done is to build the relevant program using a compiler configured with\n    -spacetime; and set the environment variable OCAML_SPACETIME_INTERVAL to an\n    integer number of milliseconds giving the interval between profiling heap\n    snapshots. This interval should not be made excessively small relative to\n    the running time of the program. A typical interval to start with might be\n    1/100 of the running time of the program.  The program must exit \"normally\"\n    (i.e. by calling [exit], with whatever exit code, rather than being\n    abnormally terminated by a signal) so that the snapshot file is\n    correctly completed.\n\n    When using the automatic snapshot mode the profiling output is written\n    to a file called \"spacetime-<pid>\" where <pid> is the process ID of the\n    program.  (If the program forks and continues executing then multiple\n    files may be produced with different pid numbers.)  The profiling output\n    is by default written to the current working directory when the program\n    starts.  This may be customised by setting the OCAML_SPACETIME_SNAPSHOT_DIR\n    environment variable to the name of the desired directory.\n\n    If using automatic snapshots the presence of the\n    [save_event_for_automatic_snapshots] function, below, should be noted.\n\n    The functions in this module are thread safe.\n\n    For functions to decode the information recorded by the profiler,\n    see the Spacetime offline library in otherlibs/. "]

val enabled : bool[@@ocaml.doc
                    " [enabled] is [true] if the compiler is configured with spacetime and [false]\n    otherwise "]


module Series :
sig
  type t[@@ocaml.doc
          " Type representing a file that will hold a series of heap snapshots\n      together with additional information required to interpret those\n      snapshots. "]
    
  val create : path:string -> t[@@ocaml.doc
                                 " [create ~path] creates a series file at [path]. "]
  
  val save_event : ?time:float -> t -> event_name:string -> unit[@@ocaml.doc
                                                                  " [save_event] writes an event, which is an arbitrary string, into the\n      given series file.  This may be used for identifying particular points\n      during program execution when analysing the profile.\n      The optional [time] parameter is as for {!Snapshot.take}.\n  "]
  
  val save_and_close : ?time:float -> t -> unit[@@ocaml.doc
                                                 " [save_and_close series] writes information into [series] required for\n      interpreting the snapshots that [series] contains and then closes the\n      [series] file. This function must be called to produce a valid series\n      file.\n      The optional [time] parameter is as for {!Snapshot.take}.\n  "]
  
end

module Snapshot :
sig
  val take : ?time:float -> Series.t -> unit[@@ocaml.doc
                                              " [take series] takes a snapshot of the profiling annotations on the values\n      in the minor and major heaps, together with GC stats, and write the\n      result to the [series] file.  This function triggers a minor GC but does\n      not allocate any memory itself.\n      If the optional [time] is specified, it will be used instead of the\n      result of {!Sys.time} as the timestamp of the snapshot.  Such [time]s\n      should start from zero and be monotonically increasing.  This parameter\n      is intended to be used so that snapshots can be correlated against wall\n      clock time (which is not supported in the standard library) rather than\n      elapsed CPU time.\n  "]
  
end

val save_event_for_automatic_snapshots : event_name:string -> unit[@@ocaml.doc
                                                                    " Like {!Series.save_event}, but writes to the automatic snapshot file.\n    This function is a no-op if OCAML_SPACETIME_INTERVAL was not set. "]


*******************************
********* Typed GOSPEL ********
*******************************
module spacetime.mli

  Namespace: spacetime.mli
    Type symbols
      
    Logic Symbols
      
    Exception Symbols
      
    Namespaces
      Namespace: Series
        Type symbols
           t
          
        Logic Symbols
          
        Exception Symbols
          
        Namespaces
          
        Type Namespaces
          
      Namespace: Snapshot
        Type symbols
          
        Logic Symbols
          
        Exception Symbols
          
        Namespaces
          
        Type Namespaces
          
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    [@@@ocaml.text
      " Profiling of a program's space behaviour over time.\n    Currently only supported on x86-64 platforms running 64-bit code.\n\n    To use the functions in this module you must:\n    - configure the compiler with \"-spacetime\";\n    - compile to native code.\n    Without these conditions being satisfied the functions in this module\n    will have no effect.\n\n    Instead of manually taking profiling heap snapshots with this module it is\n    possible to use an automatic snapshot facility that writes profiling\n    information at fixed intervals to a file. To enable this, all that needs to\n    be done is to build the relevant program using a compiler configured with\n    -spacetime; and set the environment variable OCAML_SPACETIME_INTERVAL to an\n    integer number of milliseconds giving the interval between profiling heap\n    snapshots. This interval should not be made excessively small relative to\n    the running time of the program. A typical interval to start with might be\n    1/100 of the running time of the program.  The program must exit \"normally\"\n    (i.e. by calling [exit], with whatever exit code, rather than being\n    abnormally terminated by a signal) so that the snapshot file is\n    correctly completed.\n\n    When using the automatic snapshot mode the profiling output is written\n    to a file called \"spacetime-<pid>\" where <pid> is the process ID of the\n    program.  (If the program forks and continues executing then multiple\n    files may be produced with different pid numbers.)  The profiling output\n    is by default written to the current working directory when the program\n    starts.  This may be customised by setting the OCAML_SPACETIME_SNAPSHOT_DIR\n    environment variable to the name of the desired directory.\n\n    If using automatic snapshots the presence of the\n    [save_event_for_automatic_snapshots] function, below, should be noted.\n\n    The functions in this module are thread safe.\n\n    For functions to decode the information recorded by the profiler,\n    see the Spacetime offline library in otherlibs/. "]
    
    val enabled :
    bool[@@ocaml.doc
          " [enabled] is [true] if the compiler is configured with spacetime and [false]\n    otherwise "]
    
    
    module Series :
    sig
      type t
      
      val create :
      path:string -> t[@@ocaml.doc
                        " [create ~path] creates a series file at [path]. "]
      
      val save_event :
      ?time:float -> t -> event_name:string -> unit[@@ocaml.doc
                                                     " [save_event] writes an event, which is an arbitrary string, into the\n      given series file.  This may be used for identifying particular points\n      during program execution when analysing the profile.\n      The optional [time] parameter is as for {!Snapshot.take}.\n  "]
      
      val save_and_close :
      ?time:float -> t -> unit[@@ocaml.doc
                                " [save_and_close series] writes information into [series] required for\n      interpreting the snapshots that [series] contains and then closes the\n      [series] file. This function must be called to produce a valid series\n      file.\n      The optional [time] parameter is as for {!Snapshot.take}.\n  "]
      
    end
    
    module Snapshot :
    sig
      val take :
      ?time:float -> Series.t -> unit[@@ocaml.doc
                                       " [take series] takes a snapshot of the profiling annotations on the values\n      in the minor and major heaps, together with GC stats, and write the\n      result to the [series] file.  This function triggers a minor GC but does\n      not allocate any memory itself.\n      If the optional [time] is specified, it will be used instead of the\n      result of {!Sys.time} as the timestamp of the snapshot.  Such [time]s\n      should start from zero and be monotonically increasing.  This parameter\n      is intended to be used so that snapshots can be correlated against wall\n      clock time (which is not supported in the standard library) rather than\n      elapsed CPU time.\n  "]
      
    end
    
    val save_event_for_automatic_snapshots :
    event_name:string -> unit[@@ocaml.doc
                               " Like {!Series.save_event}, but writes to the automatic snapshot file.\n    This function is a no-op if OCAML_SPACETIME_INTERVAL was not set. "]
    


*** OK ***

