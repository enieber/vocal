
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.warning "+a-4-9-30-40-41-42"]
val lambda_to_flambda :
  backend:(module Backend_intf.S) ->
    module_ident:Ident.t ->
      size:int -> filename:string -> Lambda.lambda -> Flambda.program
[@@ocaml.doc
  " Generation of [Flambda] intermediate language code from [Lambda] code\n  by performing a form of closure conversion.\n\n  Function declarations (which may bind one or more variables identifying\n  functions, possibly with mutual recursion) are transformed to\n  [Set_of_closures] expressions.  [Project_closure] expressions are then\n  used to select a closure for a particular function from a [Set_of_closures]\n  expression.  The [Set_of_closures] expressions say nothing about the\n  actual runtime layout of the closures; this is handled when [Flambda] code\n  is translated to [Clambda] code.\n\n  The following transformations are also performed during closure\n  conversion:\n  - Constant blocks (by which is meant things wrapped in [Lambda.Const_block])\n    are converted to applications of the [Pmakeblock] primitive.\n  - [Levent] debugging event nodes are removed and the information within\n    them attached to function, method and [raise] calls.\n  - Tuplified functions are converted to curried functions and a stub\n    function emitted to call the curried version.  For example:\n      let rec f (x, y) = f (x + 1, y + 1)\n    is transformed to:\n      let rec internal_f x y = f (x + 1,y + 1)\n      and f (x, y) = internal_f x y  (* [f] is marked as a stub function *)\n  - The [Pdirapply] and [Prevapply] application primitives are removed and\n    converted to normal [Flambda] application nodes.\n\n  The [lambda_to_flambda] function is not re-entrant.\n"]

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.warning "+a-4-9-30-40-41-42"]

val lambda_to_flambda :
  backend:(module Backend_intf.S) ->
    module_ident:Ident.t ->
      size:int -> filename:string -> Lambda.lambda -> Flambda.program
[@@ocaml.doc
  " Generation of [Flambda] intermediate language code from [Lambda] code\n  by performing a form of closure conversion.\n\n  Function declarations (which may bind one or more variables identifying\n  functions, possibly with mutual recursion) are transformed to\n  [Set_of_closures] expressions.  [Project_closure] expressions are then\n  used to select a closure for a particular function from a [Set_of_closures]\n  expression.  The [Set_of_closures] expressions say nothing about the\n  actual runtime layout of the closures; this is handled when [Flambda] code\n  is translated to [Clambda] code.\n\n  The following transformations are also performed during closure\n  conversion:\n  - Constant blocks (by which is meant things wrapped in [Lambda.Const_block])\n    are converted to applications of the [Pmakeblock] primitive.\n  - [Levent] debugging event nodes are removed and the information within\n    them attached to function, method and [raise] calls.\n  - Tuplified functions are converted to curried functions and a stub\n    function emitted to call the curried version.  For example:\n      let rec f (x, y) = f (x + 1, y + 1)\n    is transformed to:\n      let rec internal_f x y = f (x + 1,y + 1)\n      and f (x, y) = internal_f x y  (* [f] is marked as a stub function *)\n  - The [Pdirapply] and [Prevapply] application primitives are removed and\n    converted to normal [Flambda] application nodes.\n\n  The [lambda_to_flambda] function is not re-entrant.\n"]


*******************************
********* Typed GOSPEL ********
*******************************
module closure_conversion.mli

  Namespace: closure_conversion.mli
    Type symbols
      
    Logic Symbols
      
    Exception Symbols
      
    Namespaces
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    [@@@ocaml.warning "+a-4-9-30-40-41-42"]
    
    val lambda_to_flambda :
    backend:(module Backend_intf.S) ->
      module_ident:Ident.t ->
        size:int -> filename:string -> Lambda.lambda -> Flambda.program
    [@@ocaml.doc
      " Generation of [Flambda] intermediate language code from [Lambda] code\n  by performing a form of closure conversion.\n\n  Function declarations (which may bind one or more variables identifying\n  functions, possibly with mutual recursion) are transformed to\n  [Set_of_closures] expressions.  [Project_closure] expressions are then\n  used to select a closure for a particular function from a [Set_of_closures]\n  expression.  The [Set_of_closures] expressions say nothing about the\n  actual runtime layout of the closures; this is handled when [Flambda] code\n  is translated to [Clambda] code.\n\n  The following transformations are also performed during closure\n  conversion:\n  - Constant blocks (by which is meant things wrapped in [Lambda.Const_block])\n    are converted to applications of the [Pmakeblock] primitive.\n  - [Levent] debugging event nodes are removed and the information within\n    them attached to function, method and [raise] calls.\n  - Tuplified functions are converted to curried functions and a stub\n    function emitted to call the curried version.  For example:\n      let rec f (x, y) = f (x + 1, y + 1)\n    is transformed to:\n      let rec internal_f x y = f (x + 1,y + 1)\n      and f (x, y) = internal_f x y  (* [f] is marked as a stub function *)\n  - The [Pdirapply] and [Prevapply] application primitives are removed and\n    converted to normal [Flambda] application nodes.\n\n  The [lambda_to_flambda] function is not re-entrant.\n"]
    


*** OK ***

