
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.text
  " Helper module for adding specialised arguments to sets of closures. "]
module Definition :
sig
  type t =
    | Existing_inner_free_var of Variable.t 
    | Projection_from_existing_specialised_arg of Projection.t 
end
module What_to_specialise :
sig
  type t
  val create : set_of_closures:Flambda.set_of_closures -> t
  val new_specialised_arg :
    t ->
      fun_var:Variable.t -> group:Variable.t -> definition:Definition.t -> t
  val make_direct_call_surrogate_for : t -> fun_var:Variable.t -> t
end
module type S  =
  sig
    val pass_name : string
    val what_to_specialise :
      env:Inline_and_simplify_aux.Env.t ->
        set_of_closures:Flambda.set_of_closures -> What_to_specialise.t
  end
module Make :
functor (T : S) ->
  sig
    val rewrite_set_of_closures :
      env:Inline_and_simplify_aux.Env.t ->
        duplicate_function:(env:Inline_and_simplify_aux.Env.t ->
                              set_of_closures:Flambda.set_of_closures ->
                                fun_var:Variable.t ->
                                  new_fun_var:Variable.t ->
                                    (Flambda.function_declaration *
                                      Flambda.specialised_to Variable.Map.t))
          ->
          set_of_closures:Flambda.set_of_closures ->
            (Flambda.expr * Inlining_cost.Benefit.t) option[@@ocaml.doc
                                                             " [duplicate_function] should be\n      [Inline_and_simplify.duplicate_function]. "]
  end

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.text
  " Helper module for adding specialised arguments to sets of closures. "]

module Definition :
sig
  type t =
  | Existing_inner_free_var of Variable.t 
  | Projection_from_existing_specialised_arg of Projection.t 
    
end

module What_to_specialise :
sig
  type t
    
  val create : set_of_closures:Flambda.set_of_closures -> t
  
  val new_specialised_arg :
    t ->
      fun_var:Variable.t -> group:Variable.t -> definition:Definition.t -> t
  
  val make_direct_call_surrogate_for : t -> fun_var:Variable.t -> t
  
end

module type S  =
  sig
    val pass_name : string
    
    val what_to_specialise :
      env:Inline_and_simplify_aux.Env.t ->
        set_of_closures:Flambda.set_of_closures -> What_to_specialise.t
    
  end

module Make :
functor (T : S) ->
  sig
    val rewrite_set_of_closures :
      env:Inline_and_simplify_aux.Env.t ->
        duplicate_function:(env:Inline_and_simplify_aux.Env.t ->
                              set_of_closures:Flambda.set_of_closures ->
                                fun_var:Variable.t ->
                                  new_fun_var:Variable.t ->
                                    (Flambda.function_declaration *
                                      Flambda.specialised_to Variable.Map.t))
          ->
          set_of_closures:Flambda.set_of_closures ->
            (Flambda.expr * Inlining_cost.Benefit.t) option[@@ocaml.doc
                                                             " [duplicate_function] should be\n      [Inline_and_simplify.duplicate_function]. "]
    
  end
File "./variable.mli", line 57, characters 12-13:
Error: Symbol t not found
