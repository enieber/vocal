
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.text
  " Kosaraju's algorithm for strongly connected components.\n\n  {b Warning:} this module is unstable and part of\n  {{!Compiler_libs}compiler-libs}.\n\n"]
module type S  =
  sig
    module Id : Identifiable.S
    type directed_graph = Id.Set.t Id.Map.t[@@ocaml.doc
                                             " If (a -> set) belongs to the map, it means that there are edges\n      from [a] to every element of [set].  It is assumed that no edge\n      points to a vertex not represented in the map. "]
    type component =
      | Has_loop of Id.t list 
      | No_loop of Id.t 
    val connected_components_sorted_from_roots_to_leaf :
      directed_graph -> component array
    val component_graph : directed_graph -> (component * int list) array
  end
module Make : functor (Id : Identifiable.S) -> S with module Id := Id

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.text
  " Kosaraju's algorithm for strongly connected components.\n\n  {b Warning:} this module is unstable and part of\n  {{!Compiler_libs}compiler-libs}.\n\n"]

module type S  =
  sig
    module Id : Identifiable.S
    type directed_graph = Id.Set.t Id.Map.t[@@ocaml.doc
                                             " If (a -> set) belongs to the map, it means that there are edges\n      from [a] to every element of [set].  It is assumed that no edge\n      points to a vertex not represented in the map. "]
      
    type component =
    | Has_loop of Id.t list 
    | No_loop of Id.t 
      
    val connected_components_sorted_from_roots_to_leaf :
      directed_graph -> component array
    
    val component_graph : directed_graph -> (component * int list) array
    
  end

module Make : functor (Id : Identifiable.S) -> S with module Id := Id
File "./identifiable.mli", line 37, characters 13-28:
Error: Symbol Set.OrderedType not found
