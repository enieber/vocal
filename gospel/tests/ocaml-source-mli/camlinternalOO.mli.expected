
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.text
  " Run-time support for objects and classes.\n    All functions in this module are for system use only, not for the\n    casual user. "]
[@@@ocaml.text " {1 Classes} "]
type tag
type label
type table
type meth
type t
type obj
type closure
val public_method_label : string -> tag
val new_method : table -> label
val new_variable : table -> string -> int
val new_methods_variables :
  table -> string array -> string array -> label array
val get_variable : table -> string -> int
val get_variables : table -> string array -> int array
val get_method_label : table -> string -> label
val get_method_labels : table -> string array -> label array
val get_method : table -> label -> meth
val set_method : table -> label -> meth -> unit
val set_methods : table -> label array -> unit
val narrow : table -> string array -> string array -> string array -> unit
val widen : table -> unit
val add_initializer : table -> (obj -> unit) -> unit
val dummy_table : table
val create_table : string array -> table
val init_class : table -> unit
val inherits :
  table ->
    string array ->
      string array ->
        string array ->
          (t * (table -> obj -> Obj.t) * t * obj) -> bool -> Obj.t array
val make_class :
  string array ->
    (table -> Obj.t -> t) ->
      (t * (table -> Obj.t -> t) * (Obj.t -> t) * Obj.t)
type init_table
val make_class_store : string array -> (table -> t) -> init_table -> unit
val dummy_class :
  (string * int * int) -> (t * (table -> Obj.t -> t) * (Obj.t -> t) * Obj.t)
[@@@ocaml.text " {1 Objects} "]
val copy : (< .. >  as 'a) -> 'a
val create_object : table -> obj
val create_object_opt : obj -> table -> obj
val run_initializers : obj -> table -> unit
val run_initializers_opt : obj -> obj -> table -> obj
val create_object_and_run_initializers : obj -> table -> obj
external send : obj -> tag -> t = "%send"
external sendcache : obj -> tag -> t -> int -> t = "%sendcache"
external sendself : obj -> label -> t = "%sendself"
external get_public_method : obj -> tag -> closure = "caml_get_public_method"
[@@noalloc ]
[@@@ocaml.text " {1 Table cache} "]
type tables
val lookup_tables : tables -> closure array -> tables
[@@@ocaml.text " {1 Builtins to reduce code size} "]
type impl =
  | GetConst 
  | GetVar 
  | GetEnv 
  | GetMeth 
  | SetVar 
  | AppConst 
  | AppVar 
  | AppEnv 
  | AppMeth 
  | AppConstConst 
  | AppConstVar 
  | AppConstEnv 
  | AppConstMeth 
  | AppVarConst 
  | AppEnvConst 
  | AppMethConst 
  | MethAppConst 
  | MethAppVar 
  | MethAppEnv 
  | MethAppMeth 
  | SendConst 
  | SendVar 
  | SendEnv 
  | SendMeth 
  | Closure of closure 
[@@@ocaml.text " {1 Parameters} "]
type params =
  {
  mutable compact_table: bool ;
  mutable copy_parent: bool ;
  mutable clean_when_copying: bool ;
  mutable retry_count: int ;
  mutable bucket_small_size: int }
val params : params
[@@@ocaml.text " {1 Statistics} "]
type stats = {
  classes: int ;
  methods: int ;
  inst_vars: int }
val stats : unit -> stats

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.text
  " Run-time support for objects and classes.\n    All functions in this module are for system use only, not for the\n    casual user. "]

[@@@ocaml.text " {1 Classes} "]

type tag
  

type label
  

type table
  

type meth
  

type t
  

type obj
  

type closure
  

val public_method_label : string -> tag


val new_method : table -> label


val new_variable : table -> string -> int


val new_methods_variables :
  table -> string array -> string array -> label array


val get_variable : table -> string -> int


val get_variables : table -> string array -> int array


val get_method_label : table -> string -> label


val get_method_labels : table -> string array -> label array


val get_method : table -> label -> meth


val set_method : table -> label -> meth -> unit


val set_methods : table -> label array -> unit


val narrow : table -> string array -> string array -> string array -> unit


val widen : table -> unit


val add_initializer : table -> (obj -> unit) -> unit


val dummy_table : table


val create_table : string array -> table


val init_class : table -> unit


val inherits :
  table ->
    string array ->
      string array ->
        string array ->
          (t * (table -> obj -> Obj.t) * t * obj) -> bool -> Obj.t array


val make_class :
  string array ->
    (table -> Obj.t -> t) ->
      (t * (table -> Obj.t -> t) * (Obj.t -> t) * Obj.t)


type init_table
  

val make_class_store : string array -> (table -> t) -> init_table -> unit


val dummy_class :
  (string * int * int) -> (t * (table -> Obj.t -> t) * (Obj.t -> t) * Obj.t)


[@@@ocaml.text " {1 Objects} "]

val copy : (< .. >  as 'a) -> 'a


val create_object : table -> obj


val create_object_opt : obj -> table -> obj


val run_initializers : obj -> table -> unit


val run_initializers_opt : obj -> obj -> table -> obj


val create_object_and_run_initializers : obj -> table -> obj


external send : obj -> tag -> t = "%send"


external sendcache : obj -> tag -> t -> int -> t = "%sendcache"


external sendself : obj -> label -> t = "%sendself"


external get_public_method : obj -> tag -> closure = "caml_get_public_method"
[@@noalloc ]


[@@@ocaml.text " {1 Table cache} "]

type tables
  

val lookup_tables : tables -> closure array -> tables


[@@@ocaml.text " {1 Builtins to reduce code size} "]

type impl =
| GetConst 
| GetVar 
| GetEnv 
| GetMeth 
| SetVar 
| AppConst 
| AppVar 
| AppEnv 
| AppMeth 
| AppConstConst 
| AppConstVar 
| AppConstEnv 
| AppConstMeth 
| AppVarConst 
| AppEnvConst 
| AppMethConst 
| MethAppConst 
| MethAppVar 
| MethAppEnv 
| MethAppMeth 
| SendConst 
| SendVar 
| SendEnv 
| SendMeth 
| Closure of closure 
  

[@@@ocaml.text " {1 Parameters} "]

type params =
{
mutable compact_table: bool ;
mutable copy_parent: bool ;
mutable clean_when_copying: bool ;
mutable retry_count: int ;
mutable bucket_small_size: int }
  

val params : params


[@@@ocaml.text " {1 Statistics} "]

type stats = {
classes: int ;
methods: int ;
inst_vars: int }
  

val stats : unit -> stats


*******************************
********* Typed GOSPEL ********
*******************************
module camlinternalOO.mli

  Namespace: camlinternalOO.mli
    Type symbols
       closure
       impl
       init_table
       label
       meth
       obj
       params
       stats
       t
       table
       tables
       tag
      
    Logic Symbols
      function AppConst  : impl
      function AppConstConst  : impl
      function AppConstEnv  : impl
      function AppConstMeth  : impl
      function AppConstVar  : impl
      function AppEnv  : impl
      function AppEnvConst  : impl
      function AppMeth  : impl
      function AppMethConst  : impl
      function AppVar  : impl
      function AppVarConst  : impl
      function Closure (_:closure) : impl
      function GetConst  : impl
      function GetEnv  : impl
      function GetMeth  : impl
      function GetVar  : impl
      function MethAppConst  : impl
      function MethAppEnv  : impl
      function MethAppMeth  : impl
      function MethAppVar  : impl
      function SendConst  : impl
      function SendEnv  : impl
      function SendMeth  : impl
      function SendVar  : impl
      function SetVar  : impl
      function bucket_small_size (_:params) : int
      function classes (_:stats) : int
      function clean_when_copying (_:params) : bool
      function compact_table (_:params) : bool
      function constr#params (_:bool) (_:bool) (_:bool) (_:int) (_:int) : 
      params
      function constr#stats (_:int) (_:int) (_:int) : stats
      function copy_parent (_:params) : bool
      function inst_vars (_:stats) : int
      function methods (_:stats) : int
      function retry_count (_:params) : int
      
    Exception Symbols
      
    Namespaces
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    [@@@ocaml.text
      " Run-time support for objects and classes.\n    All functions in this module are for system use only, not for the\n    casual user. "]
    
    [@@@ocaml.text " {1 Classes} "]
    
    type tag
    
    
    type label
    
    
    type table
    
    
    type meth
    
    
    type t
    
    
    type obj
    
    
    type closure
    
    
    val public_method_label : string -> tag
    
    
    val new_method : table -> label
    
    
    val new_variable : table -> string -> int
    
    
    val new_methods_variables :
    table -> string array -> string array -> label array
    
    
    val get_variable : table -> string -> int
    
    
    val get_variables : table -> string array -> int array
    
    
    val get_method_label : table -> string -> label
    
    
    val get_method_labels : table -> string array -> label array
    
    
    val get_method : table -> label -> meth
    
    
    val set_method : table -> label -> meth -> unit
    
    
    val set_methods : table -> label array -> unit
    
    
    val narrow :
    table -> string array -> string array -> string array -> unit
    
    
    val widen : table -> unit
    
    
    val add_initializer : table -> (obj -> unit) -> unit
    
    
    val dummy_table : table
    
    
    val create_table : string array -> table
    
    
    val init_class : table -> unit
    
    
    val inherits :
    table ->
      string array ->
        string array ->
          string array ->
            (t * (table -> obj -> Obj.t) * t * obj) -> bool -> Obj.t array
    
    
    val make_class :
    string array ->
      (table -> Obj.t -> t) ->
        (t * (table -> Obj.t -> t) * (Obj.t -> t) * Obj.t)
    
    
    type init_table
    
    
    val make_class_store : string array -> (table -> t) -> init_table -> unit
    
    
    val dummy_class :
    (string * int * int) ->
      (t * (table -> Obj.t -> t) * (Obj.t -> t) * Obj.t)
    
    
    [@@@ocaml.text " {1 Objects} "]
    
    val copy : (< .. >  as 'a) -> 'a
    
    
    val create_object : table -> obj
    
    
    val create_object_opt : obj -> table -> obj
    
    
    val run_initializers : obj -> table -> unit
    
    
    val run_initializers_opt : obj -> obj -> table -> obj
    
    
    val create_object_and_run_initializers : obj -> table -> obj
    
    
    external send : obj -> tag -> t = "%send"
    
    
    external sendcache : obj -> tag -> t -> int -> t = "%sendcache"
    
    
    external sendself : obj -> label -> t = "%sendself"
    
    
    external get_public_method : obj -> tag -> closure =
    "caml_get_public_method"[@@noalloc ]
    
    
    [@@@ocaml.text " {1 Table cache} "]
    
    type tables
    
    
    val lookup_tables : tables -> closure array -> tables
    
    
    [@@@ocaml.text " {1 Builtins to reduce code size} "]
    
    type impl = GetConst of 
                function GetConst  : impl
             | GetVar of 
               function GetVar  : impl
             | GetEnv of 
               function GetEnv  : impl
             | GetMeth of 
               function GetMeth  : impl
             | SetVar of 
               function SetVar  : impl
             | AppConst of 
               function AppConst  : impl
             | AppVar of 
               function AppVar  : impl
             | AppEnv of 
               function AppEnv  : impl
             | AppMeth of 
               function AppMeth  : impl
             | AppConstConst of 
               function AppConstConst  : impl
             | AppConstVar of 
               function AppConstVar  : impl
             | AppConstEnv of 
               function AppConstEnv  : impl
             | AppConstMeth of 
               function AppConstMeth  : impl
             | AppVarConst of 
               function AppVarConst  : impl
             | AppEnvConst of 
               function AppEnvConst  : impl
             | AppMethConst of 
               function AppMethConst  : impl
             | MethAppConst of 
               function MethAppConst  : impl
             | MethAppVar of 
               function MethAppVar  : impl
             | MethAppEnv of 
               function MethAppEnv  : impl
             | MethAppMeth of 
               function MethAppMeth  : impl
             | SendConst of 
               function SendConst  : impl
             | SendVar of 
               function SendVar  : impl
             | SendEnv of 
               function SendEnv  : impl
             | SendMeth of 
               function SendMeth  : impl
             | Closure of closure
               function Closure (_:closure) : impl
    
    
    [@@@ocaml.text " {1 Parameters} "]
    
    type params = {mutable compact_table:bool; mutable copy_parent:bool; mutable clean_when_copying:
               bool; mutable retry_count:int; mutable bucket_small_size:
               int}
               function constr#params (_:bool) (_:bool) (_:bool) (_:int) (_:int) : params
                 function compact_table (_:params) : bool
                 function copy_parent (_:params) : bool
                 function clean_when_copying (_:params) : bool
                 function retry_count (_:params) : int
                 function bucket_small_size (_:params) : int
    
    
    val params#1 : params
    
    
    [@@@ocaml.text " {1 Statistics} "]
    
    type stats = {classes:int; methods:int; inst_vars:int}
              function constr#stats (_:int) (_:int) (_:int) : stats
                function classes (_:stats) : int
                function methods (_:stats) : int
                function inst_vars (_:stats) : int
    
    
    val stats#1 : unit -> stats
    


*** OK ***

