
*******************************
********** Parsed file ********
*******************************
val source_of_module : Lexing.position -> string -> string
type buffer
val buffer_max_count : int ref
val flush_buffer_list : unit -> unit
val get_buffer : Lexing.position -> string -> buffer
val buffer_content : buffer -> string
val buffer_length : buffer -> int
type position = (int * int)
val next_linefeed : buffer -> int -> int
val next_line : buffer -> position -> position
val line_of_pos : buffer -> int -> position
val pos_of_line : buffer -> int -> position
val point_of_coord : buffer -> int -> int -> int
val start_and_cnum : buffer -> Lexing.position -> (int * int)

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

val source_of_module : Lexing.position -> string -> string


type buffer
  

val buffer_max_count : int ref


val flush_buffer_list : unit -> unit


val get_buffer : Lexing.position -> string -> buffer


val buffer_content : buffer -> string


val buffer_length : buffer -> int


type position = (int * int)
  

val next_linefeed : buffer -> int -> int


val next_line : buffer -> position -> position


val line_of_pos : buffer -> int -> position


val pos_of_line : buffer -> int -> position


val point_of_coord : buffer -> int -> int -> int


val start_and_cnum : buffer -> Lexing.position -> (int * int)


*******************************
********* Typed GOSPEL ********
*******************************
module source.mli

  Namespace: source.mli
    Type symbols
       buffer
       position [=int * int]
      
    Logic Symbols
      
    Exception Symbols
      
    Namespaces
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    val source_of_module : Lexing.position -> string -> string
    
    
    type buffer
    
    
    val buffer_max_count : int ref
    
    
    val flush_buffer_list : unit -> unit
    
    
    val get_buffer : Lexing.position -> string -> buffer
    
    
    val buffer_content : buffer -> string
    
    
    val buffer_length : buffer -> int
    
    
    type position = int * int
    
    
    val next_linefeed : buffer -> int -> int
    
    
    val next_line : buffer -> position -> position
    
    
    val line_of_pos : buffer -> int -> position
    
    
    val pos_of_line : buffer -> int -> position
    
    
    val point_of_coord : buffer -> int -> int -> int
    
    
    val start_and_cnum : buffer -> Lexing.position -> (int * int)
    


*** OK ***

