
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.text " Operations on file names. "]
val current_dir_name : string[@@ocaml.doc
                               " The conventional name for the current directory (e.g. [.] in Unix). "]
val parent_dir_name : string[@@ocaml.doc
                              " The conventional name for the parent of the current directory\n   (e.g. [..] in Unix). "]
val dir_sep : string[@@ocaml.doc
                      " The directory separator (e.g. [/] in Unix). @since 3.11.2 "]
val concat : string -> string -> string[@@ocaml.doc
                                         " [concat dir file] returns a file name that designates file\n   [file] in directory [dir]. "]
val is_relative : string -> bool[@@ocaml.doc
                                  " Return [true] if the file name is relative to the current\n   directory, [false] if it is absolute (i.e. in Unix, starts\n   with [/]). "]
val is_implicit : string -> bool[@@ocaml.doc
                                  " Return [true] if the file name is relative and does not start\n   with an explicit reference to the current directory ([./] or\n   [../] in Unix), [false] if it starts with an explicit reference\n   to the root directory or the current directory. "]
val check_suffix : string -> string -> bool[@@ocaml.doc
                                             " [check_suffix name suff] returns [true] if the filename [name]\n   ends with the suffix [suff]. "]
val chop_suffix : string -> string -> string[@@ocaml.doc
                                              " [chop_suffix name suff] removes the suffix [suff] from\n   the filename [name]. The behavior is undefined if [name] does not\n   end with the suffix [suff]. "]
val extension : string -> string[@@ocaml.doc
                                  " [extension name] is the shortest suffix [ext] of [name0] where:\n\n    - [name0] is the longest suffix of [name] that does not\n      contain a directory separator;\n    - [ext] starts with a period;\n    - [ext] is preceded by at least one non-period character\n      in [name0].\n\n    If such a suffix does not exist, [extension name] is the empty\n    string.\n\n    @since 4.04\n"]
val remove_extension : string -> string[@@ocaml.doc
                                         " Return the given file name without its extension, as defined\n    in {!Filename.extension}. If the extension is empty, the function\n    returns the given file name.\n\n    The following invariant holds for any file name [s]:\n\n    [remove_extension s ^ extension s = s]\n\n    @since 4.04\n"]
val chop_extension : string -> string[@@ocaml.doc
                                       " Same as {!Filename.remove_extension}, but raise [Invalid_argument]\n    if the given name has an empty extension. "]
val basename : string -> string[@@ocaml.doc
                                 " Split a file name into directory name / base file name.\n   If [name] is a valid file name, then [concat (dirname name) (basename name)]\n   returns a file name which is equivalent to [name]. Moreover,\n   after setting the current directory to [dirname name] (with {!Sys.chdir}),\n   references to [basename name] (which is a relative file name)\n   designate the same file as [name] before the call to {!Sys.chdir}.\n\n   This function conforms to the specification of POSIX.1-2008 for the\n   [basename] utility. "]
val dirname : string -> string[@@ocaml.doc
                                " See {!Filename.basename}.\n   This function conforms to the specification of POSIX.1-2008 for the\n   [dirname] utility. "]
val temp_file : ?temp_dir:string -> string -> string -> string[@@ocaml.doc
                                                                " [temp_file prefix suffix] returns the name of a\n   fresh temporary file in the temporary directory.\n   The base name of the temporary file is formed by concatenating\n   [prefix], then a suitably chosen integer number, then [suffix].\n   The optional argument [temp_dir] indicates the temporary directory\n   to use, defaulting to the current result of {!Filename.get_temp_dir_name}.\n   The temporary file is created empty, with permissions [0o600]\n   (readable and writable only by the file owner).  The file is\n   guaranteed to be different from any other file that existed when\n   [temp_file] was called.\n   Raise [Sys_error] if the file could not be created.\n   @before 3.11.2 no ?temp_dir optional argument\n"]
val open_temp_file :
  ?mode:open_flag list ->
    ?perms:int ->
      ?temp_dir:string -> string -> string -> (string * out_channel)[@@ocaml.doc
                                                                    " Same as {!Filename.temp_file}, but returns both the name of a fresh\n   temporary file, and an output channel opened (atomically) on\n   this file.  This function is more secure than [temp_file]: there\n   is no risk that the temporary file will be modified (e.g. replaced\n   by a symbolic link) before the program opens it.  The optional argument\n   [mode] is a list of additional flags to control the opening of the file.\n   It can contain one or several of [Open_append], [Open_binary],\n   and [Open_text].  The default is [[Open_text]] (open in text mode). The\n   file is created with permissions [perms] (defaults to readable and\n   writable only by the file owner, [0o600]).\n\n   @raise Sys_error if the file could not be opened.\n   @before 4.03.0 no ?perms optional argument\n   @before 3.11.2 no ?temp_dir optional argument\n"]
val get_temp_dir_name : unit -> string[@@ocaml.doc
                                        " The name of the temporary directory:\n    Under Unix, the value of the [TMPDIR] environment variable, or \"/tmp\"\n    if the variable is not set.\n    Under Windows, the value of the [TEMP] environment variable, or \".\"\n    if the variable is not set.\n    The temporary directory can be changed with {!Filename.set_temp_dir_name}.\n    @since 4.00.0\n"]
val set_temp_dir_name : string -> unit[@@ocaml.doc
                                        " Change the temporary directory returned by {!Filename.get_temp_dir_name}\n    and used by {!Filename.temp_file} and {!Filename.open_temp_file}.\n    @since 4.00.0\n"]
val temp_dir_name : string[@@ocaml.deprecated
                            "Use Filename.get_temp_dir_name instead"]
[@@ocaml.doc
  " The name of the initial temporary directory:\n    Under Unix, the value of the [TMPDIR] environment variable, or \"/tmp\"\n    if the variable is not set.\n    Under Windows, the value of the [TEMP] environment variable, or \".\"\n    if the variable is not set.\n    @deprecated You should use {!Filename.get_temp_dir_name} instead.\n    @since 3.09.1\n"]
val quote : string -> string[@@ocaml.doc
                              " Return a quoted version of a file name, suitable for use as\n    one argument in a command line, escaping all meta-characters.\n    Warning: under Windows, the output is only suitable for use\n    with programs that follow the standard Windows quoting\n    conventions.\n "]

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.text " Operations on file names. "]

val current_dir_name : string[@@ocaml.doc
                               " The conventional name for the current directory (e.g. [.] in Unix). "]


val parent_dir_name : string[@@ocaml.doc
                              " The conventional name for the parent of the current directory\n   (e.g. [..] in Unix). "]


val dir_sep : string[@@ocaml.doc
                      " The directory separator (e.g. [/] in Unix). @since 3.11.2 "]


val concat : string -> string -> string[@@ocaml.doc
                                         " [concat dir file] returns a file name that designates file\n   [file] in directory [dir]. "]


val is_relative : string -> bool[@@ocaml.doc
                                  " Return [true] if the file name is relative to the current\n   directory, [false] if it is absolute (i.e. in Unix, starts\n   with [/]). "]


val is_implicit : string -> bool[@@ocaml.doc
                                  " Return [true] if the file name is relative and does not start\n   with an explicit reference to the current directory ([./] or\n   [../] in Unix), [false] if it starts with an explicit reference\n   to the root directory or the current directory. "]


val check_suffix : string -> string -> bool[@@ocaml.doc
                                             " [check_suffix name suff] returns [true] if the filename [name]\n   ends with the suffix [suff]. "]


val chop_suffix : string -> string -> string[@@ocaml.doc
                                              " [chop_suffix name suff] removes the suffix [suff] from\n   the filename [name]. The behavior is undefined if [name] does not\n   end with the suffix [suff]. "]


val extension : string -> string[@@ocaml.doc
                                  " [extension name] is the shortest suffix [ext] of [name0] where:\n\n    - [name0] is the longest suffix of [name] that does not\n      contain a directory separator;\n    - [ext] starts with a period;\n    - [ext] is preceded by at least one non-period character\n      in [name0].\n\n    If such a suffix does not exist, [extension name] is the empty\n    string.\n\n    @since 4.04\n"]


val remove_extension : string -> string[@@ocaml.doc
                                         " Return the given file name without its extension, as defined\n    in {!Filename.extension}. If the extension is empty, the function\n    returns the given file name.\n\n    The following invariant holds for any file name [s]:\n\n    [remove_extension s ^ extension s = s]\n\n    @since 4.04\n"]


val chop_extension : string -> string[@@ocaml.doc
                                       " Same as {!Filename.remove_extension}, but raise [Invalid_argument]\n    if the given name has an empty extension. "]


val basename : string -> string[@@ocaml.doc
                                 " Split a file name into directory name / base file name.\n   If [name] is a valid file name, then [concat (dirname name) (basename name)]\n   returns a file name which is equivalent to [name]. Moreover,\n   after setting the current directory to [dirname name] (with {!Sys.chdir}),\n   references to [basename name] (which is a relative file name)\n   designate the same file as [name] before the call to {!Sys.chdir}.\n\n   This function conforms to the specification of POSIX.1-2008 for the\n   [basename] utility. "]


val dirname : string -> string[@@ocaml.doc
                                " See {!Filename.basename}.\n   This function conforms to the specification of POSIX.1-2008 for the\n   [dirname] utility. "]


val temp_file : ?temp_dir:string -> string -> string -> string[@@ocaml.doc
                                                                " [temp_file prefix suffix] returns the name of a\n   fresh temporary file in the temporary directory.\n   The base name of the temporary file is formed by concatenating\n   [prefix], then a suitably chosen integer number, then [suffix].\n   The optional argument [temp_dir] indicates the temporary directory\n   to use, defaulting to the current result of {!Filename.get_temp_dir_name}.\n   The temporary file is created empty, with permissions [0o600]\n   (readable and writable only by the file owner).  The file is\n   guaranteed to be different from any other file that existed when\n   [temp_file] was called.\n   Raise [Sys_error] if the file could not be created.\n   @before 3.11.2 no ?temp_dir optional argument\n"]


val open_temp_file :
  ?mode:open_flag list ->
    ?perms:int ->
      ?temp_dir:string -> string -> string -> (string * out_channel)[@@ocaml.doc
                                                                    " Same as {!Filename.temp_file}, but returns both the name of a fresh\n   temporary file, and an output channel opened (atomically) on\n   this file.  This function is more secure than [temp_file]: there\n   is no risk that the temporary file will be modified (e.g. replaced\n   by a symbolic link) before the program opens it.  The optional argument\n   [mode] is a list of additional flags to control the opening of the file.\n   It can contain one or several of [Open_append], [Open_binary],\n   and [Open_text].  The default is [[Open_text]] (open in text mode). The\n   file is created with permissions [perms] (defaults to readable and\n   writable only by the file owner, [0o600]).\n\n   @raise Sys_error if the file could not be opened.\n   @before 4.03.0 no ?perms optional argument\n   @before 3.11.2 no ?temp_dir optional argument\n"]


val get_temp_dir_name : unit -> string[@@ocaml.doc
                                        " The name of the temporary directory:\n    Under Unix, the value of the [TMPDIR] environment variable, or \"/tmp\"\n    if the variable is not set.\n    Under Windows, the value of the [TEMP] environment variable, or \".\"\n    if the variable is not set.\n    The temporary directory can be changed with {!Filename.set_temp_dir_name}.\n    @since 4.00.0\n"]


val set_temp_dir_name : string -> unit[@@ocaml.doc
                                        " Change the temporary directory returned by {!Filename.get_temp_dir_name}\n    and used by {!Filename.temp_file} and {!Filename.open_temp_file}.\n    @since 4.00.0\n"]


val temp_dir_name : string[@@ocaml.deprecated
                            "Use Filename.get_temp_dir_name instead"]
[@@ocaml.doc
  " The name of the initial temporary directory:\n    Under Unix, the value of the [TMPDIR] environment variable, or \"/tmp\"\n    if the variable is not set.\n    Under Windows, the value of the [TEMP] environment variable, or \".\"\n    if the variable is not set.\n    @deprecated You should use {!Filename.get_temp_dir_name} instead.\n    @since 3.09.1\n"]


val quote : string -> string[@@ocaml.doc
                              " Return a quoted version of a file name, suitable for use as\n    one argument in a command line, escaping all meta-characters.\n    Warning: under Windows, the output is only suitable for use\n    with programs that follow the standard Windows quoting\n    conventions.\n "]


*******************************
********* Typed GOSPEL ********
*******************************
module filename.mli

  Namespace: filename.mli
    Type symbols
      
    Logic Symbols
      
    Exception Symbols
      
    Namespaces
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    [@@@ocaml.text " Operations on file names. "]
    
    val current_dir_name :
    string[@@ocaml.doc
            " The conventional name for the current directory (e.g. [.] in Unix). "]
    
    
    val parent_dir_name :
    string[@@ocaml.doc
            " The conventional name for the parent of the current directory\n   (e.g. [..] in Unix). "]
    
    
    val dir_sep :
    string[@@ocaml.doc
            " The directory separator (e.g. [/] in Unix). @since 3.11.2 "]
    
    
    val concat :
    string -> string -> string[@@ocaml.doc
                                " [concat dir file] returns a file name that designates file\n   [file] in directory [dir]. "]
    
    
    val is_relative :
    string -> bool[@@ocaml.doc
                    " Return [true] if the file name is relative to the current\n   directory, [false] if it is absolute (i.e. in Unix, starts\n   with [/]). "]
    
    
    val is_implicit :
    string -> bool[@@ocaml.doc
                    " Return [true] if the file name is relative and does not start\n   with an explicit reference to the current directory ([./] or\n   [../] in Unix), [false] if it starts with an explicit reference\n   to the root directory or the current directory. "]
    
    
    val check_suffix :
    string -> string -> bool[@@ocaml.doc
                              " [check_suffix name suff] returns [true] if the filename [name]\n   ends with the suffix [suff]. "]
    
    
    val chop_suffix :
    string -> string -> string[@@ocaml.doc
                                " [chop_suffix name suff] removes the suffix [suff] from\n   the filename [name]. The behavior is undefined if [name] does not\n   end with the suffix [suff]. "]
    
    
    val extension :
    string -> string[@@ocaml.doc
                      " [extension name] is the shortest suffix [ext] of [name0] where:\n\n    - [name0] is the longest suffix of [name] that does not\n      contain a directory separator;\n    - [ext] starts with a period;\n    - [ext] is preceded by at least one non-period character\n      in [name0].\n\n    If such a suffix does not exist, [extension name] is the empty\n    string.\n\n    @since 4.04\n"]
    
    
    val remove_extension :
    string -> string[@@ocaml.doc
                      " Return the given file name without its extension, as defined\n    in {!Filename.extension}. If the extension is empty, the function\n    returns the given file name.\n\n    The following invariant holds for any file name [s]:\n\n    [remove_extension s ^ extension s = s]\n\n    @since 4.04\n"]
    
    
    val chop_extension :
    string -> string[@@ocaml.doc
                      " Same as {!Filename.remove_extension}, but raise [Invalid_argument]\n    if the given name has an empty extension. "]
    
    
    val basename :
    string -> string[@@ocaml.doc
                      " Split a file name into directory name / base file name.\n   If [name] is a valid file name, then [concat (dirname name) (basename name)]\n   returns a file name which is equivalent to [name]. Moreover,\n   after setting the current directory to [dirname name] (with {!Sys.chdir}),\n   references to [basename name] (which is a relative file name)\n   designate the same file as [name] before the call to {!Sys.chdir}.\n\n   This function conforms to the specification of POSIX.1-2008 for the\n   [basename] utility. "]
    
    
    val dirname :
    string -> string[@@ocaml.doc
                      " See {!Filename.basename}.\n   This function conforms to the specification of POSIX.1-2008 for the\n   [dirname] utility. "]
    
    
    val temp_file :
    ?temp_dir:string -> string -> string -> string[@@ocaml.doc
                                                    " [temp_file prefix suffix] returns the name of a\n   fresh temporary file in the temporary directory.\n   The base name of the temporary file is formed by concatenating\n   [prefix], then a suitably chosen integer number, then [suffix].\n   The optional argument [temp_dir] indicates the temporary directory\n   to use, defaulting to the current result of {!Filename.get_temp_dir_name}.\n   The temporary file is created empty, with permissions [0o600]\n   (readable and writable only by the file owner).  The file is\n   guaranteed to be different from any other file that existed when\n   [temp_file] was called.\n   Raise [Sys_error] if the file could not be created.\n   @before 3.11.2 no ?temp_dir optional argument\n"]
    
    
    val open_temp_file :
    ?mode:open_flag list ->
      ?perms:int ->
        ?temp_dir:string -> string -> string -> (string * out_channel)
    [@@ocaml.doc
      " Same as {!Filename.temp_file}, but returns both the name of a fresh\n   temporary file, and an output channel opened (atomically) on\n   this file.  This function is more secure than [temp_file]: there\n   is no risk that the temporary file will be modified (e.g. replaced\n   by a symbolic link) before the program opens it.  The optional argument\n   [mode] is a list of additional flags to control the opening of the file.\n   It can contain one or several of [Open_append], [Open_binary],\n   and [Open_text].  The default is [[Open_text]] (open in text mode). The\n   file is created with permissions [perms] (defaults to readable and\n   writable only by the file owner, [0o600]).\n\n   @raise Sys_error if the file could not be opened.\n   @before 4.03.0 no ?perms optional argument\n   @before 3.11.2 no ?temp_dir optional argument\n"]
    
    
    val get_temp_dir_name :
    unit -> string[@@ocaml.doc
                    " The name of the temporary directory:\n    Under Unix, the value of the [TMPDIR] environment variable, or \"/tmp\"\n    if the variable is not set.\n    Under Windows, the value of the [TEMP] environment variable, or \".\"\n    if the variable is not set.\n    The temporary directory can be changed with {!Filename.set_temp_dir_name}.\n    @since 4.00.0\n"]
    
    
    val set_temp_dir_name :
    string -> unit[@@ocaml.doc
                    " Change the temporary directory returned by {!Filename.get_temp_dir_name}\n    and used by {!Filename.temp_file} and {!Filename.open_temp_file}.\n    @since 4.00.0\n"]
    
    
    val temp_dir_name :
    string[@@ocaml.deprecated "Use Filename.get_temp_dir_name instead"]
    [@@ocaml.doc
      " The name of the initial temporary directory:\n    Under Unix, the value of the [TMPDIR] environment variable, or \"/tmp\"\n    if the variable is not set.\n    Under Windows, the value of the [TEMP] environment variable, or \".\"\n    if the variable is not set.\n    @deprecated You should use {!Filename.get_temp_dir_name} instead.\n    @since 3.09.1\n"]
    
    
    val quote :
    string -> string[@@ocaml.doc
                      " Return a quoted version of a file name, suitable for use as\n    one argument in a command line, escaping all meta-characters.\n    Warning: under Windows, the output is only suitable for use\n    with programs that follow the standard Windows quoting\n    conventions.\n "]
    


*** OK ***

