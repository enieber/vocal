
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.warning "+a-4-9-30-40-41-42"]
[@@@ocaml.text
  " Description of the semantics of primitives, to be used for optimization\n    purposes.\n\n    \"No effects\" means that the primitive does not change the observable state\n    of the world.  For example, it must not write to any mutable storage,\n    call arbitrary external functions or change control flow (e.g. by raising\n    an exception).  Note that allocation is not \"No effects\" (see below).\n\n    It is assumed in the compiler that applications of primitives with no\n    effects, whose results are not used, may be eliminated.  It is further\n    assumed that applications of primitives with no effects may be\n    duplicated (and thus possibly executed more than once).\n\n    (Exceptions arising from allocation points, for example \"out of memory\" or\n    exceptions propagated from finalizers or signal handlers, are treated as\n    \"effects out of the ether\" and thus ignored for our determination here\n    of effectfulness.  The same goes for floating point operations that may\n    cause hardware traps on some platforms.)\n\n    \"Only generative effects\" means that a primitive does not change the\n    observable state of the world save for possibly affecting the state of\n    the garbage collector by performing an allocation.  Applications of\n    primitives that only have generative effects and whose results are unused\n    may be eliminated by the compiler.  However, unlike \"No effects\"\n    primitives, such applications will never be eligible for duplication.\n\n    \"Arbitrary effects\" covers all other primitives.\n\n    \"No coeffects\" means that the primitive does not observe the effects (in\n    the sense described above) of other expressions.  For example, it must not\n    read from any mutable storage or call arbitrary external functions.\n\n    It is assumed in the compiler that, subject to data dependencies,\n    expressions with neither effects nor coeffects may be reordered with\n    respect to other expressions.\n"]
type effects =
  | No_effects 
  | Only_generative_effects 
  | Arbitrary_effects 
type coeffects =
  | No_coeffects 
  | Has_coeffects 
val for_primitive : Lambda.primitive -> (effects * coeffects)[@@ocaml.doc
                                                               " Describe the semantics of a primitive.  This does not take into account of\n    the (non-)(co)effectfulness of the arguments in a primitive application.\n    To determine whether such an application is (co)effectful, the arguments\n    must also be analysed. "]
type return_type =
  | Float 
  | Other 
val return_type_of_primitive : Lambda.primitive -> return_type

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.warning "+a-4-9-30-40-41-42"]

[@@@ocaml.text
  " Description of the semantics of primitives, to be used for optimization\n    purposes.\n\n    \"No effects\" means that the primitive does not change the observable state\n    of the world.  For example, it must not write to any mutable storage,\n    call arbitrary external functions or change control flow (e.g. by raising\n    an exception).  Note that allocation is not \"No effects\" (see below).\n\n    It is assumed in the compiler that applications of primitives with no\n    effects, whose results are not used, may be eliminated.  It is further\n    assumed that applications of primitives with no effects may be\n    duplicated (and thus possibly executed more than once).\n\n    (Exceptions arising from allocation points, for example \"out of memory\" or\n    exceptions propagated from finalizers or signal handlers, are treated as\n    \"effects out of the ether\" and thus ignored for our determination here\n    of effectfulness.  The same goes for floating point operations that may\n    cause hardware traps on some platforms.)\n\n    \"Only generative effects\" means that a primitive does not change the\n    observable state of the world save for possibly affecting the state of\n    the garbage collector by performing an allocation.  Applications of\n    primitives that only have generative effects and whose results are unused\n    may be eliminated by the compiler.  However, unlike \"No effects\"\n    primitives, such applications will never be eligible for duplication.\n\n    \"Arbitrary effects\" covers all other primitives.\n\n    \"No coeffects\" means that the primitive does not observe the effects (in\n    the sense described above) of other expressions.  For example, it must not\n    read from any mutable storage or call arbitrary external functions.\n\n    It is assumed in the compiler that, subject to data dependencies,\n    expressions with neither effects nor coeffects may be reordered with\n    respect to other expressions.\n"]

type effects =
| No_effects 
| Only_generative_effects 
| Arbitrary_effects 
  

type coeffects =
| No_coeffects 
| Has_coeffects 
  

val for_primitive : Lambda.primitive -> (effects * coeffects)[@@ocaml.doc
                                                               " Describe the semantics of a primitive.  This does not take into account of\n    the (non-)(co)effectfulness of the arguments in a primitive application.\n    To determine whether such an application is (co)effectful, the arguments\n    must also be analysed. "]


type return_type =
| Float 
| Other 
  

val return_type_of_primitive : Lambda.primitive -> return_type


*******************************
********* Typed GOSPEL ********
*******************************
module semantics_of_primitives.mli

  Namespace: semantics_of_primitives.mli
    Type symbols
       coeffects
       effects
       return_type
      
    Logic Symbols
      function Arbitrary_effects  : effects
      function Float  : return_type
      function Has_coeffects  : coeffects
      function No_coeffects  : coeffects
      function No_effects  : effects
      function Only_generative_effects  : effects
      function Other  : return_type
      
    Exception Symbols
      
    Namespaces
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    [@@@ocaml.warning "+a-4-9-30-40-41-42"]
    
    [@@@ocaml.text
      " Description of the semantics of primitives, to be used for optimization\n    purposes.\n\n    \"No effects\" means that the primitive does not change the observable state\n    of the world.  For example, it must not write to any mutable storage,\n    call arbitrary external functions or change control flow (e.g. by raising\n    an exception).  Note that allocation is not \"No effects\" (see below).\n\n    It is assumed in the compiler that applications of primitives with no\n    effects, whose results are not used, may be eliminated.  It is further\n    assumed that applications of primitives with no effects may be\n    duplicated (and thus possibly executed more than once).\n\n    (Exceptions arising from allocation points, for example \"out of memory\" or\n    exceptions propagated from finalizers or signal handlers, are treated as\n    \"effects out of the ether\" and thus ignored for our determination here\n    of effectfulness.  The same goes for floating point operations that may\n    cause hardware traps on some platforms.)\n\n    \"Only generative effects\" means that a primitive does not change the\n    observable state of the world save for possibly affecting the state of\n    the garbage collector by performing an allocation.  Applications of\n    primitives that only have generative effects and whose results are unused\n    may be eliminated by the compiler.  However, unlike \"No effects\"\n    primitives, such applications will never be eligible for duplication.\n\n    \"Arbitrary effects\" covers all other primitives.\n\n    \"No coeffects\" means that the primitive does not observe the effects (in\n    the sense described above) of other expressions.  For example, it must not\n    read from any mutable storage or call arbitrary external functions.\n\n    It is assumed in the compiler that, subject to data dependencies,\n    expressions with neither effects nor coeffects may be reordered with\n    respect to other expressions.\n"]
    
    type effects = No_effects of 
                   function No_effects  : effects
                | Only_generative_effects of 
                  function Only_generative_effects  : effects
                | Arbitrary_effects of 
                  function Arbitrary_effects  : effects
    
    
    type coeffects = No_coeffects of 
                     function No_coeffects  : coeffects
                  | Has_coeffects of 
                    function Has_coeffects  : coeffects
    
    
    val for_primitive :
    Lambda.primitive -> (effects * coeffects)[@@ocaml.doc
                                               " Describe the semantics of a primitive.  This does not take into account of\n    the (non-)(co)effectfulness of the arguments in a primitive application.\n    To determine whether such an application is (co)effectful, the arguments\n    must also be analysed. "]
    
    
    type return_type = Float of 
                       function Float  : return_type
                    | Other of 
                      function Other  : return_type
    
    
    val return_type_of_primitive : Lambda.primitive -> return_type
    


*** OK ***

