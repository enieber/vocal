
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.text " Byte sequence operations.\n    @since 4.02.0\n "]
external length : bytes -> int = "%bytes_length"[@@ocaml.doc
                                                  " Return the length (number of bytes) of the argument. "]
external get : bytes -> int -> char = "%bytes_safe_get"[@@ocaml.doc
                                                         " [get s n] returns the byte at index [n] in argument [s].\n\n    Raise [Invalid_argument] if [n] is not a valid index in [s]. "]
external set : bytes -> int -> char -> unit = "%bytes_safe_set"[@@ocaml.doc
                                                                 " [set s n c] modifies [s] in place, replacing the byte at index [n]\n    with [c].\n\n    Raise [Invalid_argument] if [n] is not a valid index in [s]. "]
external create : int -> bytes = "caml_create_bytes"[@@ocaml.doc
                                                      " [create n] returns a new byte sequence of length [n]. The\n    sequence is uninitialized and contains arbitrary bytes.\n\n    Raise [Invalid_argument] if [n < 0] or [n > ]{!Sys.max_string_length}. "]
val make : int -> char -> bytes[@@ocaml.doc
                                 " [make n c] returns a new byte sequence of length [n], filled with\n    the byte [c].\n\n    Raise [Invalid_argument] if [n < 0] or [n > ]{!Sys.max_string_length}. "]
val init : int -> f:(int -> char) -> bytes[@@ocaml.doc
                                            " [init n f] returns a fresh byte sequence of length [n],\n    with character [i] initialized to the result of [f i].\n\n    Raise [Invalid_argument] if [n < 0] or [n > ]{!Sys.max_string_length}. "]
val empty : bytes[@@ocaml.doc " A byte sequence of size 0. "]
val copy : bytes -> bytes[@@ocaml.doc
                           " Return a new byte sequence that contains the same bytes as the\n    argument. "]
val of_string : string -> bytes[@@ocaml.doc
                                 " Return a new byte sequence that contains the same bytes as the\n    given string. "]
val to_string : bytes -> string[@@ocaml.doc
                                 " Return a new string that contains the same bytes as the given byte\n    sequence. "]
val sub : bytes -> pos:int -> len:int -> bytes[@@ocaml.doc
                                                " [sub s start len] returns a new byte sequence of length [len],\n    containing the subsequence of [s] that starts at position [start]\n    and has length [len].\n\n    Raise [Invalid_argument] if [start] and [len] do not designate a\n    valid range of [s]. "]
val sub_string : bytes -> pos:int -> len:int -> string[@@ocaml.doc
                                                        " Same as [sub] but return a string instead of a byte sequence. "]
val extend : bytes -> left:int -> right:int -> bytes[@@ocaml.doc
                                                      " [extend s left right] returns a new byte sequence that contains\n    the bytes of [s], with [left] uninitialized bytes prepended and\n    [right] uninitialized bytes appended to it. If [left] or [right]\n    is negative, then bytes are removed (instead of appended) from\n    the corresponding side of [s].\n\n    Raise [Invalid_argument] if the result length is negative or\n    longer than {!Sys.max_string_length} bytes.\n    @since 4.05.0 "]
val fill : bytes -> pos:int -> len:int -> char -> unit[@@ocaml.doc
                                                        " [fill s start len c] modifies [s] in place, replacing [len]\n    characters with [c], starting at [start].\n\n    Raise [Invalid_argument] if [start] and [len] do not designate a\n    valid range of [s]. "]
val blit :
  src:bytes -> src_pos:int -> dst:bytes -> dst_pos:int -> len:int -> unit
[@@ocaml.doc
  " [blit src srcoff dst dstoff len] copies [len] bytes from sequence\n    [src], starting at index [srcoff], to sequence [dst], starting at\n    index [dstoff]. It works correctly even if [src] and [dst] are the\n    same byte sequence, and the source and destination intervals\n    overlap.\n\n    Raise [Invalid_argument] if [srcoff] and [len] do not\n    designate a valid range of [src], or if [dstoff] and [len]\n    do not designate a valid range of [dst]. "]
val blit_string :
  src:string -> src_pos:int -> dst:bytes -> dst_pos:int -> len:int -> unit
[@@ocaml.doc
  " [blit src srcoff dst dstoff len] copies [len] bytes from string\n    [src], starting at index [srcoff], to byte sequence [dst],\n    starting at index [dstoff].\n\n    Raise [Invalid_argument] if [srcoff] and [len] do not\n    designate a valid range of [src], or if [dstoff] and [len]\n    do not designate a valid range of [dst].\n    @since 4.05.0 "]
val concat : sep:bytes -> bytes list -> bytes[@@ocaml.doc
                                               " [concat sep sl] concatenates the list of byte sequences [sl],\n    inserting the separator byte sequence [sep] between each, and\n    returns the result as a new byte sequence. "]
val cat : bytes -> bytes -> bytes[@@ocaml.doc
                                   " [cat s1 s2] concatenates [s1] and [s2] and returns the result\n     as new byte sequence.\n\n    Raise [Invalid_argument] if the result is longer than\n    {!Sys.max_string_length} bytes.\n    @since 4.05.0 "]
val iter : f:(char -> unit) -> bytes -> unit[@@ocaml.doc
                                              " [iter f s] applies function [f] in turn to all the bytes of [s].\n    It is equivalent to [f (get s 0); f (get s 1); ...; f (get s\n    (length s - 1)); ()]. "]
val iteri : f:(int -> char -> unit) -> bytes -> unit[@@ocaml.doc
                                                      " Same as {!Bytes.iter}, but the function is applied to the index of\n    the byte as first argument and the byte itself as second\n    argument. "]
val map : f:(char -> char) -> bytes -> bytes[@@ocaml.doc
                                              " [map f s] applies function [f] in turn to all the bytes of [s] and\n    stores the resulting bytes in a new sequence that is returned as\n    the result. "]
val mapi : f:(int -> char -> char) -> bytes -> bytes[@@ocaml.doc
                                                      " [mapi f s] calls [f] with each character of [s] and its\n    index (in increasing index order) and stores the resulting bytes\n    in a new sequence that is returned as the result. "]
val trim : bytes -> bytes[@@ocaml.doc
                           " Return a copy of the argument, without leading and trailing\n    whitespace. The bytes regarded as whitespace are the ASCII\n    characters [' '], ['\\012'], ['\\n'], ['\\r'], and ['\\t']. "]
val escaped : bytes -> bytes[@@ocaml.doc
                              " Return a copy of the argument, with special characters represented\n    by escape sequences, following the lexical conventions of OCaml. "]
val index : bytes -> char -> int[@@ocaml.doc
                                  " [index s c] returns the index of the first occurrence of byte [c]\n    in [s].\n\n    Raise [Not_found] if [c] does not occur in [s]. "]
val index_opt : bytes -> char -> int option[@@ocaml.doc
                                             " [index_opt s c] returns the index of the first occurrence of byte [c]\n    in [s] or [None] if [c] does not occur in [s].\n    @since 4.05 "]
val rindex : bytes -> char -> int[@@ocaml.doc
                                   " [rindex s c] returns the index of the last occurrence of byte [c]\n    in [s].\n\n    Raise [Not_found] if [c] does not occur in [s]. "]
val rindex_opt : bytes -> char -> int option[@@ocaml.doc
                                              " [rindex_opt s c] returns the index of the last occurrence of byte [c]\n    in [s] or [None] if [c] does not occur in [s].\n    @since 4.05 "]
val index_from : bytes -> int -> char -> int[@@ocaml.doc
                                              " [index_from s i c] returns the index of the first occurrence of\n    byte [c] in [s] after position [i].  [Bytes.index s c] is\n    equivalent to [Bytes.index_from s 0 c].\n\n    Raise [Invalid_argument] if [i] is not a valid position in [s].\n    Raise [Not_found] if [c] does not occur in [s] after position [i]. "]
val index_from_opt : bytes -> int -> char -> int option[@@ocaml.doc
                                                         " [index_from _opts i c] returns the index of the first occurrence of\n    byte [c] in [s] after position [i] or [None] if [c] does not occur in [s]\n    after position [i].\n    [Bytes.index_opt s c] is equivalent to [Bytes.index_from_opt s 0 c].\n\n    Raise [Invalid_argument] if [i] is not a valid position in [s].\n    @since 4.05 "]
val rindex_from : bytes -> int -> char -> int[@@ocaml.doc
                                               " [rindex_from s i c] returns the index of the last occurrence of\n    byte [c] in [s] before position [i+1].  [rindex s c] is equivalent\n    to [rindex_from s (Bytes.length s - 1) c].\n\n    Raise [Invalid_argument] if [i+1] is not a valid position in [s].\n    Raise [Not_found] if [c] does not occur in [s] before position [i+1]. "]
val rindex_from_opt : bytes -> int -> char -> int option[@@ocaml.doc
                                                          " [rindex_from_opt s i c] returns the index of the last occurrence\n    of byte [c] in [s] before position [i+1] or [None] if [c] does not\n    occur in [s] before position [i+1].  [rindex_opt s c] is equivalent to\n    [rindex_from s (Bytes.length s - 1) c].\n\n    Raise [Invalid_argument] if [i+1] is not a valid position in [s].\n    @since 4.05 "]
val contains : bytes -> char -> bool[@@ocaml.doc
                                      " [contains s c] tests if byte [c] appears in [s]. "]
val contains_from : bytes -> int -> char -> bool[@@ocaml.doc
                                                  " [contains_from s start c] tests if byte [c] appears in [s] after\n    position [start].  [contains s c] is equivalent to [contains_from\n    s 0 c].\n\n    Raise [Invalid_argument] if [start] is not a valid position in [s]. "]
val rcontains_from : bytes -> int -> char -> bool[@@ocaml.doc
                                                   " [rcontains_from s stop c] tests if byte [c] appears in [s] before\n    position [stop+1].\n\n    Raise [Invalid_argument] if [stop < 0] or [stop+1] is not a valid\n    position in [s]. "]
val uppercase : bytes -> bytes[@@ocaml.deprecated
                                "Use Bytes.uppercase_ascii instead."]
[@@ocaml.doc
  " Return a copy of the argument, with all lowercase letters\n   translated to uppercase, including accented letters of the ISO\n   Latin-1 (8859-1) character set.\n   @deprecated Functions operating on Latin-1 character set are deprecated. "]
val lowercase : bytes -> bytes[@@ocaml.deprecated
                                "Use Bytes.lowercase_ascii instead."]
[@@ocaml.doc
  " Return a copy of the argument, with all uppercase letters\n   translated to lowercase, including accented letters of the ISO\n   Latin-1 (8859-1) character set.\n   @deprecated Functions operating on Latin-1 character set are deprecated. "]
val capitalize : bytes -> bytes[@@ocaml.deprecated
                                 "Use Bytes.capitalize_ascii instead."]
[@@ocaml.doc
  " Return a copy of the argument, with the first character set to uppercase,\n   using the ISO Latin-1 (8859-1) character set..\n   @deprecated Functions operating on Latin-1 character set are deprecated. "]
val uncapitalize : bytes -> bytes[@@ocaml.deprecated
                                   "Use Bytes.uncapitalize_ascii instead."]
[@@ocaml.doc
  " Return a copy of the argument, with the first character set to lowercase,\n   using the ISO Latin-1 (8859-1) character set..\n   @deprecated Functions operating on Latin-1 character set are deprecated. "]
val uppercase_ascii : bytes -> bytes[@@ocaml.doc
                                      " Return a copy of the argument, with all lowercase letters\n   translated to uppercase, using the US-ASCII character set.\n   @since 4.05.0 "]
val lowercase_ascii : bytes -> bytes[@@ocaml.doc
                                      " Return a copy of the argument, with all uppercase letters\n   translated to lowercase, using the US-ASCII character set.\n   @since 4.05.0 "]
val capitalize_ascii : bytes -> bytes[@@ocaml.doc
                                       " Return a copy of the argument, with the first character set to uppercase,\n   using the US-ASCII character set.\n   @since 4.05.0 "]
val uncapitalize_ascii : bytes -> bytes[@@ocaml.doc
                                         " Return a copy of the argument, with the first character set to lowercase,\n   using the US-ASCII character set.\n   @since 4.05.0 "]
type t = bytes[@@ocaml.doc " An alias for the type of byte sequences. "]
val compare : t -> t -> int[@@ocaml.doc
                             " The comparison function for byte sequences, with the same\n    specification as {!Stdlib.compare}.  Along with the type [t],\n    this function [compare] allows the module [Bytes] to be passed as\n    argument to the functors {!Set.Make} and {!Map.Make}. "]
val equal : t -> t -> bool[@@ocaml.doc
                            " The equality function for byte sequences.\n    @since 4.05.0 "]
[@@@ocaml.text " {6 Iterators} "]
val to_seq : t -> char Seq.t[@@ocaml.doc
                              " Iterate on the string, in increasing index order. Modifications of the\n    string during iteration will be reflected in the iterator.\n    @since 4.07 "]
val to_seqi : t -> (int * char) Seq.t[@@ocaml.doc
                                       " Iterate on the string, in increasing order, yielding indices along chars\n    @since 4.07 "]
val of_seq : char Seq.t -> t[@@ocaml.doc
                              " Create a string from the generator\n    @since 4.07 "]
[@@@ocaml.text "/*"]
external unsafe_get : bytes -> int -> char = "%bytes_unsafe_get"
external unsafe_set : bytes -> int -> char -> unit = "%bytes_unsafe_set"
external unsafe_blit :
  src:bytes -> src_pos:int -> dst:bytes -> dst_pos:int -> len:int -> unit =
    "caml_blit_bytes"[@@noalloc ]
external unsafe_fill :
  bytes -> pos:int -> len:int -> char -> unit = "caml_fill_bytes"[@@noalloc ]
val unsafe_to_string : bytes -> string
val unsafe_of_string : string -> bytes

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.text " Byte sequence operations.\n    @since 4.02.0\n "]

external length : bytes -> int = "%bytes_length"[@@ocaml.doc
                                                  " Return the length (number of bytes) of the argument. "]


external get : bytes -> int -> char = "%bytes_safe_get"[@@ocaml.doc
                                                         " [get s n] returns the byte at index [n] in argument [s].\n\n    Raise [Invalid_argument] if [n] is not a valid index in [s]. "]


external set : bytes -> int -> char -> unit = "%bytes_safe_set"[@@ocaml.doc
                                                                 " [set s n c] modifies [s] in place, replacing the byte at index [n]\n    with [c].\n\n    Raise [Invalid_argument] if [n] is not a valid index in [s]. "]


external create : int -> bytes = "caml_create_bytes"[@@ocaml.doc
                                                      " [create n] returns a new byte sequence of length [n]. The\n    sequence is uninitialized and contains arbitrary bytes.\n\n    Raise [Invalid_argument] if [n < 0] or [n > ]{!Sys.max_string_length}. "]


val make : int -> char -> bytes[@@ocaml.doc
                                 " [make n c] returns a new byte sequence of length [n], filled with\n    the byte [c].\n\n    Raise [Invalid_argument] if [n < 0] or [n > ]{!Sys.max_string_length}. "]


val init : int -> f:(int -> char) -> bytes[@@ocaml.doc
                                            " [init n f] returns a fresh byte sequence of length [n],\n    with character [i] initialized to the result of [f i].\n\n    Raise [Invalid_argument] if [n < 0] or [n > ]{!Sys.max_string_length}. "]


val empty : bytes[@@ocaml.doc " A byte sequence of size 0. "]


val copy : bytes -> bytes[@@ocaml.doc
                           " Return a new byte sequence that contains the same bytes as the\n    argument. "]


val of_string : string -> bytes[@@ocaml.doc
                                 " Return a new byte sequence that contains the same bytes as the\n    given string. "]


val to_string : bytes -> string[@@ocaml.doc
                                 " Return a new string that contains the same bytes as the given byte\n    sequence. "]


val sub : bytes -> pos:int -> len:int -> bytes[@@ocaml.doc
                                                " [sub s start len] returns a new byte sequence of length [len],\n    containing the subsequence of [s] that starts at position [start]\n    and has length [len].\n\n    Raise [Invalid_argument] if [start] and [len] do not designate a\n    valid range of [s]. "]


val sub_string : bytes -> pos:int -> len:int -> string[@@ocaml.doc
                                                        " Same as [sub] but return a string instead of a byte sequence. "]


val extend : bytes -> left:int -> right:int -> bytes[@@ocaml.doc
                                                      " [extend s left right] returns a new byte sequence that contains\n    the bytes of [s], with [left] uninitialized bytes prepended and\n    [right] uninitialized bytes appended to it. If [left] or [right]\n    is negative, then bytes are removed (instead of appended) from\n    the corresponding side of [s].\n\n    Raise [Invalid_argument] if the result length is negative or\n    longer than {!Sys.max_string_length} bytes.\n    @since 4.05.0 "]


val fill : bytes -> pos:int -> len:int -> char -> unit[@@ocaml.doc
                                                        " [fill s start len c] modifies [s] in place, replacing [len]\n    characters with [c], starting at [start].\n\n    Raise [Invalid_argument] if [start] and [len] do not designate a\n    valid range of [s]. "]


val blit :
  src:bytes -> src_pos:int -> dst:bytes -> dst_pos:int -> len:int -> unit
[@@ocaml.doc
  " [blit src srcoff dst dstoff len] copies [len] bytes from sequence\n    [src], starting at index [srcoff], to sequence [dst], starting at\n    index [dstoff]. It works correctly even if [src] and [dst] are the\n    same byte sequence, and the source and destination intervals\n    overlap.\n\n    Raise [Invalid_argument] if [srcoff] and [len] do not\n    designate a valid range of [src], or if [dstoff] and [len]\n    do not designate a valid range of [dst]. "]


val blit_string :
  src:string -> src_pos:int -> dst:bytes -> dst_pos:int -> len:int -> unit
[@@ocaml.doc
  " [blit src srcoff dst dstoff len] copies [len] bytes from string\n    [src], starting at index [srcoff], to byte sequence [dst],\n    starting at index [dstoff].\n\n    Raise [Invalid_argument] if [srcoff] and [len] do not\n    designate a valid range of [src], or if [dstoff] and [len]\n    do not designate a valid range of [dst].\n    @since 4.05.0 "]


val concat : sep:bytes -> bytes list -> bytes[@@ocaml.doc
                                               " [concat sep sl] concatenates the list of byte sequences [sl],\n    inserting the separator byte sequence [sep] between each, and\n    returns the result as a new byte sequence. "]


val cat : bytes -> bytes -> bytes[@@ocaml.doc
                                   " [cat s1 s2] concatenates [s1] and [s2] and returns the result\n     as new byte sequence.\n\n    Raise [Invalid_argument] if the result is longer than\n    {!Sys.max_string_length} bytes.\n    @since 4.05.0 "]


val iter : f:(char -> unit) -> bytes -> unit[@@ocaml.doc
                                              " [iter f s] applies function [f] in turn to all the bytes of [s].\n    It is equivalent to [f (get s 0); f (get s 1); ...; f (get s\n    (length s - 1)); ()]. "]


val iteri : f:(int -> char -> unit) -> bytes -> unit[@@ocaml.doc
                                                      " Same as {!Bytes.iter}, but the function is applied to the index of\n    the byte as first argument and the byte itself as second\n    argument. "]


val map : f:(char -> char) -> bytes -> bytes[@@ocaml.doc
                                              " [map f s] applies function [f] in turn to all the bytes of [s] and\n    stores the resulting bytes in a new sequence that is returned as\n    the result. "]


val mapi : f:(int -> char -> char) -> bytes -> bytes[@@ocaml.doc
                                                      " [mapi f s] calls [f] with each character of [s] and its\n    index (in increasing index order) and stores the resulting bytes\n    in a new sequence that is returned as the result. "]


val trim : bytes -> bytes[@@ocaml.doc
                           " Return a copy of the argument, without leading and trailing\n    whitespace. The bytes regarded as whitespace are the ASCII\n    characters [' '], ['\\012'], ['\\n'], ['\\r'], and ['\\t']. "]


val escaped : bytes -> bytes[@@ocaml.doc
                              " Return a copy of the argument, with special characters represented\n    by escape sequences, following the lexical conventions of OCaml. "]


val index : bytes -> char -> int[@@ocaml.doc
                                  " [index s c] returns the index of the first occurrence of byte [c]\n    in [s].\n\n    Raise [Not_found] if [c] does not occur in [s]. "]


val index_opt : bytes -> char -> int option[@@ocaml.doc
                                             " [index_opt s c] returns the index of the first occurrence of byte [c]\n    in [s] or [None] if [c] does not occur in [s].\n    @since 4.05 "]


val rindex : bytes -> char -> int[@@ocaml.doc
                                   " [rindex s c] returns the index of the last occurrence of byte [c]\n    in [s].\n\n    Raise [Not_found] if [c] does not occur in [s]. "]


val rindex_opt : bytes -> char -> int option[@@ocaml.doc
                                              " [rindex_opt s c] returns the index of the last occurrence of byte [c]\n    in [s] or [None] if [c] does not occur in [s].\n    @since 4.05 "]


val index_from : bytes -> int -> char -> int[@@ocaml.doc
                                              " [index_from s i c] returns the index of the first occurrence of\n    byte [c] in [s] after position [i].  [Bytes.index s c] is\n    equivalent to [Bytes.index_from s 0 c].\n\n    Raise [Invalid_argument] if [i] is not a valid position in [s].\n    Raise [Not_found] if [c] does not occur in [s] after position [i]. "]


val index_from_opt : bytes -> int -> char -> int option[@@ocaml.doc
                                                         " [index_from _opts i c] returns the index of the first occurrence of\n    byte [c] in [s] after position [i] or [None] if [c] does not occur in [s]\n    after position [i].\n    [Bytes.index_opt s c] is equivalent to [Bytes.index_from_opt s 0 c].\n\n    Raise [Invalid_argument] if [i] is not a valid position in [s].\n    @since 4.05 "]


val rindex_from : bytes -> int -> char -> int[@@ocaml.doc
                                               " [rindex_from s i c] returns the index of the last occurrence of\n    byte [c] in [s] before position [i+1].  [rindex s c] is equivalent\n    to [rindex_from s (Bytes.length s - 1) c].\n\n    Raise [Invalid_argument] if [i+1] is not a valid position in [s].\n    Raise [Not_found] if [c] does not occur in [s] before position [i+1]. "]


val rindex_from_opt : bytes -> int -> char -> int option[@@ocaml.doc
                                                          " [rindex_from_opt s i c] returns the index of the last occurrence\n    of byte [c] in [s] before position [i+1] or [None] if [c] does not\n    occur in [s] before position [i+1].  [rindex_opt s c] is equivalent to\n    [rindex_from s (Bytes.length s - 1) c].\n\n    Raise [Invalid_argument] if [i+1] is not a valid position in [s].\n    @since 4.05 "]


val contains : bytes -> char -> bool[@@ocaml.doc
                                      " [contains s c] tests if byte [c] appears in [s]. "]


val contains_from : bytes -> int -> char -> bool[@@ocaml.doc
                                                  " [contains_from s start c] tests if byte [c] appears in [s] after\n    position [start].  [contains s c] is equivalent to [contains_from\n    s 0 c].\n\n    Raise [Invalid_argument] if [start] is not a valid position in [s]. "]


val rcontains_from : bytes -> int -> char -> bool[@@ocaml.doc
                                                   " [rcontains_from s stop c] tests if byte [c] appears in [s] before\n    position [stop+1].\n\n    Raise [Invalid_argument] if [stop < 0] or [stop+1] is not a valid\n    position in [s]. "]


val uppercase : bytes -> bytes[@@ocaml.deprecated
                                "Use Bytes.uppercase_ascii instead."]
[@@ocaml.doc
  " Return a copy of the argument, with all lowercase letters\n   translated to uppercase, including accented letters of the ISO\n   Latin-1 (8859-1) character set.\n   @deprecated Functions operating on Latin-1 character set are deprecated. "]


val lowercase : bytes -> bytes[@@ocaml.deprecated
                                "Use Bytes.lowercase_ascii instead."]
[@@ocaml.doc
  " Return a copy of the argument, with all uppercase letters\n   translated to lowercase, including accented letters of the ISO\n   Latin-1 (8859-1) character set.\n   @deprecated Functions operating on Latin-1 character set are deprecated. "]


val capitalize : bytes -> bytes[@@ocaml.deprecated
                                 "Use Bytes.capitalize_ascii instead."]
[@@ocaml.doc
  " Return a copy of the argument, with the first character set to uppercase,\n   using the ISO Latin-1 (8859-1) character set..\n   @deprecated Functions operating on Latin-1 character set are deprecated. "]


val uncapitalize : bytes -> bytes[@@ocaml.deprecated
                                   "Use Bytes.uncapitalize_ascii instead."]
[@@ocaml.doc
  " Return a copy of the argument, with the first character set to lowercase,\n   using the ISO Latin-1 (8859-1) character set..\n   @deprecated Functions operating on Latin-1 character set are deprecated. "]


val uppercase_ascii : bytes -> bytes[@@ocaml.doc
                                      " Return a copy of the argument, with all lowercase letters\n   translated to uppercase, using the US-ASCII character set.\n   @since 4.05.0 "]


val lowercase_ascii : bytes -> bytes[@@ocaml.doc
                                      " Return a copy of the argument, with all uppercase letters\n   translated to lowercase, using the US-ASCII character set.\n   @since 4.05.0 "]


val capitalize_ascii : bytes -> bytes[@@ocaml.doc
                                       " Return a copy of the argument, with the first character set to uppercase,\n   using the US-ASCII character set.\n   @since 4.05.0 "]


val uncapitalize_ascii : bytes -> bytes[@@ocaml.doc
                                         " Return a copy of the argument, with the first character set to lowercase,\n   using the US-ASCII character set.\n   @since 4.05.0 "]


type t = bytes[@@ocaml.doc " An alias for the type of byte sequences. "]
  

val compare : t -> t -> int[@@ocaml.doc
                             " The comparison function for byte sequences, with the same\n    specification as {!Stdlib.compare}.  Along with the type [t],\n    this function [compare] allows the module [Bytes] to be passed as\n    argument to the functors {!Set.Make} and {!Map.Make}. "]


val equal : t -> t -> bool[@@ocaml.doc
                            " The equality function for byte sequences.\n    @since 4.05.0 "]


[@@@ocaml.text " {6 Iterators} "]

val to_seq : t -> char Seq.t[@@ocaml.doc
                              " Iterate on the string, in increasing index order. Modifications of the\n    string during iteration will be reflected in the iterator.\n    @since 4.07 "]


val to_seqi : t -> (int * char) Seq.t[@@ocaml.doc
                                       " Iterate on the string, in increasing order, yielding indices along chars\n    @since 4.07 "]


val of_seq : char Seq.t -> t[@@ocaml.doc
                              " Create a string from the generator\n    @since 4.07 "]


[@@@ocaml.text "/*"]

external unsafe_get : bytes -> int -> char = "%bytes_unsafe_get"


external unsafe_set : bytes -> int -> char -> unit = "%bytes_unsafe_set"


external unsafe_blit :
  src:bytes -> src_pos:int -> dst:bytes -> dst_pos:int -> len:int -> unit =
  "caml_blit_bytes"[@@noalloc ]


external unsafe_fill :
  bytes -> pos:int -> len:int -> char -> unit = "caml_fill_bytes"[@@noalloc ]


val unsafe_to_string : bytes -> string


val unsafe_of_string : string -> bytes

File "bytesLabels.mli", line 283, characters 9-14:
Error: Symbol bytes not found
