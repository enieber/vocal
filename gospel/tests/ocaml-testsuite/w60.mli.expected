
*******************************
********** Parsed file ********
*******************************
module type Comparable  = sig val id : int end
module Fold_ordered :
functor (P : sig module Id : Comparable end) -> sig val foo : int end
module M : sig  end
module O : sig  end

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

module type Comparable  = sig val id : int
                             end

module Fold_ordered :
functor (P : sig module Id : Comparable end) -> sig val foo : int
                                                   end

module M : sig  end

module O : sig  end

*******************************
********* Typed GOSPEL ********
*******************************
module w60.mli

  Namespace: w60.mli
    Type symbols
      
    Logic Symbols
      
    Exception Symbols
      
    Namespaces
      Namespace: Fold_ordered
        Type symbols
          
        Logic Symbols
          
        Exception Symbols
          
        Namespaces
          
        Type Namespaces
          
      Namespace: M
        Type symbols
          
        Logic Symbols
          
        Exception Symbols
          
        Namespaces
          
        Type Namespaces
          
      Namespace: O
        Type symbols
          
        Logic Symbols
          
        Exception Symbols
          
        Namespaces
          
        Type Namespaces
          
      
    Type Namespaces
      Namespace: Comparable
        Type symbols
          
        Logic Symbols
          
        Exception Symbols
          
        Namespaces
          
        Type Namespaces
          
      
  Signatures
    (*@ open Gospelstdlib *)
    
    module type Comparable  = sig
                                val id : int
                                
                              end
    
    module Fold_ordered :
    functor (P : sig
                   module Id : Comparable
                 end) -> sig
                           val foo : int
                           
                         end
    
    module M : sig
                 
               end
    
    module O : sig
                 
               end


*** OK ***

