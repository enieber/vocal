
*******************************
********** Parsed file ********
*******************************
open Terms
type ordering =
  | Greater 
  | Equal 
  | NotGE 
val ge_ord : ('a -> ordering) -> 'a -> bool
val gt_ord : ('a -> ordering) -> 'a -> bool
val eq_ord : ('a -> ordering) -> 'a -> bool
val rem_eq : (('a * 'b) -> bool) -> 'a -> 'b list -> 'b list
val diff_eq :
  (('a * 'a) -> bool) -> ('a list * 'a list) -> ('a list * 'a list)
val mult_ext : ((term * term) -> ordering) -> (term * term) -> ordering
val lex_ext : ((term * term) -> ordering) -> (term * term) -> ordering
val rpo :
  (string -> string -> ordering) ->
    (((term * term) -> ordering) -> (term * term) -> ordering) ->
      (term * term) -> ordering

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

open Terms

type ordering =
| Greater 
| Equal 
| NotGE 
  

val ge_ord : ('a -> ordering) -> 'a -> bool


val gt_ord : ('a -> ordering) -> 'a -> bool


val eq_ord : ('a -> ordering) -> 'a -> bool


val rem_eq : (('a * 'b) -> bool) -> 'a -> 'b list -> 'b list


val diff_eq :
  (('a * 'a) -> bool) -> ('a list * 'a list) -> ('a list * 'a list)


val mult_ext : ((term * term) -> ordering) -> (term * term) -> ordering


val lex_ext : ((term * term) -> ordering) -> (term * term) -> ordering


val rpo :
  (string -> string -> ordering) ->
    (((term * term) -> ordering) -> (term * term) -> ordering) ->
      (term * term) -> ordering


*******************************
********* Typed GOSPEL ********
*******************************
module orderings.mli

  Namespace: orderings.mli
    Type symbols
       ordering
      
    Logic Symbols
      function Equal  : ordering
      function Greater  : ordering
      function NotGE  : ordering
      
    Exception Symbols
      
    Namespaces
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    open Terms
    
    type ordering = Greater of 
                    function Greater  : ordering
                 | Equal of 
                   function Equal  : ordering
                 | NotGE of 
                   function NotGE  : ordering
    
    
    val ge_ord : ('a -> ordering) -> 'a -> bool
    
    
    val gt_ord : ('a -> ordering) -> 'a -> bool
    
    
    val eq_ord : ('a -> ordering) -> 'a -> bool
    
    
    val rem_eq : (('a * 'b) -> bool) -> 'a -> 'b list -> 'b list
    
    
    val diff_eq :
    (('a * 'a) -> bool) -> ('a list * 'a list) -> ('a list * 'a list)
    
    
    val mult_ext : ((term * term) -> ordering) -> (term * term) -> ordering
    
    
    val lex_ext : ((term * term) -> ordering) -> (term * term) -> ordering
    
    
    val rpo :
    (string -> string -> ordering) ->
      (((term * term) -> ordering) -> (term * term) -> ordering) ->
        (term * term) -> ordering
    


*** OK ***

