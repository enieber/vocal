
*******************************
********** Parsed file ********
*******************************
[@@@gospel  axiom a1: true ]
[@@@gospel  axiom a2: 1 = 0 ]
[@@@gospel  function f1 (x:int) : int ]
[@@@gospel  function f2 (x:int) : int = x ]
[@@@gospel  function f (x:integer): bool = x = 2 ]
[@@@gospel  function f (x:integer): bool = true ]
[@@@gospel  function f (x:bool): bool = x ]
[@@@gospel  predicate pred (x:bool) = x ]
[@@@gospel
   function p (x:integer):integer = x
  requires x = 1
  variant x
  ensures x = 2
  ensures x > 2
  ensures x > 1
]
[@@@gospel  function rec f (x:bool): bool = f x ]
[@@@gospel  function rec f (x: bool) (y: int): bool = f x y ]
[@@@gospel
   function g (a: int): integer =
      if (f true a) then 1 else 2 ]
[@@@gospel  function int_of_integer (x:integer): int ]
[@@@gospel
   function h (a:int) (b:bool) (c:'a): bool =
      if a = int_of_integer 2
      then f b (int_of_integer 3)
      else g (int_of_integer 4) = 5
 ]
[@@@gospel
   function h (a:int) (b:bool) (c:'a): bool =
      if a = int_of_integer 2
      then f (pred b) (int_of_integer 3)
      else g (int_of_integer 4) = 5
 ]
[@@@gospel  function h (b:bool): bool = pred b ]
[@@@gospel  function h: bool = [@ athing]true ]
[@@@gospel  function to_integer (i: int): integer ]
[@@@gospel
   function i (a:int): int =
      int_of_integer (to_integer a + 1) ]
[@@@gospel
   function i (a:int):int =
      int_of_integer (to_integer a + 1)
    requires to_integer a > 0
    ensures let old_a [@ athing] = to_integer (old a) in
            to_integer a = old_a + 1]
type 'a t1 =
  | C of 'a * int [@@gospel
                     function i (a:'a t1): int =
      match a with
      | C (_,y) -> y
      ]
type 'a t2 =
  | C2 of 'a 
  | C3 of bool 
  | C4 of int * 'a [@@gospel  function gnr: 'a ][@@gospel
                                                   function g (x y:'a) (i: int): 'a ]
[@@gospel
   function f (x: 'a t2): 'a =
    match x with
    | C2 x -> x        (* TODO it does not give the right result if x is replaced by true *)
    | C3 b -> gnr
    | C4 (i,x) -> g x x i ]
[@@gospel  axiom ax1: forall x y. y = f x ]
val f : int -> int -> int[@@gospel
                            r = f x y
    requires x > 0
    requires y + 2 < 0
    ensures r = x + y ]
type 'a t3 =
  | A [@@gospel  function f (x: int) : int t3 = A ][@@gospel
                                                      function integer_of_int (x:int) : integer ]
type t4 =
  | A 
  | B 
type 'a t5 = {
  x: int ;
  y: 'a }
type 'a t6 = {
  xx: 'a ;
  yy: int }[@@gospel
              function g (a: t4) (b: t4 t5) : t4 t6 =
  match b with
  | {x; y = A} -> {xx=B;yy=x}
  | {y = B; x} -> {yy=int_of_integer 10; xx = b.y }
 ]
[@@gospel
   function g (a: t4) (b: t4 t5) : t4 t6 =
  match b with
  | {x; y} -> {xx=y;yy=x}
  | {y = B; x} -> {yy=int_of_integer 10; xx = b.y }
 ]

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

(*@ axiom ... *)

(*@ axiom ... *)

(*@ function f1  ... *)

(*@ function f2  ... *)

(*@ function f  ... *)

(*@ function f  ... *)

(*@ function f  ... *)

(*@ predicate pred  ... *)

(*@ function p  ...
    variant ...
    requires ...
    ensures ...
    ensures ...
    ensures ...
     *)

(*@ function rec f  ... *)

(*@ function rec f  ... *)

(*@ function g  ... *)

(*@ function int_of_integer  ... *)

(*@ function h  ... *)

(*@ function h  ... *)

(*@ function h  ... *)

(*@ function h  ... *)

(*@ function to_integer  ... *)

(*@ function i  ... *)

(*@ function i  ...
    requires ...
    ensures ...
     *)

type 'a t1 =
| C of 'a * int 
  

(*@ function i  ... *)

type 'a t2 =
| C2 of 'a 
| C3 of bool 
| C4 of int * 'a 
  

(*@ function gnr  ... *)

(*@ function g  ... *)

(*@ function f  ... *)

(*@ axiom ... *)

val f : int -> int -> int
(*@ r  = f  x  y 
    requires ...
    requires ...
    ensures ...
     *)

type 'a t3 =
| A 
  

(*@ function f  ... *)

(*@ function integer_of_int  ... *)

type t4 =
| A 
| B 
  

type 'a t5 = {
x: int ;
y: 'a }
  

type 'a t6 = {
xx: 'a ;
yy: int }
  

(*@ function g  ... *)

(*@ function g  ... *)

*******************************
********* Typed GOSPEL ********
*******************************
module basic_functions_axioms.mli

  Namespace: basic_functions_axioms.mli
    Type symbols
      'a t1
      'a t2
      'a t3
       t4
      'a t5
      'a t6
      
    Logic Symbols
      function A  : t4
      function B  : t4
      function C (_:'a * int) : 'a t1
      function C2 (_:'a) : 'a t2
      function C3 (_:bool) : 'a t2
      function C4 (_:int * 'a) : 'a t2
      function constr#t5 (_:int) (_:'a) : 'a t5
      function constr#t6 (_:'a) (_:int) : 'a t6
      function f (_:int) : int t3
      function f1 (_:int) : int
      function f2 (_:int) : int
      function g (_:t4) (_:t4 t5) : t4 t6
      function gnr  : 'a
      function h  : bool
      function i (_:'a t1) : int
      function int_of_integer (_:integer) : int
      function integer_of_int (_:int) : integer
      function p (_:integer) : integer
      predicate pred (_:bool)
      function to_integer (_:int) : integer
      function x (_:'a t5) : int
      function xx (_:'a t6) : 'a
      function y (_:'a t5) : 'a
      function yy (_:'a t6) : int
      
    Exception Symbols
      
    Namespaces
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    (*@ axiom a1: true:prop *)
    
    (*@ axiom a2: (1:integer = 0:integer):prop *)
    
    (*@ function f1 (x#1:int): int *)
    
    (*@ function f2 (x#2:int): int =
        x#2:int *)
    
    (*@ function f#1 (x#3:integer): bool =
        if (x#3:integer = 2:integer):prop then (True ):bool else (False ):
        bool
    *)
    
    (*@ function f#2 (x#4:integer): bool =
        (True ):bool *)
    
    (*@ function f#3 (x#5:bool): bool =
        x#5:bool *)
    
    (*@ predicate pred (x#6:bool) =
        (x#6:bool = (True ):bool):prop *)
    
    (*@ function p (x#7:integer): integer =
        x#7:integer
        variant x#7:integer
        requires (x#7:integer = 1:integer):prop
        ensures (x#7:integer = 2:integer):prop
        ensures (x#7:integer > 2:integer):prop
        ensures (x#7:integer > 1:integer):prop
    *)
    
    (*@ function rec f#4 (x#8:bool): bool =
        (f#4 x#8:bool):bool *)
    
    (*@ function rec f#5 (x#9:bool) (y#1:int): bool =
        (f#5  x#9:bool y#1:int):bool
    *)
    
    (*@ function g#1 (a#1:int): integer =
        if ((f#5  (True ):bool a#1:int):bool = (True ):bool):prop then 1:
        integer else 2:integer
    *)
    
    (*@ function int_of_integer (x#10:integer): int *)
    
    (*@ function h#1 (a#2:int) (b:bool) (c:'a): bool =
        if (a#2:int = (int_of_integer 2:integer):int):prop then (f#5  
        b:bool (int_of_integer 3:integer):int):bool else if ((g#1 (int_of_integer 4:
        integer):int):integer = 5:integer):prop then (True ):bool else (False ):
        bool
    *)
    
    (*@ function h#2 (a#3:int) (b#1:bool) (c#1:'a): bool =
        if (a#3:int = (int_of_integer 2:integer):int):prop then (f#5  if (pred 
        b#1:bool):prop then (True ):bool else (False ):bool (int_of_integer 3:
        integer):int):bool else if ((g#1 (int_of_integer 4:integer):int):
        integer = 5:integer):prop then (True ):bool else (False ):bool
    *)
    
    (*@ function h#3 (b#2:bool): bool =
        if (pred b#2:bool):prop then (True ):bool else (False ):bool
    *)
    
    (*@ function h : bool =
        [@ athing](True ):bool *)
    
    (*@ function to_integer (i#1:int): integer *)
    
    (*@ function i#2 (a#4:int): int =
        (int_of_integer ((to_integer a#4:int):integer + 1:integer):integer):
        int
    *)
    
    (*@ function i#3 (a#5:int): int =
        (int_of_integer ((to_integer a#5:int):integer + 1:integer):integer):
        int
        requires ((to_integer a#5:int):integer > 0:integer):prop
        ensures let old_a[@athing]:integer = (to_integer old (a#5:int)):
                integer in ((to_integer a#5:int):integer = (old_a[@athing]:
                                                            integer + 1:
                integer):integer):prop
    *)
    
    type 'a t1 = C of 'a * int
                 function C (_:'a * int) : 'a t1
    
    
    (*@ function i (a#6:'a t1): int =
        match a#6:'a t1 with
        | C (_, y#2:int) -> y#2:int
        end::int
    *)
    
    type 'a t2 = C2 of 'a
                 function C2 (_:'a) : 'a t2
              | C3 of bool
                function C3 (_:bool) : 'a t2
              | C4 of int * 'a
                function C4 (_:int * 'a) : 'a t2
    
    
    (*@ function gnr : 'a *)
    
    (*@ function g#2 (x#11:'a) (y#3:'a) (i#4:int): 'a *)
    
    (*@ function f#6 (x#12:'a t2): 'a =
        match x#12:'a t2 with
        | C2 x#13:'a -> x#13:'a
        | C3 b#3:bool -> (gnr ):'a
        | C4 (i#5:int, x#14:'a) -> (g#2  x#14:'a x#14:'a i#5:int):'a
        end::'a
    *)
    
    (*@ axiom ax1: forall x#15:'a214 t2 y#4:'a214 . (y#4:'a214 = (f#6 
    x#15:'a214 t2):'a214):prop *)
    
    val f#7 : int -> int -> int
    (*@ r:int = f#7 x#16:int y#5:int
        requires (((integer_of_int#1 y#5:int):integer + 2:integer):integer < 0:
                 integer):prop
        requires ((integer_of_int#1 x#16:int):integer > 0:integer):prop
        ensures ((integer_of_int#1 r:int):integer = ((integer_of_int#1 
                x#16:int):integer + (integer_of_int#1 y#5:int):integer):
                integer):prop*)
    
    type 'a t3 = A#1 of 
                 function A#1  : 'a t3
    
    
    (*@ function f (x#17:int): int t3 =
        (A#1 ):int t3 *)
    
    (*@ function integer_of_int (x#18:int): integer *)
    
    type t4 = A of 
              function A  : t4
           | B of 
             function B  : t4
    
    
    type 'a t5 = {x:int; y:'a}
              function constr#t5 (_:int) (_:'a) : 'a t5
                function x (_:'a t5) : int
                function y (_:'a t5) : 'a
    
    
    type 'a t6 = {xx:'a; yy:int}
              function constr#t6 (_:'a) (_:int) : 'a t6
                function xx (_:'a t6) : 'a
                function yy (_:'a t6) : int
    
    
    (*@ function g#3 (a#7:t4) (b#4:t4 t5): t4 t6 =
        match b#4:t4 t5 with
        | constr#t5 x#19:int A -> (constr#t6  (B ):t4 x#19:int):t4 t6
        | constr#t5 x#20:int B -> (constr#t6  (y b#4:t4 t5):t4 (int_of_integer 10:
                                  integer):int):t4 t6
        end::t4 t6
    *)
    
    (*@ function g (a#8:t4) (b#5:t4 t5): t4 t6 =
        match b#5:t4 t5 with
        | constr#t5 x#21:int y#6:t4 -> (constr#t6  y#6:t4 x#21:int):t4 t6
        | constr#t5 x#22:int B -> (constr#t6  (y b#5:t4 t5):t4 (int_of_integer 10:
                                  integer):int):t4 t6
        end::t4 t6
    *)


*** OK ***

