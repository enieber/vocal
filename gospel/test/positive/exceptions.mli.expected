
*******************************
********** Parsed file ********
*******************************
exception E 
exception E1 of int 
exception E2 of int * int 
exception E3 of int list 
exception E4 of int * int list 
exception E5 of (int -> int) 
exception E6 of (int -> float -> bool list) 
exception E7 of {
  x: int } 
exception E8 of {
  x: int -> float } 
exception E9 of {
  x: int ;
  y: float } 
exception E10 of {
  x: int -> int -> float ;
  y: float ;
  z: bool } 
[@@@gospel val id : 'a -> 'a]
[@@@gospel  function integer_of_int (x:int): integer ]
[@@@gospel  function int_of_integer (x:integer): int ]
val f : 'a -> 'a[@@gospel
                   x = f y
    raises E1 x -> integer_of_int x = 1
    raises E3 l -> (match l with
                   | [] -> false
                   | y :: ys -> integer_of_int y = 2)
         | E4 (i,l) -> match l with
                   | [] -> true
                   | y :: ys -> y = i
    raises E5 f -> integer_of_int (f (int_of_integer 3)) = 4 ]

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

exception E 

exception E1 of int 

exception E2 of int * int 

exception E3 of int list 

exception E4 of int * int list 

exception E5 of (int -> int) 

exception E6 of (int -> float -> bool list) 

exception E7 of {
  x: int } 

exception E8 of {
  x: int -> float } 

exception E9 of {
  x: int ;
  y: float } 

exception E10 of {
  x: int -> int -> float ;
  y: float ;
  z: bool } 

(*@ val id : 'a -> 'a
 *)

(*@ function integer_of_int ... *)

(*@ function int_of_integer ... *)

val f : 'a -> 'a
(*@ x = f y
    with ...
    with ...
    with ...
     *)

*******************************
********* Typed GOSPEL ********
*******************************
module exceptions.mli

  Namespace: exceptions.mli
    Type symbols
      
    Logic Symbols
      function int_of_integer (_:integer) : int
      function integer_of_int (_:int) : integer
      
    Exception Symbols
      E
      E1
      E10
      E2
      E3
      E4
      E5
      E6
      E7
      E8
      E9
      
    Namespaces
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    exception E
    
    exception E1
    
    exception E2
    
    exception E3
    
    exception E4
    
    exception E5
    
    exception E6
    
    exception E7
    
    exception E8
    
    exception E9
    
    exception E10
    
    (*@ val id : 'a -> 'a
     *)
    
    (*@ function integer_of_int (x:int): integer *)
    
    (*@ function int_of_integer (x#1:integer): int *)
    
    val f : 'a -> 'a
    (*@ x#2:'a = f y:'a
        raises E1 x#3:int -> ((integer_of_int x#3:int):integer = 1:integer):prop
        raises E3 l:int list -> (match l:int list with
          | [] -> (False ):bool
          | infix :: y#1:int ys:int list -> if ((integer_of_int y#1:int):
                                            integer = 2:integer):prop then (True ):
                                            bool else (False ):bool
          end::bool = (True ):bool):prop
        raises E4 i:int, l#1:int list -> (match l#1:int list with
          | [] -> (True ):bool
          | infix :: y#2:int ys#1:int list -> if (y#2:int = i:int):prop then (True ):
                                              bool else (False ):bool
          end::bool = (True ):bool):prop
        raises E5 f#1:int -> int -> ((integer_of_int (apply  f#1:int -> int (int_of_integer 3:
          integer):int):int):integer = 4:integer):prop*)


*** OK ***

