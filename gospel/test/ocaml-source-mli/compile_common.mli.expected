
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.text " Common compilation pipeline between bytecode and native. "]
[@@@ocaml.text " {2 Initialization} "]
type info =
  {
  sourcefile: string ;
  modulename: string ;
  outputprefix: string ;
  env: Env.t ;
  ppf_dump: Format.formatter ;
  tool_name: string }[@@ocaml.doc " Information needed to compile a file. "]
val init :
  Format.formatter ->
    init_path:bool ->
      tool_name:string -> sourcefile:string -> outputprefix:string -> info
[@@ocaml.doc
  " [init ppf ~init_path ~tool_name ~sourcefile ~outputprefix] initializes\n    the various global variables and returns an {!info}.\n"]
[@@@ocaml.text " {2 Interfaces} "]
val parse_intf : info -> Parsetree.signature[@@ocaml.doc
                                              " [parse_intf info] parses an interface (usually an [.mli] file). "]
val typecheck_intf : info -> Parsetree.signature -> Typedtree.signature
[@@ocaml.doc
  " [typecheck_intf info parsetree] typechecks an interface and returns\n    the typedtree of the associated signature.\n"]
val emit_signature :
  info -> Parsetree.signature -> Typedtree.signature -> unit[@@ocaml.doc
                                                              " [emit_signature info parsetree typedtree] emits the [.cmi] file\n    containing the given signature.\n"]
val interface :
  tool_name:string -> sourcefile:string -> outputprefix:string -> unit
[@@ocaml.doc " The complete compilation pipeline for interfaces. "]
[@@@ocaml.text " {2 Implementations} "]
val parse_impl : info -> Parsetree.structure[@@ocaml.doc
                                              " [parse_impl info] parses an implementation (usually an [.ml] file). "]
val typecheck_impl :
  info ->
    Parsetree.structure -> (Typedtree.structure * Typedtree.module_coercion)
[@@ocaml.doc
  " [typecheck_impl info parsetree] typechecks an implementation and returns\n    the typedtree of the associated module, along with a coercion against\n    its public interface.\n"]
val implementation :
  tool_name:string ->
    native:bool ->
      backend:(info ->
                 (Typedtree.structure * Typedtree.module_coercion) -> unit)
        -> sourcefile:string -> outputprefix:string -> unit[@@ocaml.doc
                                                             " The complete compilation pipeline for implementations. "]
[@@@ocaml.text " {2 Build artifacts} "]
val cmo : info -> string
val cmx : info -> string
val obj : info -> string
val annot : info -> string[@@ocaml.doc
                            " Return the filename of some compiler build artifacts associated\n    with the file being compiled.\n"]

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.text " Common compilation pipeline between bytecode and native. "]

[@@@ocaml.text " {2 Initialization} "]

type info =
{
sourcefile: string ;
modulename: string ;
outputprefix: string ;
env: Env.t ;
ppf_dump: Format.formatter ;
tool_name: string }[@@ocaml.doc " Information needed to compile a file. "]
  

val init :
  Format.formatter ->
    init_path:bool ->
      tool_name:string -> sourcefile:string -> outputprefix:string -> info
[@@ocaml.doc
  " [init ppf ~init_path ~tool_name ~sourcefile ~outputprefix] initializes\n    the various global variables and returns an {!info}.\n"]


[@@@ocaml.text " {2 Interfaces} "]

val parse_intf : info -> Parsetree.signature[@@ocaml.doc
                                              " [parse_intf info] parses an interface (usually an [.mli] file). "]


val typecheck_intf : info -> Parsetree.signature -> Typedtree.signature
[@@ocaml.doc
  " [typecheck_intf info parsetree] typechecks an interface and returns\n    the typedtree of the associated signature.\n"]


val emit_signature :
  info -> Parsetree.signature -> Typedtree.signature -> unit[@@ocaml.doc
                                                              " [emit_signature info parsetree typedtree] emits the [.cmi] file\n    containing the given signature.\n"]


val interface :
  tool_name:string -> sourcefile:string -> outputprefix:string -> unit
[@@ocaml.doc " The complete compilation pipeline for interfaces. "]


[@@@ocaml.text " {2 Implementations} "]

val parse_impl : info -> Parsetree.structure[@@ocaml.doc
                                              " [parse_impl info] parses an implementation (usually an [.ml] file). "]


val typecheck_impl :
  info ->
    Parsetree.structure -> (Typedtree.structure * Typedtree.module_coercion)
[@@ocaml.doc
  " [typecheck_impl info parsetree] typechecks an implementation and returns\n    the typedtree of the associated module, along with a coercion against\n    its public interface.\n"]


val implementation :
  tool_name:string ->
    native:bool ->
      backend:(info ->
                 (Typedtree.structure * Typedtree.module_coercion) -> unit)
        -> sourcefile:string -> outputprefix:string -> unit[@@ocaml.doc
                                                             " The complete compilation pipeline for implementations. "]


[@@@ocaml.text " {2 Build artifacts} "]

val cmo : info -> string


val cmx : info -> string


val obj : info -> string


val annot : info -> string[@@ocaml.doc
                            " Return the filename of some compiler build artifacts associated\n    with the file being compiled.\n"]

File "./asttypes.mli", line 28, characters 19-24:
Error: Symbol int32 not found
