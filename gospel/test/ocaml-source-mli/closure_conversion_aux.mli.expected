
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.warning "+a-4-9-30-40-41-42"]
[@@@ocaml.text
  " Environments and auxiliary structures used during closure conversion. "]
module Env :
sig
  type t
  val empty : t
  val add_var : t -> Ident.t -> Variable.t -> t
  val add_vars : t -> Ident.t list -> Variable.t list -> t
  val find_var : t -> Ident.t -> Variable.t
  val find_var_exn : t -> Ident.t -> Variable.t
  val add_mutable_var : t -> Ident.t -> Mutable_variable.t -> t
  val find_mutable_var_exn : t -> Ident.t -> Mutable_variable.t
  val add_static_exception : t -> int -> Static_exception.t -> t
  val find_static_exception : t -> int -> Static_exception.t
  val add_global : t -> int -> Symbol.t -> t
  val find_global : t -> int -> Symbol.t
  val at_toplevel : t -> bool
  val not_at_toplevel : t -> t
end[@@ocaml.doc
     " Used to remember which [Variable.t] values correspond to which\n    [Ident.t] values during closure conversion, and similarly for\n     static exception identifiers. "]
module Function_decls :
sig
  module Function_decl :
  sig
    type t
    val create :
      let_rec_ident:Ident.t option ->
        closure_bound_var:Variable.t ->
          kind:Lambda.function_kind ->
            params:Ident.t list ->
              body:Lambda.lambda ->
                attr:Lambda.function_attribute -> loc:Location.t -> t
    val let_rec_ident : t -> Ident.t
    val closure_bound_var : t -> Variable.t
    val kind : t -> Lambda.function_kind
    val params : t -> Ident.t list
    val body : t -> Lambda.lambda
    val inline : t -> Lambda.inline_attribute
    val specialise : t -> Lambda.specialise_attribute
    val is_a_functor : t -> bool
    val stub : t -> bool
    val loc : t -> Location.t
    val free_idents : t -> Ident.Set.t
  end
  type t
  val create : Function_decl.t list -> t
  val to_list : t -> Function_decl.t list
  val all_free_idents : t -> Ident.Set.t
  val closure_env_without_parameters : Env.t -> t -> Env.t
end[@@ocaml.doc
     " Used to represent information about a set of function declarations\n    during closure conversion.  (The only case in which such a set may\n    contain more than one declaration is when processing \"let rec\".) "]

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.warning "+a-4-9-30-40-41-42"]

[@@@ocaml.text
  " Environments and auxiliary structures used during closure conversion. "]

module Env :
sig
  type t
    
  val empty : t
  
  val add_var : t -> Ident.t -> Variable.t -> t
  
  val add_vars : t -> Ident.t list -> Variable.t list -> t
  
  val find_var : t -> Ident.t -> Variable.t
  
  val find_var_exn : t -> Ident.t -> Variable.t
  
  val add_mutable_var : t -> Ident.t -> Mutable_variable.t -> t
  
  val find_mutable_var_exn : t -> Ident.t -> Mutable_variable.t
  
  val add_static_exception : t -> int -> Static_exception.t -> t
  
  val find_static_exception : t -> int -> Static_exception.t
  
  val add_global : t -> int -> Symbol.t -> t
  
  val find_global : t -> int -> Symbol.t
  
  val at_toplevel : t -> bool
  
  val not_at_toplevel : t -> t
  
end[@@ocaml.doc
     " Used to remember which [Variable.t] values correspond to which\n    [Ident.t] values during closure conversion, and similarly for\n     static exception identifiers. "]

module Function_decls :
sig
  module Function_decl :
  sig
    type t
      
    val create :
      let_rec_ident:Ident.t option ->
        closure_bound_var:Variable.t ->
          kind:Lambda.function_kind ->
            params:Ident.t list ->
              body:Lambda.lambda ->
                attr:Lambda.function_attribute -> loc:Location.t -> t
    
    val let_rec_ident : t -> Ident.t
    
    val closure_bound_var : t -> Variable.t
    
    val kind : t -> Lambda.function_kind
    
    val params : t -> Ident.t list
    
    val body : t -> Lambda.lambda
    
    val inline : t -> Lambda.inline_attribute
    
    val specialise : t -> Lambda.specialise_attribute
    
    val is_a_functor : t -> bool
    
    val stub : t -> bool
    
    val loc : t -> Location.t
    
    val free_idents : t -> Ident.Set.t
    
  end
  type t
    
  val create : Function_decl.t list -> t
  
  val to_list : t -> Function_decl.t list
  
  val all_free_idents : t -> Ident.Set.t
  
  val closure_env_without_parameters : Env.t -> t -> Env.t
  
end[@@ocaml.doc
     " Used to represent information about a set of function declarations\n    during closure conversion.  (The only case in which such a set may\n    contain more than one declaration is when processing \"let rec\".) "]

*******************************
********* Typed GOSPEL ********
*******************************
module closure_conversion_aux.mli

  Namespace: closure_conversion_aux.mli
    Type symbols
      
    Logic Symbols
      
    Exception Symbols
      
    Namespaces
      Namespace: Env
        Type symbols
           t
          
        Logic Symbols
          
        Exception Symbols
          
        Namespaces
          
        Type Namespaces
          
      Namespace: Function_decls
        Type symbols
           t#1
          
        Logic Symbols
          
        Exception Symbols
          
        Namespaces
          Namespace: Function_decl
            Type symbols
               t#2
              
            Logic Symbols
              
            Exception Symbols
              
            Namespaces
              
            Type Namespaces
              
          
        Type Namespaces
          
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    [@@@ocaml.warning "+a-4-9-30-40-41-42"]
    
    [@@@ocaml.text
      " Environments and auxiliary structures used during closure conversion. "]
    
    module Env :
    sig
      type t
      
      val empty : t
      
      val add_var : t -> Ident.t -> Variable.t -> t
      
      val add_vars : t -> Ident.t list -> Variable.t list -> t
      
      val find_var : t -> Ident.t -> Variable.t
      
      val find_var_exn : t -> Ident.t -> Variable.t
      
      val add_mutable_var : t -> Ident.t -> Mutable_variable.t -> t
      
      val find_mutable_var_exn : t -> Ident.t -> Mutable_variable.t
      
      val add_static_exception : t -> int -> Static_exception.t -> t
      
      val find_static_exception : t -> int -> Static_exception.t
      
      val add_global : t -> int -> Symbol.t -> t
      
      val find_global : t -> int -> Symbol.t
      
      val at_toplevel : t -> bool
      
      val not_at_toplevel : t -> t
      
    end[@@ocaml.doc
         " Used to remember which [Variable.t] values correspond to which\n    [Ident.t] values during closure conversion, and similarly for\n     static exception identifiers. "]
    
    module Function_decls :
    sig
      module Function_decl :
      sig
        type t#2
        
        val create :
        let_rec_ident:Ident.t option ->
          closure_bound_var:Variable.t ->
            kind:Lambda.function_kind ->
              params:Ident.t list ->
                body:Lambda.lambda ->
                  attr:Lambda.function_attribute -> loc:Location.t -> t
        
        val let_rec_ident : t -> Ident.t
        
        val closure_bound_var : t -> Variable.t
        
        val kind : t -> Lambda.function_kind
        
        val params : t -> Ident.t list
        
        val body : t -> Lambda.lambda
        
        val inline : t -> Lambda.inline_attribute
        
        val specialise : t -> Lambda.specialise_attribute
        
        val is_a_functor : t -> bool
        
        val stub : t -> bool
        
        val loc : t -> Location.t
        
        val free_idents : t -> Ident.Set.t
        
      end
      type t#1
      
      val create#1 : Function_decl.t list -> t
      
      val to_list : t -> Function_decl.t list
      
      val all_free_idents : t -> Ident.Set.t
      
      val closure_env_without_parameters : Env.t -> t -> Env.t
      
    end[@@ocaml.doc
         " Used to represent information about a set of function declarations\n    during closure conversion.  (The only case in which such a set may\n    contain more than one declaration is when processing \"let rec\".) "]


*** OK ***

