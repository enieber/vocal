
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.text " Native compilation for .ml and .mli files. "]
val interface : sourcefile:string -> outputprefix:string -> unit
val implementation :
  backend:(module Backend_intf.S) ->
    sourcefile:string -> outputprefix:string -> unit
[@@@ocaml.text " {2 Internal functions} *"]
val clambda :
  Compile_common.info ->
    (Typedtree.structure * Typedtree.module_coercion) -> unit[@@ocaml.doc
                                                               " [clambda info typed] applies the regular compilation pipeline to the\n    given typechecked implementation and outputs the resulting files.\n"]
val flambda :
  Compile_common.info ->
    (module Backend_intf.S) ->
      (Typedtree.structure * Typedtree.module_coercion) -> unit[@@ocaml.doc
                                                                 " [flambda info backend typed] applies the Flambda compilation pipeline to the\n    given typechecked implementation and outputs the resulting files.\n"]

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.text " Native compilation for .ml and .mli files. "]

val interface : sourcefile:string -> outputprefix:string -> unit


val implementation :
  backend:(module Backend_intf.S) ->
    sourcefile:string -> outputprefix:string -> unit


[@@@ocaml.text " {2 Internal functions} *"]

val clambda :
  Compile_common.info ->
    (Typedtree.structure * Typedtree.module_coercion) -> unit[@@ocaml.doc
                                                               " [clambda info typed] applies the regular compilation pipeline to the\n    given typechecked implementation and outputs the resulting files.\n"]


val flambda :
  Compile_common.info ->
    (module Backend_intf.S) ->
      (Typedtree.structure * Typedtree.module_coercion) -> unit[@@ocaml.doc
                                                                 " [flambda info backend typed] applies the Flambda compilation pipeline to the\n    given typechecked implementation and outputs the resulting files.\n"]


*******************************
********* Typed GOSPEL ********
*******************************
module optcompile.mli

  Namespace: optcompile.mli
    Type symbols
      
    Logic Symbols
      
    Exception Symbols
      
    Namespaces
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    [@@@ocaml.text " Native compilation for .ml and .mli files. "]
    
    val interface : sourcefile:string -> outputprefix:string -> unit
    
    
    val implementation :
    backend:(module Backend_intf.S) ->
      sourcefile:string -> outputprefix:string -> unit
    
    
    [@@@ocaml.text " {2 Internal functions} *"]
    
    val clambda :
    Compile_common.info ->
      (Typedtree.structure * Typedtree.module_coercion) -> unit[@@ocaml.doc
                                                                 " [clambda info typed] applies the regular compilation pipeline to the\n    given typechecked implementation and outputs the resulting files.\n"]
    
    
    val flambda :
    Compile_common.info ->
      (module Backend_intf.S) ->
        (Typedtree.structure * Typedtree.module_coercion) -> unit[@@ocaml.doc
                                                                   " [flambda info backend typed] applies the Flambda compilation pipeline to the\n    given typechecked implementation and outputs the resulting files.\n"]
    


*** OK ***

