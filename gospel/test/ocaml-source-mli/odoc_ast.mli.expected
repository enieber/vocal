
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.text
  " The module for analysing the typed abstract syntax tree and source code and creating modules, classes, ..., elements."]
type typedtree = (Typedtree.structure * Typedtree.module_coercion)
module Typedtree_search :
sig
  type ele
  type tab = (ele, Typedtree.structure_item_desc) Hashtbl.t
  type tab_values =
    (Odoc_name.t, (Typedtree.pattern * Typedtree.expression)) Hashtbl.t
  val tables : Typedtree.structure_item list -> (tab * tab_values)[@@ocaml.doc
                                                                    " Create hash tables used to search by some of the functions below. "]
  val search_module : tab -> string -> Typedtree.module_expr[@@ocaml.doc
                                                              " This function returns the [Typedtree.module_expr] associated to the given module name,\n         in the given table.\n         @raise Not_found if the module was not found."]
  val search_module_type : tab -> string -> Typedtree.module_type_declaration
  [@@ocaml.doc
    " This function returns the [Typedtree.module_type] associated to the given module type name,\n         in the given table.\n         @raise Not_found if the module type was not found."]
  val search_extension : tab -> string -> Typedtree.type_extension[@@ocaml.doc
                                                                    " This function returns the [Typedtree.type_extension] associated to the given extension name,\n         in the given table.\n         @raise Not_found if the extension was not found."]
  val search_type_declaration : tab -> string -> Typedtree.type_declaration
  [@@ocaml.doc
    " This function returns the [Typedtree.type_declaration] associated to the given type name,\n         in the given table.\n         @raise Not_found if the type was not found. "]
  val search_class_exp :
    tab -> string -> (Typedtree.class_expr * Types.type_expr list)[@@ocaml.doc
                                                                    " This function returns the [Typedtree.class_expr] and type parameters\n         associated to the given class name, in the given table.\n         @raise Not_found if the class was not found. "]
  val search_class_type_declaration :
    tab -> string -> Typedtree.class_type_declaration[@@ocaml.doc
                                                       " This function returns the [Typedtree.class_type_declaration] associated to the given class type name,\n         in the given table.\n         @raise Not_found if the class type was not found. "]
  val search_value :
    tab_values -> string -> (Typedtree.pattern * Typedtree.expression)
  [@@ocaml.doc
    " This function returns the couple (pat, exp) for the given value name, in the\n         given table of values.\n         @raise Not found if no value matches the name."]
  val search_primitive : tab -> string -> Types.type_expr[@@ocaml.doc
                                                           " This function returns the [type_expr] for the given primitive name, in the\n         given table.\n         @raise Not found if no value matches the name."]
  val get_nth_inherit_class_expr :
    Typedtree.class_structure -> int -> Typedtree.class_expr[@@ocaml.doc
                                                              " This function returns the [Typedtree.class_expr] associated to\n         the n'th inherit in the given class structure of typed tree.\n         @raise Not_found if the class expression could not be found."]
  val search_attribute_type :
    Typedtree.class_structure -> string -> Types.type_expr[@@ocaml.doc
                                                            " This function returns the [Types.type_expr] of the attribute\n         whose name is given, in a given class structure.\n         @raise Not_found if the class attribute could not be found."]
  val search_method_expression :
    Typedtree.class_structure -> string -> Typedtree.expression[@@ocaml.doc
                                                                 " This function returns the [Types.expression] of the method whose name is given, in a given class structure.\n         @raise Not_found if the class method could not be found."]
end[@@ocaml.doc
     " This module is used to search for structure items by name in a [Typedtree.structure]. "]
module Analyser :
functor (My_ir : Odoc_sig.Info_retriever) ->
  sig
    val analyse_typed_tree :
      string ->
        string -> Parsetree.structure -> typedtree -> Odoc_module.t_module
    [@@ocaml.doc
      " This function takes a file name, a file containing the code and\n         the typed tree obtained from the compiler.\n         It goes through the tree, creating values for encountered\n         functions, modules, ..., and looking in the source file for comments."]
  end[@@ocaml.doc
       " The module which performs the analysis of a typed tree.\n   The module uses the module {!Odoc_sig.Analyser}.\n   @param My_ir The module used to retrieve comments and special comments."]

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.text
  " The module for analysing the typed abstract syntax tree and source code and creating modules, classes, ..., elements."]

type typedtree = (Typedtree.structure * Typedtree.module_coercion)
  

module Typedtree_search :
sig
  type ele
    
  type tab = (ele, Typedtree.structure_item_desc) Hashtbl.t
    
  type tab_values =
  (Odoc_name.t, (Typedtree.pattern * Typedtree.expression)) Hashtbl.t
    
  val tables : Typedtree.structure_item list -> (tab * tab_values)[@@ocaml.doc
                                                                    " Create hash tables used to search by some of the functions below. "]
  
  val search_module : tab -> string -> Typedtree.module_expr[@@ocaml.doc
                                                              " This function returns the [Typedtree.module_expr] associated to the given module name,\n         in the given table.\n         @raise Not_found if the module was not found."]
  
  val search_module_type : tab -> string -> Typedtree.module_type_declaration
  [@@ocaml.doc
    " This function returns the [Typedtree.module_type] associated to the given module type name,\n         in the given table.\n         @raise Not_found if the module type was not found."]
  
  val search_extension : tab -> string -> Typedtree.type_extension[@@ocaml.doc
                                                                    " This function returns the [Typedtree.type_extension] associated to the given extension name,\n         in the given table.\n         @raise Not_found if the extension was not found."]
  
  val search_type_declaration : tab -> string -> Typedtree.type_declaration
  [@@ocaml.doc
    " This function returns the [Typedtree.type_declaration] associated to the given type name,\n         in the given table.\n         @raise Not_found if the type was not found. "]
  
  val search_class_exp :
    tab -> string -> (Typedtree.class_expr * Types.type_expr list)[@@ocaml.doc
                                                                    " This function returns the [Typedtree.class_expr] and type parameters\n         associated to the given class name, in the given table.\n         @raise Not_found if the class was not found. "]
  
  val search_class_type_declaration :
    tab -> string -> Typedtree.class_type_declaration[@@ocaml.doc
                                                       " This function returns the [Typedtree.class_type_declaration] associated to the given class type name,\n         in the given table.\n         @raise Not_found if the class type was not found. "]
  
  val search_value :
    tab_values -> string -> (Typedtree.pattern * Typedtree.expression)
  [@@ocaml.doc
    " This function returns the couple (pat, exp) for the given value name, in the\n         given table of values.\n         @raise Not found if no value matches the name."]
  
  val search_primitive : tab -> string -> Types.type_expr[@@ocaml.doc
                                                           " This function returns the [type_expr] for the given primitive name, in the\n         given table.\n         @raise Not found if no value matches the name."]
  
  val get_nth_inherit_class_expr :
    Typedtree.class_structure -> int -> Typedtree.class_expr[@@ocaml.doc
                                                              " This function returns the [Typedtree.class_expr] associated to\n         the n'th inherit in the given class structure of typed tree.\n         @raise Not_found if the class expression could not be found."]
  
  val search_attribute_type :
    Typedtree.class_structure -> string -> Types.type_expr[@@ocaml.doc
                                                            " This function returns the [Types.type_expr] of the attribute\n         whose name is given, in a given class structure.\n         @raise Not_found if the class attribute could not be found."]
  
  val search_method_expression :
    Typedtree.class_structure -> string -> Typedtree.expression[@@ocaml.doc
                                                                 " This function returns the [Types.expression] of the method whose name is given, in a given class structure.\n         @raise Not_found if the class method could not be found."]
  
end[@@ocaml.doc
     " This module is used to search for structure items by name in a [Typedtree.structure]. "]

module Analyser :
functor (My_ir : Odoc_sig.Info_retriever) ->
  sig
    val analyse_typed_tree :
      string ->
        string -> Parsetree.structure -> typedtree -> Odoc_module.t_module
    [@@ocaml.doc
      " This function takes a file name, a file containing the code and\n         the typed tree obtained from the compiler.\n         It goes through the tree, creating values for encountered\n         functions, modules, ..., and looking in the source file for comments."]
    
  end[@@ocaml.doc
       " The module which performs the analysis of a typed tree.\n   The module uses the module {!Odoc_sig.Analyser}.\n   @param My_ir The module used to retrieve comments and special comments."]
File "./asttypes.mli", line 28, characters 19-24:
Error: Symbol int32 not found
