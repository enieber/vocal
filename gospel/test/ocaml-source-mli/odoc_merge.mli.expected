
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.text " Merge of information from [.ml] and [.mli] for a module."]
val merge_before_tags :
  (string * Odoc_types.text) list -> (string * Odoc_types.text) list[@@ocaml.doc
                                                                    " Merging \\@before tags. "]
val merge_info_opt :
  Odoc_types.merge_option list ->
    Odoc_types.info option ->
      Odoc_types.info option -> Odoc_types.info option[@@ocaml.doc
                                                        " Merge of two optional info structures.\n   Used to merge a comment before and a comment after\n   an element in [Odoc_sig.Analyser.analyse_signature_item_desc]. "]
val merge :
  Odoc_types.merge_option list ->
    Odoc_module.t_module list -> Odoc_module.t_module list[@@ocaml.doc
                                                            " Merge of modules which represent the same OCaml module, in a list of t_module.\n   There must be at most two t_module for the same OCaml module, one for a .mli, another for the .ml.\n   The function returns the list of t_module where same modules have been merged, according\n   to the given merge_option list."]

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.text " Merge of information from [.ml] and [.mli] for a module."]

val merge_before_tags :
  (string * Odoc_types.text) list -> (string * Odoc_types.text) list[@@ocaml.doc
                                                                    " Merging \\@before tags. "]


val merge_info_opt :
  Odoc_types.merge_option list ->
    Odoc_types.info option ->
      Odoc_types.info option -> Odoc_types.info option[@@ocaml.doc
                                                        " Merge of two optional info structures.\n   Used to merge a comment before and a comment after\n   an element in [Odoc_sig.Analyser.analyse_signature_item_desc]. "]


val merge :
  Odoc_types.merge_option list ->
    Odoc_module.t_module list -> Odoc_module.t_module list[@@ocaml.doc
                                                            " Merge of modules which represent the same OCaml module, in a list of t_module.\n   There must be at most two t_module for the same OCaml module, one for a .mli, another for the .ml.\n   The function returns the list of t_module where same modules have been merged, according\n   to the given merge_option list."]


*******************************
********* Typed GOSPEL ********
*******************************
module odoc_merge.mli

  Namespace: odoc_merge.mli
    Type symbols
      
    Logic Symbols
      
    Exception Symbols
      
    Namespaces
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    [@@@ocaml.text
      " Merge of information from [.ml] and [.mli] for a module."]
    
    val merge_before_tags :
    (string * Odoc_types.text) list -> (string * Odoc_types.text) list
    [@@ocaml.doc " Merging \\@before tags. "]
    
    
    val merge_info_opt :
    Odoc_types.merge_option list ->
      Odoc_types.info option ->
        Odoc_types.info option -> Odoc_types.info option[@@ocaml.doc
                                                          " Merge of two optional info structures.\n   Used to merge a comment before and a comment after\n   an element in [Odoc_sig.Analyser.analyse_signature_item_desc]. "]
    
    
    val merge :
    Odoc_types.merge_option list ->
      Odoc_module.t_module list -> Odoc_module.t_module list[@@ocaml.doc
                                                              " Merge of modules which represent the same OCaml module, in a list of t_module.\n   There must be at most two t_module for the same OCaml module, one for a .mli, another for the .ml.\n   The function returns the list of t_module where same modules have been merged, according\n   to the given merge_option list."]
    


*** OK ***

