
*******************************
********** Parsed file ********
*******************************
exception Memory_overflow 
type automata =
  | Perform of int * tag_action list 
  | Shift of automata_trans * (automata_move * memory_action list) array 
and automata_trans =
  | No_remember 
  | Remember of int * tag_action list 
and automata_move =
  | Backtrack 
  | Goto of int 
and memory_action =
  | Copy of int * int 
  | Set of int 
and tag_action =
  | SetTag of int * int 
  | EraseTag of int 
type ident = (string * Syntax.location)
type tag_base =
  | Start 
  | End 
  | Mem of int 
type tag_addr =
  | Sum of (tag_base * int) 
type ident_info =
  | Ident_string of bool * tag_addr * tag_addr 
  | Ident_char of bool * tag_addr 
type t_env = (ident * ident_info) list
type ('args, 'action) automata_entry =
  {
  auto_name: string ;
  auto_args: 'args ;
  auto_mem_size: int ;
  auto_initial_state: (int * memory_action list) ;
  auto_actions: (int * t_env * 'action) list }
val make_dfa :
  ('args, 'action) Syntax.entry list ->
    (('args, 'action) automata_entry list * automata array)

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

exception Memory_overflow 

type automata =
| Perform of int * tag_action list 
| Shift of automata_trans * (automata_move * memory_action list) array 
  
and automata_trans =
| No_remember 
| Remember of int * tag_action list 
  
and automata_move =
| Backtrack 
| Goto of int 
  
and memory_action =
| Copy of int * int 
| Set of int 
  
and tag_action =
| SetTag of int * int 
| EraseTag of int 
  

type ident = (string * Syntax.location)
  

type tag_base =
| Start 
| End 
| Mem of int 
  

type tag_addr =
| Sum of (tag_base * int) 
  

type ident_info =
| Ident_string of bool * tag_addr * tag_addr 
| Ident_char of bool * tag_addr 
  

type t_env = (ident * ident_info) list
  

type ('args, 'action) automata_entry =
{
auto_name: string ;
auto_args: 'args ;
auto_mem_size: int ;
auto_initial_state: (int * memory_action list) ;
auto_actions: (int * t_env * 'action) list }
  

val make_dfa :
  ('args, 'action) Syntax.entry list ->
    (('args, 'action) automata_entry list * automata array)


*******************************
********* Typed GOSPEL ********
*******************************
module lexgen.mli

  Namespace: lexgen.mli
    Type symbols
       automata
      ('args,'action) automata_entry
       automata_move
       automata_trans
       ident [=string * location]
       ident_info
       memory_action
       t_env [=string * location * ident_info list]
       tag_action
       tag_addr
       tag_base
      
    Logic Symbols
      function Backtrack  : automata_move
      function Copy (_:int * int) : memory_action
      function End  : tag_base
      function EraseTag (_:int) : tag_action
      function Goto (_:int) : automata_move
      function Ident_char (_:bool * tag_addr) : ident_info
      function Ident_string (_:bool * tag_addr * tag_addr) : ident_info
      function Mem (_:int) : tag_base
      function No_remember  : automata_trans
      function Perform (_:int * tag_action#1 list) : automata
      function Remember (_:int * tag_action#1 list) : automata_trans
      function Set (_:int) : memory_action
      function SetTag (_:int * int) : tag_action
      function Shift (_:automata_trans#1 * automata_move#1 * memory_action#1 
      list array) : automata
      function Start  : tag_base
      function Sum (_:tag_base * int) : tag_addr
      function auto_actions (_:('args,'action) automata_entry) : int * 
      string * location * ident_info list * 'action list
      function auto_args (_:('args,'action) automata_entry) : 'args
      function auto_initial_state (_:('args,'action) automata_entry) : 
      int * memory_action list
      function auto_mem_size (_:('args,'action) automata_entry) : int
      function auto_name (_:('args,'action) automata_entry) : string
      function constr#automata_entry (_:string) (_:'args) (_:int) (_:
      int * memory_action list) (_:int * string * location * ident_info 
      list * 'action list) : ('args,'action) automata_entry
      
    Exception Symbols
      Memory_overflow
      
    Namespaces
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    exception Memory_overflow
    
    type automata = Perform of int * tag_action#1 list
                    function Perform (_:int * tag_action#1 list) : automata
                 | Shift of automata_trans#1 * automata_move#1 * memory_action#1 
                   list array
                   function Shift (_:automata_trans#1 * automata_move#1 * memory_action#1 list array) : automata
    
    and automata_trans = No_remember of 
                         function No_remember  : automata_trans
                      | Remember of int * tag_action#1 list
                        function Remember (_:int * tag_action#1 list) : automata_trans
    
    and automata_move = Backtrack of 
                        function Backtrack  : automata_move
                     | Goto of int
                       function Goto (_:int) : automata_move
    
    and memory_action = Copy of int * int
                        function Copy (_:int * int) : memory_action
                     | Set of int
                       function Set (_:int) : memory_action
    
    and tag_action = SetTag of int * int
                     function SetTag (_:int * int) : tag_action
                  | EraseTag of int
                    function EraseTag (_:int) : tag_action
    
    
    (*@ use Syntax *)
    
    type ident = string * location
    
    
    type tag_base = Start of 
                    function Start  : tag_base
                 | End of 
                   function End  : tag_base
                 | Mem of int
                   function Mem (_:int) : tag_base
    
    
    type tag_addr = Sum of tag_base * int
                    function Sum (_:tag_base * int) : tag_addr
    
    
    type ident_info = Ident_string of bool * tag_addr * tag_addr
                      function Ident_string (_:bool * tag_addr * tag_addr) : ident_info
                   | Ident_char of bool * tag_addr
                     function Ident_char (_:bool * tag_addr) : ident_info
    
    
    type t_env = string * location * ident_info list
    
    
    type ('args,'action) automata_entry = {auto_name:string; auto_args:'args; auto_mem_size:
                                       int; auto_initial_state:int * 
                                       memory_action list; auto_actions:
                                       int * string * location * ident_info 
                                       list * 'action list}
                                       function constr#automata_entry (_:string) (_:'args) (_:int) (_:int * memory_action list) (_:int * string * location * ident_info list * 'action list) : ('args,'action) automata_entry
                                         function auto_name (_:('args,'action) automata_entry) : string
                                         function auto_args (_:('args,'action) automata_entry) : 'args
                                         function auto_mem_size (_:('args,'action) automata_entry) : int
                                         function auto_initial_state (_:('args,'action) automata_entry) : int * memory_action list
                                         function auto_actions (_:('args,'action) automata_entry) : int * string * location * ident_info list * 'action list
    
    
    val make_dfa :
    ('args, 'action) Syntax.entry list ->
      (('args, 'action) automata_entry list * automata array)
    


*** OK ***

