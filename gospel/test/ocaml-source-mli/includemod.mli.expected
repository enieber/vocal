
*******************************
********** Parsed file ********
*******************************
open Typedtree
open Types
open Format
type mark =
  | Mark_both [@ocaml.doc " Mark definitions used from both arguments "]
  | Mark_positive
  [@ocaml.doc " Mark definitions used from the positive (first) argument "]
  | Mark_negative
  [@ocaml.doc " Mark definitions used from the negative (second) argument "]
  | Mark_neither
  [@ocaml.doc " Do not mark definitions used from either argument "][@@ocaml.doc
                                                                    " Type describing which arguments of an inclusion to consider as used\n    for the usage warnings. [Mark_both] is the default. "]
val modtypes :
  loc:Location.t ->
    Env.t -> ?mark:mark -> module_type -> module_type -> module_coercion
val check_modtype_inclusion :
  loc:Location.t ->
    Env.t -> Types.module_type -> Path.t -> Types.module_type -> unit
[@@ocaml.doc
  " [check_modtype_inclusion ~loc env mty1 path1 mty2] checks that the\n    functor application F(M) is well typed, where mty2 is the type of\n    the argument of F and path1/mty1 is the path/unstrenghened type of M. "]
val signatures :
  Env.t -> ?mark:mark -> signature -> signature -> module_coercion
val compunit :
  Env.t ->
    ?mark:mark ->
      string -> signature -> string -> signature -> module_coercion
val type_declarations :
  loc:Location.t ->
    Env.t ->
      ?mark:mark -> Ident.t -> type_declaration -> type_declaration -> unit
val print_coercion : formatter -> module_coercion -> unit
type symptom =
  | Missing_field of Ident.t * Location.t * string 
  | Value_descriptions of Ident.t * value_description * value_description 
  | Type_declarations of Ident.t * type_declaration * type_declaration *
  Includecore.type_mismatch 
  | Extension_constructors of Ident.t * extension_constructor *
  extension_constructor * Includecore.type_mismatch 
  | Module_types of module_type * module_type 
  | Modtype_infos of Ident.t * modtype_declaration * modtype_declaration 
  | Modtype_permutation 
  | Interface_mismatch of string * string 
  | Class_type_declarations of Ident.t * class_type_declaration *
  class_type_declaration * Ctype.class_match_failure list 
  | Class_declarations of Ident.t * class_declaration * class_declaration *
  Ctype.class_match_failure list 
  | Unbound_modtype_path of Path.t 
  | Unbound_module_path of Path.t 
  | Invalid_module_alias of Path.t 
type pos =
  | Module of Ident.t 
  | Modtype of Ident.t 
  | Arg of Ident.t 
  | Body of Ident.t 
type error = (pos list * Env.t * symptom)
exception Error of error list 
val report_error : formatter -> error list -> unit
val expand_module_alias : Env.t -> pos list -> Path.t -> Types.module_type

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

open Typedtree

open Types

open Format

type mark =
| Mark_both [@ocaml.doc " Mark definitions used from both arguments "]
| Mark_positive
[@ocaml.doc " Mark definitions used from the positive (first) argument "]
| Mark_negative
[@ocaml.doc " Mark definitions used from the negative (second) argument "]
| Mark_neither
[@ocaml.doc " Do not mark definitions used from either argument "][@@ocaml.doc
                                                                    " Type describing which arguments of an inclusion to consider as used\n    for the usage warnings. [Mark_both] is the default. "]
  

val modtypes :
  loc:Location.t ->
    Env.t -> ?mark:mark -> module_type -> module_type -> module_coercion


val check_modtype_inclusion :
  loc:Location.t ->
    Env.t -> Types.module_type -> Path.t -> Types.module_type -> unit
[@@ocaml.doc
  " [check_modtype_inclusion ~loc env mty1 path1 mty2] checks that the\n    functor application F(M) is well typed, where mty2 is the type of\n    the argument of F and path1/mty1 is the path/unstrenghened type of M. "]


val signatures :
  Env.t -> ?mark:mark -> signature -> signature -> module_coercion


val compunit :
  Env.t ->
    ?mark:mark ->
      string -> signature -> string -> signature -> module_coercion


val type_declarations :
  loc:Location.t ->
    Env.t ->
      ?mark:mark -> Ident.t -> type_declaration -> type_declaration -> unit


val print_coercion : formatter -> module_coercion -> unit


type symptom =
| Missing_field of Ident.t * Location.t * string 
| Value_descriptions of Ident.t * value_description * value_description 
| Type_declarations of Ident.t * type_declaration * type_declaration *
Includecore.type_mismatch 
| Extension_constructors of Ident.t * extension_constructor *
extension_constructor * Includecore.type_mismatch 
| Module_types of module_type * module_type 
| Modtype_infos of Ident.t * modtype_declaration * modtype_declaration 
| Modtype_permutation 
| Interface_mismatch of string * string 
| Class_type_declarations of Ident.t * class_type_declaration *
class_type_declaration * Ctype.class_match_failure list 
| Class_declarations of Ident.t * class_declaration * class_declaration *
Ctype.class_match_failure list 
| Unbound_modtype_path of Path.t 
| Unbound_module_path of Path.t 
| Invalid_module_alias of Path.t 
  

type pos =
| Module of Ident.t 
| Modtype of Ident.t 
| Arg of Ident.t 
| Body of Ident.t 
  

type error = (pos list * Env.t * symptom)
  

exception Error of error list 

val report_error : formatter -> error list -> unit


val expand_module_alias : Env.t -> pos list -> Path.t -> Types.module_type

File "./asttypes.mli", line 28, characters 19-24:
Error: Symbol int32 not found
