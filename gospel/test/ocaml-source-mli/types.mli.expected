
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.text " {0 Representation of types and declarations} "]
[@@@ocaml.text
  " [Types] defines the representation of types and declarations (that is, the\n    content of module signatures).\n\n    CMI files are made of marshalled types.\n"]
open Asttypes[@@ocaml.doc
               " Asttypes exposes basic definitions shared both by Parsetree and Types. "]
type type_expr =
  {
  mutable desc: type_desc ;
  mutable level: int ;
  mutable scope: int option ;
  id: int }[@@ocaml.doc
             " Type expressions for the core language.\n\n    The [type_desc] variant defines all the possible type expressions one can\n    find in OCaml. [type_expr] wraps this with some annotations.\n\n    The [level] field tracks the level of polymorphism associated to a type,\n    guiding the generalization algorithm.\n    Put shortly, when referring to a type in a given environment, both the type\n    and the environment have a level. If the type has an higher level, then it\n    can be considered fully polymorphic (type variables will be printed as\n    ['a]), otherwise it'll be weakly polymorphic, or non generalized (type\n    variables printed as ['_a]).\n    See [http://okmij.org/ftp/ML/generalization.html] for more information.\n\n    Note about [type_declaration]: one should not make the confusion between\n    [type_expr] and [type_declaration].\n\n    [type_declaration] refers specifically to the [type] construct in OCaml\n    language, where you create and name a new type or type alias.\n\n    [type_expr] is used when you refer to existing types, e.g. when annotating\n    the expected type of a value.\n\n    Also, as the type system of OCaml is generative, a [type_declaration] can\n    have the side-effect of introducing a new type constructor, different from\n    all other known types.\n    Whereas [type_expr] is a pure construct which allows referring to existing\n    types.\n\n    Note on mutability: TBD.\n "]
and type_desc =
  | Tvar of string option
  [@ocaml.doc
    " [Tvar (Some \"a\")] ==> ['a] or ['_a]\n      [Tvar None]       ==> [_] "]
  | Tarrow of arg_label * type_expr * type_expr * commutable
  [@ocaml.doc
    " [Tarrow (Nolabel,      e1, e2, c)] ==> [e1    -> e2]\n      [Tarrow (Labelled \"l\", e1, e2, c)] ==> [l:e1  -> e2]\n      [Tarrow (Optional \"l\", e1, e2, c)] ==> [?l:e1 -> e2]\n\n      See [commutable] for the last argument. "]
  | Ttuple of type_expr list
  [@ocaml.doc " [Ttuple [t1;...;tn]] ==> [(t1 * ... * tn)] "]
  | Tconstr of Path.t * type_expr list * abbrev_memo ref
  [@ocaml.doc
    " [Tconstr (`A.B.t', [t1;...;tn], _)] ==> [(t1,...,tn) A.B.t]\n      The last parameter keep tracks of known expansions, see [abbrev_memo]. "]
  | Tobject of type_expr * (Path.t * type_expr list) option ref
  [@ocaml.doc
    " [Tobject (`f1:t1;...;fn: tn', `None')] ==> [< f1: t1; ...; fn: tn >]\n      f1, fn are represented as a linked list of types using Tfield and Tnil\n      constructors.\n\n      [Tobject (_, `Some (`A.ct', [t1;...;tn]')] ==> [(t1, ..., tn) A.ct].\n      where A.ct is the type of some class.\n\n      There are also special cases for so-called \"class-types\", cf. [Typeclass]\n      and [Ctype.set_object_name]:\n\n        [Tobject (Tfield(_,_,...(Tfield(_,_,rv)...),\n                         Some(`A.#ct`, [rv;t1;...;tn])]\n             ==> [(t1, ..., tn) #A.ct]\n        [Tobject (_, Some(`A.#ct`, [Tnil;t1;...;tn])] ==> [(t1, ..., tn) A.ct]\n\n      where [rv] is the hidden row variable.\n  "]
  | Tfield of string * field_kind * type_expr * type_expr
  [@ocaml.doc
    " [Tfield (\"foo\", Fpresent, t, ts)] ==> [<...; foo : t; ts>] "]
  | Tnil [@ocaml.doc " [Tnil] ==> [<...; >] "]
  | Tlink of type_expr
  [@ocaml.doc " Indirection used by unification engine. "]
  | Tsubst of type_expr
  [@ocaml.doc
    " [Tsubst] is used temporarily to store information in low-level\n      functions manipulating representation of types, such as\n      instantiation or copy.\n      This constructor should not appear outside of these cases. "]
  | Tvariant of row_desc
  [@ocaml.doc " Representation of polymorphic variants, see [row_desc]. "]
  | Tunivar of string option
  [@ocaml.doc
    " Occurrence of a type variable introduced by a\n      forall quantifier / [Tpoly]. "]
  | Tpoly of type_expr * type_expr list
  [@ocaml.doc
    " [Tpoly (ty,tyl)] ==> ['a1... 'an. ty],\n      where 'a1 ... 'an are names given to types in tyl\n      and occurrences of those types in ty. "]
  | Tpackage of Path.t * Longident.t list * type_expr list
  [@ocaml.doc " Type of a first-class module (a.k.a package). "]
and row_desc =
  {
  row_fields: (label * row_field) list ;
  row_more: type_expr ;
  row_bound: unit ;
  row_closed: bool ;
  row_fixed: bool ;
  row_name: (Path.t * type_expr list) option }[@@ocaml.doc
                                                " [  `X | `Y ]       (row_closed = true)\n    [< `X | `Y ]       (row_closed = true)\n    [> `X | `Y ]       (row_closed = false)\n    [< `X | `Y > `X ]  (row_closed = true)\n\n    type t = [> `X ] as 'a      (row_more = Tvar a)\n    type t = private [> `X ]    (row_more = Tconstr (t#row, [], ref Mnil))\n\n    And for:\n\n        let f = function `X -> `X -> | `Y -> `X\n\n    the type of \"f\" will be a [Tarrow] whose lhs will (basically) be:\n\n        Tvariant { row_fields = [(\"X\", _)];\n                   row_more   =\n                     Tvariant { row_fields = [(\"Y\", _)];\n                                row_more   =\n                                  Tvariant { row_fields = [];\n                                             row_more   = _;\n                                             _ };\n                                _ };\n                   _\n                 }\n\n"]
and row_field =
  | Rpresent of type_expr option 
  | Reither of bool * type_expr list * bool * row_field option ref 
  | Rabsent 
and abbrev_memo =
  | Mnil [@ocaml.doc " No known abbreviation "]
  | Mcons of private_flag * Path.t * type_expr * type_expr * abbrev_memo
  [@ocaml.doc
    " Found one abbreviation.\n      A valid abbreviation should be at least as visible and reachable by the\n      same path.\n      The first expression is the abbreviation and the second the expansion. "]
  | Mlink of abbrev_memo ref
  [@ocaml.doc " Abbreviations can be found after this indirection "][@@ocaml.doc
                                                                    " [abbrev_memo] allows one to keep track of different expansions of a type\n    alias. This is done for performance purposes.\n\n    For instance, when defining [type 'a pair = 'a * 'a], when one refers to an\n    ['a pair], it is just a shortcut for the ['a * 'a] type.\n    This expansion will be stored in the [abbrev_memo] of the corresponding\n    [Tconstr] node.\n\n    In practice, [abbrev_memo] behaves like list of expansions with a mutable\n    tail.\n\n    Note on marshalling: [abbrev_memo] must not appear in saved types.\n    [Btype], with [cleanup_abbrev] and [memo], takes care of tracking and\n    removing abbreviations.\n"]
and field_kind =
  | Fvar of field_kind option ref 
  | Fpresent 
  | Fabsent 
and commutable =
  | Cok 
  | Cunknown 
  | Clink of commutable ref [@@ocaml.doc
                              " [commutable] is a flag appended to every arrow type.\n\n    When typing an application, if the type of the functional is\n    known, its type is instantiated with [Cok] arrows, otherwise as\n    [Clink (ref Cunknown)].\n\n    When the type is not known, the application will be used to infer\n    the actual type.  This is fragile in presence of labels where\n    there is no principal type.\n\n    Two incompatible applications relying on [Cunknown] arrows will\n    trigger an error.\n\n    let f g =\n      g ~a:() ~b:();\n      g ~b:() ~a:();\n\n    Error: This function is applied to arguments\n    in an order different from other calls.\n    This is only allowed when the real type is known.\n"]
module TypeOps :
sig
  type t = type_expr
  val compare : t -> t -> int
  val equal : t -> t -> bool
  val hash : t -> int
end
module Meths : Map.S with type  key =  string
module Vars : Map.S with type  key =  string
type value_description =
  {
  val_type: type_expr ;
  val_kind: value_kind ;
  val_loc: Location.t ;
  val_attributes: Parsetree.attributes }
and value_kind =
  | Val_reg 
  | Val_prim of Primitive.description 
  | Val_ivar of mutable_flag * string 
  | Val_self of (Ident.t * type_expr) Meths.t ref * (Ident.t * mutable_flag *
  virtual_flag * type_expr) Vars.t ref * string * type_expr 
  | Val_anc of (string * Ident.t) list * string 
  | Val_unbound of value_unbound_reason 
and value_unbound_reason =
  | Val_unbound_instance_variable 
  | Val_unbound_ghost_recursive 
module Variance :
sig
  type t
  type f =
    | May_pos 
    | May_neg 
    | May_weak 
    | Inj 
    | Pos 
    | Neg 
    | Inv 
  val null : t
  val full : t
  val covariant : t
  val may_inv : t
  val union : t -> t -> t
  val inter : t -> t -> t
  val subset : t -> t -> bool
  val set : f -> bool -> t -> t
  val mem : f -> t -> bool
  val conjugate : t -> t
  val get_upper : t -> (bool * bool)
  val get_lower : t -> (bool * bool * bool * bool)
end
type type_declaration =
  {
  type_params: type_expr list ;
  type_arity: int ;
  type_kind: type_kind ;
  type_private: private_flag ;
  type_manifest: type_expr option ;
  type_variance: Variance.t list ;
  type_is_newtype: bool ;
  type_expansion_scope: int option ;
  type_loc: Location.t ;
  type_attributes: Parsetree.attributes ;
  type_immediate: bool ;
  type_unboxed: unboxed_status }
and type_kind =
  | Type_abstract 
  | Type_record of label_declaration list * record_representation 
  | Type_variant of constructor_declaration list 
  | Type_open 
and record_representation =
  | Record_regular 
  | Record_float 
  | Record_unboxed of bool 
  | Record_inlined of int 
  | Record_extension 
and label_declaration =
  {
  ld_id: Ident.t ;
  ld_mutable: mutable_flag ;
  ld_type: type_expr ;
  ld_loc: Location.t ;
  ld_attributes: Parsetree.attributes }
and constructor_declaration =
  {
  cd_id: Ident.t ;
  cd_args: constructor_arguments ;
  cd_res: type_expr option ;
  cd_loc: Location.t ;
  cd_attributes: Parsetree.attributes }
and constructor_arguments =
  | Cstr_tuple of type_expr list 
  | Cstr_record of label_declaration list 
and unboxed_status = private {
  unboxed: bool ;
  default: bool }
val unboxed_false_default_false : unboxed_status
val unboxed_false_default_true : unboxed_status
val unboxed_true_default_false : unboxed_status
val unboxed_true_default_true : unboxed_status
type extension_constructor =
  {
  ext_type_path: Path.t ;
  ext_type_params: type_expr list ;
  ext_args: constructor_arguments ;
  ext_ret_type: type_expr option ;
  ext_private: private_flag ;
  ext_loc: Location.t ;
  ext_attributes: Parsetree.attributes }
and type_transparence =
  | Type_public 
  | Type_new 
  | Type_private 
module Concr : Set.S with type  elt =  string
type class_type =
  | Cty_constr of Path.t * type_expr list * class_type 
  | Cty_signature of class_signature 
  | Cty_arrow of arg_label * type_expr * class_type 
and class_signature =
  {
  csig_self: type_expr ;
  csig_vars:
    (Asttypes.mutable_flag * Asttypes.virtual_flag * type_expr) Vars.t ;
  csig_concr: Concr.t ;
  csig_inher: (Path.t * type_expr list) list }
type class_declaration =
  {
  cty_params: type_expr list ;
  mutable cty_type: class_type ;
  cty_path: Path.t ;
  cty_new: type_expr option ;
  cty_variance: Variance.t list ;
  cty_loc: Location.t ;
  cty_attributes: Parsetree.attributes }
type class_type_declaration =
  {
  clty_params: type_expr list ;
  clty_type: class_type ;
  clty_path: Path.t ;
  clty_variance: Variance.t list ;
  clty_loc: Location.t ;
  clty_attributes: Parsetree.attributes }
type module_type =
  | Mty_ident of Path.t 
  | Mty_signature of signature 
  | Mty_functor of Ident.t * module_type option * module_type 
  | Mty_alias of alias_presence * Path.t 
and alias_presence =
  | Mta_present 
  | Mta_absent 
and signature = signature_item list
and signature_item =
  | Sig_value of Ident.t * value_description 
  | Sig_type of Ident.t * type_declaration * rec_status 
  | Sig_typext of Ident.t * extension_constructor * ext_status 
  | Sig_module of Ident.t * module_declaration * rec_status 
  | Sig_modtype of Ident.t * modtype_declaration 
  | Sig_class of Ident.t * class_declaration * rec_status 
  | Sig_class_type of Ident.t * class_type_declaration * rec_status 
and module_declaration =
  {
  md_type: module_type ;
  md_attributes: Parsetree.attributes ;
  md_loc: Location.t }
and modtype_declaration =
  {
  mtd_type: module_type option ;
  mtd_attributes: Parsetree.attributes ;
  mtd_loc: Location.t }
and rec_status =
  | Trec_not 
  | Trec_first 
  | Trec_next 
and ext_status =
  | Text_first 
  | Text_next 
  | Text_exception 
type constructor_description =
  {
  cstr_name: string ;
  cstr_res: type_expr ;
  cstr_existentials: type_expr list ;
  cstr_args: type_expr list ;
  cstr_arity: int ;
  cstr_tag: constructor_tag ;
  cstr_consts: int ;
  cstr_nonconsts: int ;
  cstr_normal: int ;
  cstr_generalized: bool ;
  cstr_private: private_flag ;
  cstr_loc: Location.t ;
  cstr_attributes: Parsetree.attributes ;
  cstr_inlined: type_declaration option }
and constructor_tag =
  | Cstr_constant of int 
  | Cstr_block of int 
  | Cstr_unboxed 
  | Cstr_extension of Path.t * bool 
val equal_tag : constructor_tag -> constructor_tag -> bool
val may_equal_constr :
  constructor_description -> constructor_description -> bool
type label_description =
  {
  lbl_name: string ;
  lbl_res: type_expr ;
  lbl_arg: type_expr ;
  lbl_mut: mutable_flag ;
  lbl_pos: int ;
  lbl_all: label_description array ;
  lbl_repres: record_representation ;
  lbl_private: private_flag ;
  lbl_loc: Location.t ;
  lbl_attributes: Parsetree.attributes }

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.text " {0 Representation of types and declarations} "]

[@@@ocaml.text
  " [Types] defines the representation of types and declarations (that is, the\n    content of module signatures).\n\n    CMI files are made of marshalled types.\n"]

open Asttypes[@@ocaml.doc
               " Asttypes exposes basic definitions shared both by Parsetree and Types. "]

type type_expr =
{
mutable desc: type_desc ;
mutable level: int ;
mutable scope: int option ;
id: int }[@@ocaml.doc
           " Type expressions for the core language.\n\n    The [type_desc] variant defines all the possible type expressions one can\n    find in OCaml. [type_expr] wraps this with some annotations.\n\n    The [level] field tracks the level of polymorphism associated to a type,\n    guiding the generalization algorithm.\n    Put shortly, when referring to a type in a given environment, both the type\n    and the environment have a level. If the type has an higher level, then it\n    can be considered fully polymorphic (type variables will be printed as\n    ['a]), otherwise it'll be weakly polymorphic, or non generalized (type\n    variables printed as ['_a]).\n    See [http://okmij.org/ftp/ML/generalization.html] for more information.\n\n    Note about [type_declaration]: one should not make the confusion between\n    [type_expr] and [type_declaration].\n\n    [type_declaration] refers specifically to the [type] construct in OCaml\n    language, where you create and name a new type or type alias.\n\n    [type_expr] is used when you refer to existing types, e.g. when annotating\n    the expected type of a value.\n\n    Also, as the type system of OCaml is generative, a [type_declaration] can\n    have the side-effect of introducing a new type constructor, different from\n    all other known types.\n    Whereas [type_expr] is a pure construct which allows referring to existing\n    types.\n\n    Note on mutability: TBD.\n "]
  
and type_desc =
| Tvar of string option
[@ocaml.doc
  " [Tvar (Some \"a\")] ==> ['a] or ['_a]\n      [Tvar None]       ==> [_] "]
| Tarrow of arg_label * type_expr * type_expr * commutable
[@ocaml.doc
  " [Tarrow (Nolabel,      e1, e2, c)] ==> [e1    -> e2]\n      [Tarrow (Labelled \"l\", e1, e2, c)] ==> [l:e1  -> e2]\n      [Tarrow (Optional \"l\", e1, e2, c)] ==> [?l:e1 -> e2]\n\n      See [commutable] for the last argument. "]
| Ttuple of type_expr list
[@ocaml.doc " [Ttuple [t1;...;tn]] ==> [(t1 * ... * tn)] "]
| Tconstr of Path.t * type_expr list * abbrev_memo ref
[@ocaml.doc
  " [Tconstr (`A.B.t', [t1;...;tn], _)] ==> [(t1,...,tn) A.B.t]\n      The last parameter keep tracks of known expansions, see [abbrev_memo]. "]
| Tobject of type_expr * (Path.t * type_expr list) option ref
[@ocaml.doc
  " [Tobject (`f1:t1;...;fn: tn', `None')] ==> [< f1: t1; ...; fn: tn >]\n      f1, fn are represented as a linked list of types using Tfield and Tnil\n      constructors.\n\n      [Tobject (_, `Some (`A.ct', [t1;...;tn]')] ==> [(t1, ..., tn) A.ct].\n      where A.ct is the type of some class.\n\n      There are also special cases for so-called \"class-types\", cf. [Typeclass]\n      and [Ctype.set_object_name]:\n\n        [Tobject (Tfield(_,_,...(Tfield(_,_,rv)...),\n                         Some(`A.#ct`, [rv;t1;...;tn])]\n             ==> [(t1, ..., tn) #A.ct]\n        [Tobject (_, Some(`A.#ct`, [Tnil;t1;...;tn])] ==> [(t1, ..., tn) A.ct]\n\n      where [rv] is the hidden row variable.\n  "]
| Tfield of string * field_kind * type_expr * type_expr
[@ocaml.doc " [Tfield (\"foo\", Fpresent, t, ts)] ==> [<...; foo : t; ts>] "]
| Tnil [@ocaml.doc " [Tnil] ==> [<...; >] "]
| Tlink of type_expr
[@ocaml.doc " Indirection used by unification engine. "]
| Tsubst of type_expr
[@ocaml.doc
  " [Tsubst] is used temporarily to store information in low-level\n      functions manipulating representation of types, such as\n      instantiation or copy.\n      This constructor should not appear outside of these cases. "]
| Tvariant of row_desc
[@ocaml.doc " Representation of polymorphic variants, see [row_desc]. "]
| Tunivar of string option
[@ocaml.doc
  " Occurrence of a type variable introduced by a\n      forall quantifier / [Tpoly]. "]
| Tpoly of type_expr * type_expr list
[@ocaml.doc
  " [Tpoly (ty,tyl)] ==> ['a1... 'an. ty],\n      where 'a1 ... 'an are names given to types in tyl\n      and occurrences of those types in ty. "]
| Tpackage of Path.t * Longident.t list * type_expr list
[@ocaml.doc " Type of a first-class module (a.k.a package). "]
  
and row_desc =
{
row_fields: (label * row_field) list ;
row_more: type_expr ;
row_bound: unit ;
row_closed: bool ;
row_fixed: bool ;
row_name: (Path.t * type_expr list) option }[@@ocaml.doc
                                              " [  `X | `Y ]       (row_closed = true)\n    [< `X | `Y ]       (row_closed = true)\n    [> `X | `Y ]       (row_closed = false)\n    [< `X | `Y > `X ]  (row_closed = true)\n\n    type t = [> `X ] as 'a      (row_more = Tvar a)\n    type t = private [> `X ]    (row_more = Tconstr (t#row, [], ref Mnil))\n\n    And for:\n\n        let f = function `X -> `X -> | `Y -> `X\n\n    the type of \"f\" will be a [Tarrow] whose lhs will (basically) be:\n\n        Tvariant { row_fields = [(\"X\", _)];\n                   row_more   =\n                     Tvariant { row_fields = [(\"Y\", _)];\n                                row_more   =\n                                  Tvariant { row_fields = [];\n                                             row_more   = _;\n                                             _ };\n                                _ };\n                   _\n                 }\n\n"]
  
and row_field =
| Rpresent of type_expr option 
| Reither of bool * type_expr list * bool * row_field option ref 
| Rabsent 
  
and abbrev_memo =
| Mnil [@ocaml.doc " No known abbreviation "]
| Mcons of private_flag * Path.t * type_expr * type_expr * abbrev_memo
[@ocaml.doc
  " Found one abbreviation.\n      A valid abbreviation should be at least as visible and reachable by the\n      same path.\n      The first expression is the abbreviation and the second the expansion. "]
| Mlink of abbrev_memo ref
[@ocaml.doc " Abbreviations can be found after this indirection "][@@ocaml.doc
                                                                    " [abbrev_memo] allows one to keep track of different expansions of a type\n    alias. This is done for performance purposes.\n\n    For instance, when defining [type 'a pair = 'a * 'a], when one refers to an\n    ['a pair], it is just a shortcut for the ['a * 'a] type.\n    This expansion will be stored in the [abbrev_memo] of the corresponding\n    [Tconstr] node.\n\n    In practice, [abbrev_memo] behaves like list of expansions with a mutable\n    tail.\n\n    Note on marshalling: [abbrev_memo] must not appear in saved types.\n    [Btype], with [cleanup_abbrev] and [memo], takes care of tracking and\n    removing abbreviations.\n"]
  
and field_kind =
| Fvar of field_kind option ref 
| Fpresent 
| Fabsent 
  
and commutable =
| Cok 
| Cunknown 
| Clink of commutable ref [@@ocaml.doc
                            " [commutable] is a flag appended to every arrow type.\n\n    When typing an application, if the type of the functional is\n    known, its type is instantiated with [Cok] arrows, otherwise as\n    [Clink (ref Cunknown)].\n\n    When the type is not known, the application will be used to infer\n    the actual type.  This is fragile in presence of labels where\n    there is no principal type.\n\n    Two incompatible applications relying on [Cunknown] arrows will\n    trigger an error.\n\n    let f g =\n      g ~a:() ~b:();\n      g ~b:() ~a:();\n\n    Error: This function is applied to arguments\n    in an order different from other calls.\n    This is only allowed when the real type is known.\n"]
  

module TypeOps :
sig
  type t = type_expr
    
  val compare : t -> t -> int
  
  val equal : t -> t -> bool
  
  val hash : t -> int
  
end

module Meths : Map.S with type  key =  string

module Vars : Map.S with type  key =  string

type value_description =
{
val_type: type_expr ;
val_kind: value_kind ;
val_loc: Location.t ;
val_attributes: Parsetree.attributes }
  
and value_kind =
| Val_reg 
| Val_prim of Primitive.description 
| Val_ivar of mutable_flag * string 
| Val_self of (Ident.t * type_expr) Meths.t ref * (Ident.t * mutable_flag *
virtual_flag * type_expr) Vars.t ref * string * type_expr 
| Val_anc of (string * Ident.t) list * string 
| Val_unbound of value_unbound_reason 
  
and value_unbound_reason =
| Val_unbound_instance_variable 
| Val_unbound_ghost_recursive 
  

module Variance :
sig
  type t
    
  type f =
  | May_pos 
  | May_neg 
  | May_weak 
  | Inj 
  | Pos 
  | Neg 
  | Inv 
    
  val null : t
  
  val full : t
  
  val covariant : t
  
  val may_inv : t
  
  val union : t -> t -> t
  
  val inter : t -> t -> t
  
  val subset : t -> t -> bool
  
  val set : f -> bool -> t -> t
  
  val mem : f -> t -> bool
  
  val conjugate : t -> t
  
  val get_upper : t -> (bool * bool)
  
  val get_lower : t -> (bool * bool * bool * bool)
  
end

type type_declaration =
{
type_params: type_expr list ;
type_arity: int ;
type_kind: type_kind ;
type_private: private_flag ;
type_manifest: type_expr option ;
type_variance: Variance.t list ;
type_is_newtype: bool ;
type_expansion_scope: int option ;
type_loc: Location.t ;
type_attributes: Parsetree.attributes ;
type_immediate: bool ;
type_unboxed: unboxed_status }
  
and type_kind =
| Type_abstract 
| Type_record of label_declaration list * record_representation 
| Type_variant of constructor_declaration list 
| Type_open 
  
and record_representation =
| Record_regular 
| Record_float 
| Record_unboxed of bool 
| Record_inlined of int 
| Record_extension 
  
and label_declaration =
{
ld_id: Ident.t ;
ld_mutable: mutable_flag ;
ld_type: type_expr ;
ld_loc: Location.t ;
ld_attributes: Parsetree.attributes }
  
and constructor_declaration =
{
cd_id: Ident.t ;
cd_args: constructor_arguments ;
cd_res: type_expr option ;
cd_loc: Location.t ;
cd_attributes: Parsetree.attributes }
  
and constructor_arguments =
| Cstr_tuple of type_expr list 
| Cstr_record of label_declaration list 
  
and unboxed_status = private {
unboxed: bool ;
default: bool }
  

val unboxed_false_default_false : unboxed_status


val unboxed_false_default_true : unboxed_status


val unboxed_true_default_false : unboxed_status


val unboxed_true_default_true : unboxed_status


type extension_constructor =
{
ext_type_path: Path.t ;
ext_type_params: type_expr list ;
ext_args: constructor_arguments ;
ext_ret_type: type_expr option ;
ext_private: private_flag ;
ext_loc: Location.t ;
ext_attributes: Parsetree.attributes }
  
and type_transparence =
| Type_public 
| Type_new 
| Type_private 
  

module Concr : Set.S with type  elt =  string

type class_type =
| Cty_constr of Path.t * type_expr list * class_type 
| Cty_signature of class_signature 
| Cty_arrow of arg_label * type_expr * class_type 
  
and class_signature =
{
csig_self: type_expr ;
csig_vars: (Asttypes.mutable_flag * Asttypes.virtual_flag * type_expr) Vars.t ;
csig_concr: Concr.t ;
csig_inher: (Path.t * type_expr list) list }
  

type class_declaration =
{
cty_params: type_expr list ;
mutable cty_type: class_type ;
cty_path: Path.t ;
cty_new: type_expr option ;
cty_variance: Variance.t list ;
cty_loc: Location.t ;
cty_attributes: Parsetree.attributes }
  

type class_type_declaration =
{
clty_params: type_expr list ;
clty_type: class_type ;
clty_path: Path.t ;
clty_variance: Variance.t list ;
clty_loc: Location.t ;
clty_attributes: Parsetree.attributes }
  

type module_type =
| Mty_ident of Path.t 
| Mty_signature of signature 
| Mty_functor of Ident.t * module_type option * module_type 
| Mty_alias of alias_presence * Path.t 
  
and alias_presence =
| Mta_present 
| Mta_absent 
  
and signature = signature_item list
  
and signature_item =
| Sig_value of Ident.t * value_description 
| Sig_type of Ident.t * type_declaration * rec_status 
| Sig_typext of Ident.t * extension_constructor * ext_status 
| Sig_module of Ident.t * module_declaration * rec_status 
| Sig_modtype of Ident.t * modtype_declaration 
| Sig_class of Ident.t * class_declaration * rec_status 
| Sig_class_type of Ident.t * class_type_declaration * rec_status 
  
and module_declaration =
{
md_type: module_type ;
md_attributes: Parsetree.attributes ;
md_loc: Location.t }
  
and modtype_declaration =
{
mtd_type: module_type option ;
mtd_attributes: Parsetree.attributes ;
mtd_loc: Location.t }
  
and rec_status =
| Trec_not 
| Trec_first 
| Trec_next 
  
and ext_status =
| Text_first 
| Text_next 
| Text_exception 
  

type constructor_description =
{
cstr_name: string ;
cstr_res: type_expr ;
cstr_existentials: type_expr list ;
cstr_args: type_expr list ;
cstr_arity: int ;
cstr_tag: constructor_tag ;
cstr_consts: int ;
cstr_nonconsts: int ;
cstr_normal: int ;
cstr_generalized: bool ;
cstr_private: private_flag ;
cstr_loc: Location.t ;
cstr_attributes: Parsetree.attributes ;
cstr_inlined: type_declaration option }
  
and constructor_tag =
| Cstr_constant of int 
| Cstr_block of int 
| Cstr_unboxed 
| Cstr_extension of Path.t * bool 
  

val equal_tag : constructor_tag -> constructor_tag -> bool


val may_equal_constr :
  constructor_description -> constructor_description -> bool


type label_description =
{
lbl_name: string ;
lbl_res: type_expr ;
lbl_arg: type_expr ;
lbl_mut: mutable_flag ;
lbl_pos: int ;
lbl_all: label_description array ;
lbl_repres: record_representation ;
lbl_private: private_flag ;
lbl_loc: Location.t ;
lbl_attributes: Parsetree.attributes }
  
File "./asttypes.mli", line 28, characters 19-24:
Error: Symbol int32 not found
