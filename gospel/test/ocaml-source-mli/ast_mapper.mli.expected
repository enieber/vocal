
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.text
  " The interface of a -ppx rewriter\n\n  A -ppx rewriter is a program that accepts a serialized abstract syntax\n  tree and outputs another, possibly modified, abstract syntax tree.\n  This module encapsulates the interface between the compiler and\n  the -ppx rewriters, handling such details as the serialization format,\n  forwarding of command-line flags, and storing state.\n\n  {!mapper} allows to implement AST rewriting using open recursion.\n  A typical mapper would be based on {!default_mapper}, a deep\n  identity mapper, and will fall back on it for handling the syntax it\n  does not modify. For example:\n\n  {[\nopen Asttypes\nopen Parsetree\nopen Ast_mapper\n\nlet test_mapper argv =\n  { default_mapper with\n    expr = fun mapper expr ->\n      match expr with\n      | { pexp_desc = Pexp_extension ({ txt = \"test\" }, PStr [])} ->\n        Ast_helper.Exp.constant (Const_int 42)\n      | other -> default_mapper.expr mapper other; }\n\nlet () =\n  register \"ppx_test\" test_mapper]}\n\n  This -ppx rewriter, which replaces [[%test]] in expressions with\n  the constant [42], can be compiled using\n  [ocamlc -o ppx_test -I +compiler-libs ocamlcommon.cma ppx_test.ml].\n\n  {b Warning:} this module is unstable and part of\n  {{!Compiler_libs}compiler-libs}.\n\n  "]
open Parsetree
[@@@ocaml.text " {1 A generic Parsetree mapper} "]
type mapper =
  {
  attribute: mapper -> attribute -> attribute ;
  attributes: mapper -> attribute list -> attribute list ;
  case: mapper -> case -> case ;
  cases: mapper -> case list -> case list ;
  class_declaration: mapper -> class_declaration -> class_declaration ;
  class_description: mapper -> class_description -> class_description ;
  class_expr: mapper -> class_expr -> class_expr ;
  class_field: mapper -> class_field -> class_field ;
  class_signature: mapper -> class_signature -> class_signature ;
  class_structure: mapper -> class_structure -> class_structure ;
  class_type: mapper -> class_type -> class_type ;
  class_type_declaration:
    mapper -> class_type_declaration -> class_type_declaration ;
  class_type_field: mapper -> class_type_field -> class_type_field ;
  constructor_declaration:
    mapper -> constructor_declaration -> constructor_declaration ;
  expr: mapper -> expression -> expression ;
  extension: mapper -> extension -> extension ;
  extension_constructor:
    mapper -> extension_constructor -> extension_constructor ;
  include_declaration: mapper -> include_declaration -> include_declaration ;
  include_description: mapper -> include_description -> include_description ;
  label_declaration: mapper -> label_declaration -> label_declaration ;
  location: mapper -> Location.t -> Location.t ;
  module_binding: mapper -> module_binding -> module_binding ;
  module_declaration: mapper -> module_declaration -> module_declaration ;
  module_expr: mapper -> module_expr -> module_expr ;
  module_type: mapper -> module_type -> module_type ;
  module_type_declaration:
    mapper -> module_type_declaration -> module_type_declaration ;
  open_description: mapper -> open_description -> open_description ;
  pat: mapper -> pattern -> pattern ;
  payload: mapper -> payload -> payload ;
  signature: mapper -> signature -> signature ;
  signature_item: mapper -> signature_item -> signature_item ;
  structure: mapper -> structure -> structure ;
  structure_item: mapper -> structure_item -> structure_item ;
  typ: mapper -> core_type -> core_type ;
  type_declaration: mapper -> type_declaration -> type_declaration ;
  type_extension: mapper -> type_extension -> type_extension ;
  type_exception: mapper -> type_exception -> type_exception ;
  type_kind: mapper -> type_kind -> type_kind ;
  value_binding: mapper -> value_binding -> value_binding ;
  value_description: mapper -> value_description -> value_description ;
  with_constraint: mapper -> with_constraint -> with_constraint }[@@ocaml.doc
                                                                   " A mapper record implements one \"method\" per syntactic category,\n    using an open recursion style: each method takes as its first\n    argument the mapper to be applied to children in the syntax\n    tree. "]
val default_mapper : mapper[@@ocaml.doc
                             " A default mapper, which implements a \"deep identity\" mapping. "]
[@@@ocaml.text " {1 Apply mappers to compilation units} "]
val tool_name : unit -> string[@@ocaml.doc
                                " Can be used within a ppx preprocessor to know which tool is\n    calling it [\"ocamlc\"], [\"ocamlopt\"], [\"ocamldoc\"], [\"ocamldep\"],\n    [\"ocaml\"], ...  Some global variables that reflect command-line\n    options are automatically synchronized between the calling tool\n    and the ppx preprocessor: {!Clflags.include_dirs},\n    {!Config.load_path}, {!Clflags.open_modules}, {!Clflags.for_package},\n    {!Clflags.debug}. "]
val apply : source:string -> target:string -> mapper -> unit[@@ocaml.doc
                                                              " Apply a mapper (parametrized by the unit name) to a dumped\n    parsetree found in the [source] file and put the result in the\n    [target] file. The [structure] or [signature] field of the mapper\n    is applied to the implementation or interface.  "]
val run_main : (string list -> mapper) -> unit[@@ocaml.doc
                                                " Entry point to call to implement a standalone -ppx rewriter from a\n    mapper, parametrized by the command line arguments.  The current\n    unit name can be obtained from {!Location.input_name}.  This\n    function implements proper error reporting for uncaught\n    exceptions. "]
[@@@ocaml.text " {1 Registration API} "]
val register_function : (string -> (string list -> mapper) -> unit) ref
val register : string -> (string list -> mapper) -> unit[@@ocaml.doc
                                                          " Apply the [register_function].  The default behavior is to run the\n    mapper immediately, taking arguments from the process command\n    line.  This is to support a scenario where a mapper is linked as a\n    stand-alone executable.\n\n    It is possible to overwrite the [register_function] to define\n    \"-ppx drivers\", which combine several mappers in a single process.\n    Typically, a driver starts by defining [register_function] to a\n    custom implementation, then lets ppx rewriters (linked statically\n    or dynamically) register themselves, and then run all or some of\n    them.  It is also possible to have -ppx drivers apply rewriters to\n    only specific parts of an AST.\n\n    The first argument to [register] is a symbolic name to be used by\n    the ppx driver.  "]
[@@@ocaml.text " {1 Convenience functions to write mappers} "]
val map_opt : ('a -> 'b) -> 'a option -> 'b option
val extension_of_error : Location.error -> extension[@@ocaml.doc
                                                      " Encode an error into an 'ocaml.error' extension node which can be\n    inserted in a generated Parsetree.  The compiler will be\n    responsible for reporting the error. "]
val attribute_of_warning : Location.t -> string -> attribute[@@ocaml.doc
                                                              " Encode a warning message into an 'ocaml.ppwarning' attribute which can be\n    inserted in a generated Parsetree.  The compiler will be\n    responsible for reporting the warning. "]
[@@@ocaml.text " {1 Helper functions to call external mappers} "]
val add_ppx_context_str :
  tool_name:string -> Parsetree.structure -> Parsetree.structure[@@ocaml.doc
                                                                  " Extract information from the current environment and encode it\n    into an attribute which is prepended to the list of structure\n    items in order to pass the information to an external\n    processor. "]
val add_ppx_context_sig :
  tool_name:string -> Parsetree.signature -> Parsetree.signature[@@ocaml.doc
                                                                  " Same as [add_ppx_context_str], but for signatures. "]
val drop_ppx_context_str :
  restore:bool -> Parsetree.structure -> Parsetree.structure[@@ocaml.doc
                                                              " Drop the ocaml.ppx.context attribute from a structure.  If\n    [restore] is true, also restore the associated data in the current\n    process. "]
val drop_ppx_context_sig :
  restore:bool -> Parsetree.signature -> Parsetree.signature[@@ocaml.doc
                                                              " Same as [drop_ppx_context_str], but for signatures. "]
[@@@ocaml.text " {1 Cookies} "]
[@@@ocaml.text
  " Cookies are used to pass information from a ppx processor to\n    a further invocation of itself, when called from the OCaml\n    toplevel (or other tools that support cookies). "]
val set_cookie : string -> Parsetree.expression -> unit
val get_cookie : string -> Parsetree.expression option

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.text
  " The interface of a -ppx rewriter\n\n  A -ppx rewriter is a program that accepts a serialized abstract syntax\n  tree and outputs another, possibly modified, abstract syntax tree.\n  This module encapsulates the interface between the compiler and\n  the -ppx rewriters, handling such details as the serialization format,\n  forwarding of command-line flags, and storing state.\n\n  {!mapper} allows to implement AST rewriting using open recursion.\n  A typical mapper would be based on {!default_mapper}, a deep\n  identity mapper, and will fall back on it for handling the syntax it\n  does not modify. For example:\n\n  {[\nopen Asttypes\nopen Parsetree\nopen Ast_mapper\n\nlet test_mapper argv =\n  { default_mapper with\n    expr = fun mapper expr ->\n      match expr with\n      | { pexp_desc = Pexp_extension ({ txt = \"test\" }, PStr [])} ->\n        Ast_helper.Exp.constant (Const_int 42)\n      | other -> default_mapper.expr mapper other; }\n\nlet () =\n  register \"ppx_test\" test_mapper]}\n\n  This -ppx rewriter, which replaces [[%test]] in expressions with\n  the constant [42], can be compiled using\n  [ocamlc -o ppx_test -I +compiler-libs ocamlcommon.cma ppx_test.ml].\n\n  {b Warning:} this module is unstable and part of\n  {{!Compiler_libs}compiler-libs}.\n\n  "]

open Parsetree

[@@@ocaml.text " {1 A generic Parsetree mapper} "]

type mapper =
{
attribute: mapper -> attribute -> attribute ;
attributes: mapper -> attribute list -> attribute list ;
case: mapper -> case -> case ;
cases: mapper -> case list -> case list ;
class_declaration: mapper -> class_declaration -> class_declaration ;
class_description: mapper -> class_description -> class_description ;
class_expr: mapper -> class_expr -> class_expr ;
class_field: mapper -> class_field -> class_field ;
class_signature: mapper -> class_signature -> class_signature ;
class_structure: mapper -> class_structure -> class_structure ;
class_type: mapper -> class_type -> class_type ;
class_type_declaration:
  mapper -> class_type_declaration -> class_type_declaration ;
class_type_field: mapper -> class_type_field -> class_type_field ;
constructor_declaration:
  mapper -> constructor_declaration -> constructor_declaration ;
expr: mapper -> expression -> expression ;
extension: mapper -> extension -> extension ;
extension_constructor:
  mapper -> extension_constructor -> extension_constructor ;
include_declaration: mapper -> include_declaration -> include_declaration ;
include_description: mapper -> include_description -> include_description ;
label_declaration: mapper -> label_declaration -> label_declaration ;
location: mapper -> Location.t -> Location.t ;
module_binding: mapper -> module_binding -> module_binding ;
module_declaration: mapper -> module_declaration -> module_declaration ;
module_expr: mapper -> module_expr -> module_expr ;
module_type: mapper -> module_type -> module_type ;
module_type_declaration:
  mapper -> module_type_declaration -> module_type_declaration ;
open_description: mapper -> open_description -> open_description ;
pat: mapper -> pattern -> pattern ;
payload: mapper -> payload -> payload ;
signature: mapper -> signature -> signature ;
signature_item: mapper -> signature_item -> signature_item ;
structure: mapper -> structure -> structure ;
structure_item: mapper -> structure_item -> structure_item ;
typ: mapper -> core_type -> core_type ;
type_declaration: mapper -> type_declaration -> type_declaration ;
type_extension: mapper -> type_extension -> type_extension ;
type_exception: mapper -> type_exception -> type_exception ;
type_kind: mapper -> type_kind -> type_kind ;
value_binding: mapper -> value_binding -> value_binding ;
value_description: mapper -> value_description -> value_description ;
with_constraint: mapper -> with_constraint -> with_constraint }[@@ocaml.doc
                                                                 " A mapper record implements one \"method\" per syntactic category,\n    using an open recursion style: each method takes as its first\n    argument the mapper to be applied to children in the syntax\n    tree. "]
  

val default_mapper : mapper[@@ocaml.doc
                             " A default mapper, which implements a \"deep identity\" mapping. "]


[@@@ocaml.text " {1 Apply mappers to compilation units} "]

val tool_name : unit -> string[@@ocaml.doc
                                " Can be used within a ppx preprocessor to know which tool is\n    calling it [\"ocamlc\"], [\"ocamlopt\"], [\"ocamldoc\"], [\"ocamldep\"],\n    [\"ocaml\"], ...  Some global variables that reflect command-line\n    options are automatically synchronized between the calling tool\n    and the ppx preprocessor: {!Clflags.include_dirs},\n    {!Config.load_path}, {!Clflags.open_modules}, {!Clflags.for_package},\n    {!Clflags.debug}. "]


val apply : source:string -> target:string -> mapper -> unit[@@ocaml.doc
                                                              " Apply a mapper (parametrized by the unit name) to a dumped\n    parsetree found in the [source] file and put the result in the\n    [target] file. The [structure] or [signature] field of the mapper\n    is applied to the implementation or interface.  "]


val run_main : (string list -> mapper) -> unit[@@ocaml.doc
                                                " Entry point to call to implement a standalone -ppx rewriter from a\n    mapper, parametrized by the command line arguments.  The current\n    unit name can be obtained from {!Location.input_name}.  This\n    function implements proper error reporting for uncaught\n    exceptions. "]


[@@@ocaml.text " {1 Registration API} "]

val register_function : (string -> (string list -> mapper) -> unit) ref


val register : string -> (string list -> mapper) -> unit[@@ocaml.doc
                                                          " Apply the [register_function].  The default behavior is to run the\n    mapper immediately, taking arguments from the process command\n    line.  This is to support a scenario where a mapper is linked as a\n    stand-alone executable.\n\n    It is possible to overwrite the [register_function] to define\n    \"-ppx drivers\", which combine several mappers in a single process.\n    Typically, a driver starts by defining [register_function] to a\n    custom implementation, then lets ppx rewriters (linked statically\n    or dynamically) register themselves, and then run all or some of\n    them.  It is also possible to have -ppx drivers apply rewriters to\n    only specific parts of an AST.\n\n    The first argument to [register] is a symbolic name to be used by\n    the ppx driver.  "]


[@@@ocaml.text " {1 Convenience functions to write mappers} "]

val map_opt : ('a -> 'b) -> 'a option -> 'b option


val extension_of_error : Location.error -> extension[@@ocaml.doc
                                                      " Encode an error into an 'ocaml.error' extension node which can be\n    inserted in a generated Parsetree.  The compiler will be\n    responsible for reporting the error. "]


val attribute_of_warning : Location.t -> string -> attribute[@@ocaml.doc
                                                              " Encode a warning message into an 'ocaml.ppwarning' attribute which can be\n    inserted in a generated Parsetree.  The compiler will be\n    responsible for reporting the warning. "]


[@@@ocaml.text " {1 Helper functions to call external mappers} "]

val add_ppx_context_str :
  tool_name:string -> Parsetree.structure -> Parsetree.structure[@@ocaml.doc
                                                                  " Extract information from the current environment and encode it\n    into an attribute which is prepended to the list of structure\n    items in order to pass the information to an external\n    processor. "]


val add_ppx_context_sig :
  tool_name:string -> Parsetree.signature -> Parsetree.signature[@@ocaml.doc
                                                                  " Same as [add_ppx_context_str], but for signatures. "]


val drop_ppx_context_str :
  restore:bool -> Parsetree.structure -> Parsetree.structure[@@ocaml.doc
                                                              " Drop the ocaml.ppx.context attribute from a structure.  If\n    [restore] is true, also restore the associated data in the current\n    process. "]


val drop_ppx_context_sig :
  restore:bool -> Parsetree.signature -> Parsetree.signature[@@ocaml.doc
                                                              " Same as [drop_ppx_context_str], but for signatures. "]


[@@@ocaml.text " {1 Cookies} "]

[@@@ocaml.text
  " Cookies are used to pass information from a ppx processor to\n    a further invocation of itself, when called from the OCaml\n    toplevel (or other tools that support cookies). "]

val set_cookie : string -> Parsetree.expression -> unit


val get_cookie : string -> Parsetree.expression option

File "./asttypes.mli", line 28, characters 19-24:
Error: Symbol int32 not found
