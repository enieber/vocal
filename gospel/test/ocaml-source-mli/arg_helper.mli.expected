
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.text
  " Decipher command line arguments of the form\n        <value> | <key>=<value>[,...]\n\n    (as used for example for the specification of inlining parameters\n    varying by simplification round).\n\n  {b Warning:} this module is unstable and part of\n  {{!Compiler_libs}compiler-libs}.\n\n"]
module Make :
functor (S :
  sig
    module Key :
    sig
      type t
      val of_string : string -> t[@@ocaml.doc
                                   " The textual representation of a key must not contain '=' or ','. "]
      module Map : Map.S with type  key =  t
    end
    module Value :
    sig
      type t
      val of_string : string -> t[@@ocaml.doc
                                   " The textual representation of a value must not contain ','. "]
    end
  end) ->
  sig
    type parsed
    val default : S.Value.t -> parsed
    val set_base_default : S.Value.t -> parsed -> parsed
    val add_base_override : S.Key.t -> S.Value.t -> parsed -> parsed
    val reset_base_overrides : parsed -> parsed
    val set_user_default : S.Value.t -> parsed -> parsed
    val add_user_override : S.Key.t -> S.Value.t -> parsed -> parsed
    val parse : string -> string -> parsed ref -> unit
    type parse_result =
      | Ok 
      | Parse_failed of exn 
    val parse_no_error : string -> parsed ref -> parse_result
    val get : key:S.Key.t -> parsed -> S.Value.t
  end

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.text
  " Decipher command line arguments of the form\n        <value> | <key>=<value>[,...]\n\n    (as used for example for the specification of inlining parameters\n    varying by simplification round).\n\n  {b Warning:} this module is unstable and part of\n  {{!Compiler_libs}compiler-libs}.\n\n"]

module Make :
functor (S :
  sig
    module Key :
    sig
      type t
        
      val of_string : string -> t[@@ocaml.doc
                                   " The textual representation of a key must not contain '=' or ','. "]
      
      module Map : Map.S with type  key =  t
    end
    module Value :
    sig
      type t
        
      val of_string : string -> t[@@ocaml.doc
                                   " The textual representation of a value must not contain ','. "]
      
    end
  end) ->
  sig
    type parsed
      
    val default : S.Value.t -> parsed
    
    val set_base_default : S.Value.t -> parsed -> parsed
    
    val add_base_override : S.Key.t -> S.Value.t -> parsed -> parsed
    
    val reset_base_overrides : parsed -> parsed
    
    val set_user_default : S.Value.t -> parsed -> parsed
    
    val add_user_override : S.Key.t -> S.Value.t -> parsed -> parsed
    
    val parse : string -> string -> parsed ref -> unit
    
    type parse_result =
    | Ok 
    | Parse_failed of exn 
      
    val parse_no_error : string -> parsed ref -> parse_result
    
    val get : key:S.Key.t -> parsed -> S.Value.t
    
  end
File "arg_helper.mli", line 35, characters 17-22:
Error: Symbol Map.S not found
