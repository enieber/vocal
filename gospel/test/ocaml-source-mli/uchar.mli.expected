
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.text " Unicode characters.\n\n    @since 4.03 "]
type t[@@ocaml.doc
        " The type for Unicode characters.\n\n    A value of this type represents a Unicode\n    {{:http://unicode.org/glossary/#unicode_scalar_value}scalar\n    value} which is an integer in the ranges [0x0000]...[0xD7FF] or\n    [0xE000]...[0x10FFFF]. "]
val min : t[@@ocaml.doc " [min] is U+0000. "]
val max : t[@@ocaml.doc " [max] is U+10FFFF. "]
val bom : t[@@ocaml.doc
             " [bom] is U+FEFF, the\n    {{:http://unicode.org/glossary/#byte_order_mark}byte order mark} (BOM)\n    character.\n\n    @since 4.06.0 "]
val rep : t[@@ocaml.doc
             " [rep] is U+FFFD, the\n    {{:http://unicode.org/glossary/#replacement_character}replacement}\n    character.\n\n    @since 4.06.0 "]
val succ : t -> t[@@ocaml.doc
                   " [succ u] is the scalar value after [u] in the set of Unicode scalar\n    values.\n\n    @raise Invalid_argument if [u] is {!max}. "]
val pred : t -> t[@@ocaml.doc
                   " [pred u] is the scalar value before [u] in the set of Unicode scalar\n    values.\n\n    @raise Invalid_argument if [u] is {!min}. "]
val is_valid : int -> bool[@@ocaml.doc
                            " [is_valid n] is [true] iff [n] is a Unicode scalar value\n    (i.e. in the ranges [0x0000]...[0xD7FF] or [0xE000]...[0x10FFFF])."]
val of_int : int -> t[@@ocaml.doc
                       " [of_int i] is [i] as a Unicode character.\n\n    @raise Invalid_argument if [i] does not satisfy {!is_valid}. "]
[@@@ocaml.text "/*"]
val unsafe_of_int : int -> t
[@@@ocaml.text "/*"]
val to_int : t -> int[@@ocaml.doc " [to_int u] is [u] as an integer. "]
val is_char : t -> bool[@@ocaml.doc
                         " [is_char u] is [true] iff [u] is a latin1 OCaml character. "]
val of_char : char -> t[@@ocaml.doc
                         " [of_char c] is [c] as a Unicode character. "]
val to_char : t -> char[@@ocaml.doc
                         " [to_char u] is [u] as an OCaml latin1 character.\n\n    @raise Invalid_argument if [u] does not satisfy {!is_char}. "]
[@@@ocaml.text "/*"]
val unsafe_to_char : t -> char
[@@@ocaml.text "/*"]
val equal : t -> t -> bool[@@ocaml.doc " [equal u u'] is [u = u']. "]
val compare : t -> t -> int[@@ocaml.doc
                             " [compare u u'] is [Stdlib.compare u u']. "]
val hash : t -> int[@@ocaml.doc
                     " [hash u] associates a non-negative integer to [u]. "]

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.text " Unicode characters.\n\n    @since 4.03 "]

type t[@@ocaml.doc
        " The type for Unicode characters.\n\n    A value of this type represents a Unicode\n    {{:http://unicode.org/glossary/#unicode_scalar_value}scalar\n    value} which is an integer in the ranges [0x0000]...[0xD7FF] or\n    [0xE000]...[0x10FFFF]. "]
  

val min : t[@@ocaml.doc " [min] is U+0000. "]


val max : t[@@ocaml.doc " [max] is U+10FFFF. "]


val bom : t[@@ocaml.doc
             " [bom] is U+FEFF, the\n    {{:http://unicode.org/glossary/#byte_order_mark}byte order mark} (BOM)\n    character.\n\n    @since 4.06.0 "]


val rep : t[@@ocaml.doc
             " [rep] is U+FFFD, the\n    {{:http://unicode.org/glossary/#replacement_character}replacement}\n    character.\n\n    @since 4.06.0 "]


val succ : t -> t[@@ocaml.doc
                   " [succ u] is the scalar value after [u] in the set of Unicode scalar\n    values.\n\n    @raise Invalid_argument if [u] is {!max}. "]


val pred : t -> t[@@ocaml.doc
                   " [pred u] is the scalar value before [u] in the set of Unicode scalar\n    values.\n\n    @raise Invalid_argument if [u] is {!min}. "]


val is_valid : int -> bool[@@ocaml.doc
                            " [is_valid n] is [true] iff [n] is a Unicode scalar value\n    (i.e. in the ranges [0x0000]...[0xD7FF] or [0xE000]...[0x10FFFF])."]


val of_int : int -> t[@@ocaml.doc
                       " [of_int i] is [i] as a Unicode character.\n\n    @raise Invalid_argument if [i] does not satisfy {!is_valid}. "]


[@@@ocaml.text "/*"]

val unsafe_of_int : int -> t


[@@@ocaml.text "/*"]

val to_int : t -> int[@@ocaml.doc " [to_int u] is [u] as an integer. "]


val is_char : t -> bool[@@ocaml.doc
                         " [is_char u] is [true] iff [u] is a latin1 OCaml character. "]


val of_char : char -> t[@@ocaml.doc
                         " [of_char c] is [c] as a Unicode character. "]


val to_char : t -> char[@@ocaml.doc
                         " [to_char u] is [u] as an OCaml latin1 character.\n\n    @raise Invalid_argument if [u] does not satisfy {!is_char}. "]


[@@@ocaml.text "/*"]

val unsafe_to_char : t -> char


[@@@ocaml.text "/*"]

val equal : t -> t -> bool[@@ocaml.doc " [equal u u'] is [u = u']. "]


val compare : t -> t -> int[@@ocaml.doc
                             " [compare u u'] is [Stdlib.compare u u']. "]


val hash : t -> int[@@ocaml.doc
                     " [hash u] associates a non-negative integer to [u]. "]


*******************************
********* Typed GOSPEL ********
*******************************
module uchar.mli

  Namespace: uchar.mli
    Type symbols
       t
      
    Logic Symbols
      
    Exception Symbols
      
    Namespaces
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    [@@@ocaml.text " Unicode characters.\n\n    @since 4.03 "]
    
    type t
    
    
    val min : t[@@ocaml.doc " [min] is U+0000. "]
    
    
    val max : t[@@ocaml.doc " [max] is U+10FFFF. "]
    
    
    val bom :
    t[@@ocaml.doc
       " [bom] is U+FEFF, the\n    {{:http://unicode.org/glossary/#byte_order_mark}byte order mark} (BOM)\n    character.\n\n    @since 4.06.0 "]
    
    
    val rep :
    t[@@ocaml.doc
       " [rep] is U+FFFD, the\n    {{:http://unicode.org/glossary/#replacement_character}replacement}\n    character.\n\n    @since 4.06.0 "]
    
    
    val succ :
    t -> t[@@ocaml.doc
            " [succ u] is the scalar value after [u] in the set of Unicode scalar\n    values.\n\n    @raise Invalid_argument if [u] is {!max}. "]
    
    
    val pred :
    t -> t[@@ocaml.doc
            " [pred u] is the scalar value before [u] in the set of Unicode scalar\n    values.\n\n    @raise Invalid_argument if [u] is {!min}. "]
    
    
    val is_valid :
    int -> bool[@@ocaml.doc
                 " [is_valid n] is [true] iff [n] is a Unicode scalar value\n    (i.e. in the ranges [0x0000]...[0xD7FF] or [0xE000]...[0x10FFFF])."]
    
    
    val of_int :
    int -> t[@@ocaml.doc
              " [of_int i] is [i] as a Unicode character.\n\n    @raise Invalid_argument if [i] does not satisfy {!is_valid}. "]
    
    
    [@@@ocaml.text "/*"]
    
    val unsafe_of_int : int -> t
    
    
    [@@@ocaml.text "/*"]
    
    val to_int : t -> int[@@ocaml.doc " [to_int u] is [u] as an integer. "]
    
    
    val is_char :
    t -> bool[@@ocaml.doc
               " [is_char u] is [true] iff [u] is a latin1 OCaml character. "]
    
    
    val of_char :
    char -> t[@@ocaml.doc " [of_char c] is [c] as a Unicode character. "]
    
    
    val to_char :
    t -> char[@@ocaml.doc
               " [to_char u] is [u] as an OCaml latin1 character.\n\n    @raise Invalid_argument if [u] does not satisfy {!is_char}. "]
    
    
    [@@@ocaml.text "/*"]
    
    val unsafe_to_char : t -> char
    
    
    [@@@ocaml.text "/*"]
    
    val equal : t -> t -> bool[@@ocaml.doc " [equal u u'] is [u = u']. "]
    
    
    val compare :
    t -> t -> int[@@ocaml.doc " [compare u u'] is [Stdlib.compare u u']. "]
    
    
    val hash :
    t -> int[@@ocaml.doc
              " [hash u] associates a non-negative integer to [u]. "]
    


*** OK ***

