
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.text
  " The run-time library for parsers generated by [ocamlyacc]. "]
val symbol_start : unit -> int[@@ocaml.doc
                                " [symbol_start] and {!Parsing.symbol_end} are to be called in the\n   action part of a grammar rule only. They return the offset of the\n   string that matches the left-hand side of the rule: [symbol_start()]\n   returns the offset of the first character; [symbol_end()] returns the\n   offset after the last character. The first character in a file is at\n   offset 0. "]
val symbol_end : unit -> int[@@ocaml.doc " See {!Parsing.symbol_start}. "]
val rhs_start : int -> int[@@ocaml.doc
                            " Same as {!Parsing.symbol_start} and {!Parsing.symbol_end}, but\n   return the offset of the string matching the [n]th item on the\n   right-hand side of the rule, where [n] is the integer parameter\n   to [rhs_start] and [rhs_end]. [n] is 1 for the leftmost item. "]
val rhs_end : int -> int[@@ocaml.doc " See {!Parsing.rhs_start}. "]
val symbol_start_pos : unit -> Lexing.position[@@ocaml.doc
                                                " Same as [symbol_start], but return a [position] instead of an offset. "]
val symbol_end_pos : unit -> Lexing.position[@@ocaml.doc
                                              " Same as [symbol_end], but return a [position] instead of an offset. "]
val rhs_start_pos : int -> Lexing.position[@@ocaml.doc
                                            " Same as [rhs_start], but return a [position] instead of an offset. "]
val rhs_end_pos : int -> Lexing.position[@@ocaml.doc
                                          " Same as [rhs_end], but return a [position] instead of an offset. "]
val clear_parser : unit -> unit[@@ocaml.doc
                                 " Empty the parser stack. Call it just after a parsing function\n   has returned, to remove all pointers from the parser stack\n   to structures that were built by semantic actions during parsing.\n   This is optional, but lowers the memory requirements of the\n   programs. "]
exception Parse_error
  [@ocaml.doc
    " Raised when a parser encounters a syntax error.\n   Can also be raised from the action part of a grammar rule,\n   to initiate error recovery. "]
val set_trace : bool -> bool[@@ocaml.doc
                              " Control debugging support for [ocamlyacc]-generated parsers.\n    After [Parsing.set_trace true], the pushdown automaton that\n    executes the parsers prints a trace of its actions (reading a token,\n    shifting a state, reducing by a rule) on standard output.\n    [Parsing.set_trace false] turns this debugging trace off.\n    The boolean returned is the previous state of the trace flag.\n    @since 3.11.0\n"]
[@@@ocaml.text "/*"]
[@@@ocaml.text " {1  } "]
[@@@ocaml.text
  " The following definitions are used by the generated parsers only.\n   They are not intended to be used directly by user programs. "]
type parser_env
type parse_tables =
  {
  actions: (parser_env -> Obj.t) array ;
  transl_const: int array ;
  transl_block: int array ;
  lhs: string ;
  len: string ;
  defred: string ;
  dgoto: string ;
  sindex: string ;
  rindex: string ;
  gindex: string ;
  tablesize: int ;
  table: string ;
  check: string ;
  error_function: string -> unit ;
  names_const: string ;
  names_block: string }
exception YYexit of Obj.t 
val yyparse :
  parse_tables -> int -> (Lexing.lexbuf -> 'a) -> Lexing.lexbuf -> 'b
val peek_val : parser_env -> int -> 'a
val is_current_lookahead : 'a -> bool
val parse_error : string -> unit

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.text
  " The run-time library for parsers generated by [ocamlyacc]. "]

val symbol_start : unit -> int[@@ocaml.doc
                                " [symbol_start] and {!Parsing.symbol_end} are to be called in the\n   action part of a grammar rule only. They return the offset of the\n   string that matches the left-hand side of the rule: [symbol_start()]\n   returns the offset of the first character; [symbol_end()] returns the\n   offset after the last character. The first character in a file is at\n   offset 0. "]


val symbol_end : unit -> int[@@ocaml.doc " See {!Parsing.symbol_start}. "]


val rhs_start : int -> int[@@ocaml.doc
                            " Same as {!Parsing.symbol_start} and {!Parsing.symbol_end}, but\n   return the offset of the string matching the [n]th item on the\n   right-hand side of the rule, where [n] is the integer parameter\n   to [rhs_start] and [rhs_end]. [n] is 1 for the leftmost item. "]


val rhs_end : int -> int[@@ocaml.doc " See {!Parsing.rhs_start}. "]


val symbol_start_pos : unit -> Lexing.position[@@ocaml.doc
                                                " Same as [symbol_start], but return a [position] instead of an offset. "]


val symbol_end_pos : unit -> Lexing.position[@@ocaml.doc
                                              " Same as [symbol_end], but return a [position] instead of an offset. "]


val rhs_start_pos : int -> Lexing.position[@@ocaml.doc
                                            " Same as [rhs_start], but return a [position] instead of an offset. "]


val rhs_end_pos : int -> Lexing.position[@@ocaml.doc
                                          " Same as [rhs_end], but return a [position] instead of an offset. "]


val clear_parser : unit -> unit[@@ocaml.doc
                                 " Empty the parser stack. Call it just after a parsing function\n   has returned, to remove all pointers from the parser stack\n   to structures that were built by semantic actions during parsing.\n   This is optional, but lowers the memory requirements of the\n   programs. "]


exception Parse_error
  [@ocaml.doc
    " Raised when a parser encounters a syntax error.\n   Can also be raised from the action part of a grammar rule,\n   to initiate error recovery. "]

val set_trace : bool -> bool[@@ocaml.doc
                              " Control debugging support for [ocamlyacc]-generated parsers.\n    After [Parsing.set_trace true], the pushdown automaton that\n    executes the parsers prints a trace of its actions (reading a token,\n    shifting a state, reducing by a rule) on standard output.\n    [Parsing.set_trace false] turns this debugging trace off.\n    The boolean returned is the previous state of the trace flag.\n    @since 3.11.0\n"]


[@@@ocaml.text "/*"]

[@@@ocaml.text " {1  } "]

[@@@ocaml.text
  " The following definitions are used by the generated parsers only.\n   They are not intended to be used directly by user programs. "]

type parser_env
  

type parse_tables =
{
actions: (parser_env -> Obj.t) array ;
transl_const: int array ;
transl_block: int array ;
lhs: string ;
len: string ;
defred: string ;
dgoto: string ;
sindex: string ;
rindex: string ;
gindex: string ;
tablesize: int ;
table: string ;
check: string ;
error_function: string -> unit ;
names_const: string ;
names_block: string }
  

exception YYexit of Obj.t 

val yyparse :
  parse_tables -> int -> (Lexing.lexbuf -> 'a) -> Lexing.lexbuf -> 'b


val peek_val : parser_env -> int -> 'a


val is_current_lookahead : 'a -> bool


val parse_error : string -> unit

gospel: internal error, uncaught exception:
        File "gospel/src/typing.ml", line 425, characters 7-13: Assertion failed
        
