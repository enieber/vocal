
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.text
  " Documentation comments\n\n  {b Warning:} this module is unstable and part of\n  {{!Compiler_libs}compiler-libs}.\n\n"]
val init : unit -> unit[@@ocaml.doc " (Re)Initialise all docstring state "]
val warn_bad_docstrings : unit -> unit[@@ocaml.doc
                                        " Emit warnings for unattached and ambiguous docstrings "]
[@@@ocaml.text " {2 Docstrings} "]
type docstring[@@ocaml.doc " Documentation comments "]
val docstring : string -> Location.t -> docstring[@@ocaml.doc
                                                   " Create a docstring "]
val register : docstring -> unit[@@ocaml.doc " Register a docstring "]
val docstring_body : docstring -> string[@@ocaml.doc
                                          " Get the text of a docstring "]
val docstring_loc : docstring -> Location.t[@@ocaml.doc
                                             " Get the location of a docstring "]
[@@@ocaml.text
  " {2 Set functions}\n\n   These functions are used by the lexer to associate docstrings to\n   the locations of tokens. "]
val set_pre_docstrings : Lexing.position -> docstring list -> unit[@@ocaml.doc
                                                                    " Docstrings immediately preceding a token "]
val set_post_docstrings : Lexing.position -> docstring list -> unit[@@ocaml.doc
                                                                    " Docstrings immediately following a token "]
val set_floating_docstrings : Lexing.position -> docstring list -> unit
[@@ocaml.doc " Docstrings not immediately adjacent to a token "]
val set_pre_extra_docstrings : Lexing.position -> docstring list -> unit
[@@ocaml.doc
  " Docstrings immediately following the token which precedes this one "]
val set_post_extra_docstrings : Lexing.position -> docstring list -> unit
[@@ocaml.doc
  " Docstrings immediately preceding the token which follows this one "]
[@@@ocaml.text
  " {2 Items}\n\n    The {!docs} type represents documentation attached to an item. "]
type docs = {
  docs_pre: docstring option ;
  docs_post: docstring option }
val empty_docs : docs
val docs_attr : docstring -> Parsetree.attribute
val add_docs_attrs : docs -> Parsetree.attributes -> Parsetree.attributes
[@@ocaml.doc
  " Convert item documentation to attributes and add them to an\n    attribute list "]
val symbol_docs : unit -> docs[@@ocaml.doc
                                " Fetch the item documentation for the current symbol. This also\n    marks this documentation (for ambiguity warnings). "]
val symbol_docs_lazy : unit -> docs Lazy.t
val rhs_docs : int -> int -> docs[@@ocaml.doc
                                   " Fetch the item documentation for the symbols between two\n    positions. This also marks this documentation (for ambiguity\n    warnings). "]
val rhs_docs_lazy : int -> int -> docs Lazy.t
val mark_symbol_docs : unit -> unit[@@ocaml.doc
                                     " Mark the item documentation for the current symbol (for ambiguity\n    warnings). "]
val mark_rhs_docs : int -> int -> unit[@@ocaml.doc
                                        " Mark as associated the item documentation for the symbols between\n    two positions (for ambiguity warnings) "]
[@@@ocaml.text
  " {2 Fields and constructors}\n\n    The {!info} type represents documentation attached to a field or\n    constructor. "]
type info = docstring option
val empty_info : info
val info_attr : docstring -> Parsetree.attribute
val add_info_attrs : info -> Parsetree.attributes -> Parsetree.attributes
[@@ocaml.doc
  " Convert field info to attributes and add them to an\n    attribute list "]
val symbol_info : unit -> info[@@ocaml.doc
                                " Fetch the field info for the current symbol. "]
val rhs_info : int -> info[@@ocaml.doc
                            " Fetch the field info following the symbol at a given position. "]
[@@@ocaml.text
  " {2 Unattached comments}\n\n    The {!text} type represents documentation which is not attached to\n    anything. "]
type text = docstring list
val empty_text : text
val empty_text_lazy : text Lazy.t
val text_attr : docstring -> Parsetree.attribute
val add_text_attrs : text -> Parsetree.attributes -> Parsetree.attributes
[@@ocaml.doc
  " Convert text to attributes and add them to an attribute list "]
val symbol_text : unit -> text[@@ocaml.doc
                                " Fetch the text preceding the current symbol. "]
val symbol_text_lazy : unit -> text Lazy.t
val rhs_text : int -> text[@@ocaml.doc
                            " Fetch the text preceding the symbol at the given position. "]
val rhs_text_lazy : int -> text Lazy.t
[@@@ocaml.text
  " {2 Extra text}\n\n    There may be additional text attached to the delimiters of a block\n    (e.g. [struct] and [end]). This is fetched by the following\n    functions, which are applied to the contents of the block rather\n    than the delimiters. "]
val symbol_pre_extra_text : unit -> text[@@ocaml.doc
                                          " Fetch additional text preceding the current symbol "]
val symbol_post_extra_text : unit -> text[@@ocaml.doc
                                           " Fetch additional text following the current symbol "]
val rhs_pre_extra_text : int -> text[@@ocaml.doc
                                      " Fetch additional text preceding the symbol at the given position "]
val rhs_post_extra_text : int -> text[@@ocaml.doc
                                       " Fetch additional text following the symbol at the given position "]
val rhs_post_text : int -> text[@@ocaml.doc
                                 " Fetch text following the symbol at the given position "]
module WithMenhir :
sig
  val symbol_docs : (Lexing.position * Lexing.position) -> docs[@@ocaml.doc
                                                                 " Fetch the item documentation for the current symbol. This also\n    marks this documentation (for ambiguity warnings). "]
  val symbol_docs_lazy : (Lexing.position * Lexing.position) -> docs Lazy.t
  val rhs_docs : Lexing.position -> Lexing.position -> docs[@@ocaml.doc
                                                             " Fetch the item documentation for the symbols between two\n    positions. This also marks this documentation (for ambiguity\n    warnings). "]
  val rhs_docs_lazy : Lexing.position -> Lexing.position -> docs Lazy.t
  val mark_symbol_docs : (Lexing.position * Lexing.position) -> unit[@@ocaml.doc
                                                                    " Mark the item documentation for the current symbol (for ambiguity\n    warnings). "]
  val mark_rhs_docs : Lexing.position -> Lexing.position -> unit[@@ocaml.doc
                                                                  " Mark as associated the item documentation for the symbols between\n    two positions (for ambiguity warnings) "]
  val symbol_info : Lexing.position -> info[@@ocaml.doc
                                             " Fetch the field info for the current symbol. "]
  val rhs_info : Lexing.position -> info[@@ocaml.doc
                                          " Fetch the field info following the symbol at a given position. "]
  val symbol_text : Lexing.position -> text[@@ocaml.doc
                                             " Fetch the text preceding the current symbol. "]
  val symbol_text_lazy : Lexing.position -> text Lazy.t
  val rhs_text : Lexing.position -> text[@@ocaml.doc
                                          " Fetch the text preceding the symbol at the given position. "]
  val rhs_text_lazy : Lexing.position -> text Lazy.t
  [@@@ocaml.text
    " {3 Extra text}\n\n    There may be additional text attached to the delimiters of a block\n    (e.g. [struct] and [end]). This is fetched by the following\n    functions, which are applied to the contents of the block rather\n    than the delimiters. "]
  val symbol_pre_extra_text : Lexing.position -> text[@@ocaml.doc
                                                       " Fetch additional text preceding the current symbol "]
  val symbol_post_extra_text : Lexing.position -> text[@@ocaml.doc
                                                        " Fetch additional text following the current symbol "]
  val rhs_pre_extra_text : Lexing.position -> text[@@ocaml.doc
                                                    " Fetch additional text preceding the symbol at the given position "]
  val rhs_post_extra_text : Lexing.position -> text[@@ocaml.doc
                                                     " Fetch additional text following the symbol at the given position "]
  val rhs_post_text : Lexing.position -> text[@@ocaml.doc
                                               " Fetch text following the symbol at the given position "]
end

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.text
  " Documentation comments\n\n  {b Warning:} this module is unstable and part of\n  {{!Compiler_libs}compiler-libs}.\n\n"]

val init : unit -> unit[@@ocaml.doc " (Re)Initialise all docstring state "]


val warn_bad_docstrings : unit -> unit[@@ocaml.doc
                                        " Emit warnings for unattached and ambiguous docstrings "]


[@@@ocaml.text " {2 Docstrings} "]

type docstring[@@ocaml.doc " Documentation comments "]
  

val docstring : string -> Location.t -> docstring[@@ocaml.doc
                                                   " Create a docstring "]


val register : docstring -> unit[@@ocaml.doc " Register a docstring "]


val docstring_body : docstring -> string[@@ocaml.doc
                                          " Get the text of a docstring "]


val docstring_loc : docstring -> Location.t[@@ocaml.doc
                                             " Get the location of a docstring "]


[@@@ocaml.text
  " {2 Set functions}\n\n   These functions are used by the lexer to associate docstrings to\n   the locations of tokens. "]

val set_pre_docstrings : Lexing.position -> docstring list -> unit[@@ocaml.doc
                                                                    " Docstrings immediately preceding a token "]


val set_post_docstrings : Lexing.position -> docstring list -> unit[@@ocaml.doc
                                                                    " Docstrings immediately following a token "]


val set_floating_docstrings : Lexing.position -> docstring list -> unit
[@@ocaml.doc " Docstrings not immediately adjacent to a token "]


val set_pre_extra_docstrings : Lexing.position -> docstring list -> unit
[@@ocaml.doc
  " Docstrings immediately following the token which precedes this one "]


val set_post_extra_docstrings : Lexing.position -> docstring list -> unit
[@@ocaml.doc
  " Docstrings immediately preceding the token which follows this one "]


[@@@ocaml.text
  " {2 Items}\n\n    The {!docs} type represents documentation attached to an item. "]

type docs = {
docs_pre: docstring option ;
docs_post: docstring option }
  

val empty_docs : docs


val docs_attr : docstring -> Parsetree.attribute


val add_docs_attrs : docs -> Parsetree.attributes -> Parsetree.attributes
[@@ocaml.doc
  " Convert item documentation to attributes and add them to an\n    attribute list "]


val symbol_docs : unit -> docs[@@ocaml.doc
                                " Fetch the item documentation for the current symbol. This also\n    marks this documentation (for ambiguity warnings). "]


val symbol_docs_lazy : unit -> docs Lazy.t


val rhs_docs : int -> int -> docs[@@ocaml.doc
                                   " Fetch the item documentation for the symbols between two\n    positions. This also marks this documentation (for ambiguity\n    warnings). "]


val rhs_docs_lazy : int -> int -> docs Lazy.t


val mark_symbol_docs : unit -> unit[@@ocaml.doc
                                     " Mark the item documentation for the current symbol (for ambiguity\n    warnings). "]


val mark_rhs_docs : int -> int -> unit[@@ocaml.doc
                                        " Mark as associated the item documentation for the symbols between\n    two positions (for ambiguity warnings) "]


[@@@ocaml.text
  " {2 Fields and constructors}\n\n    The {!info} type represents documentation attached to a field or\n    constructor. "]

type info = docstring option
  

val empty_info : info


val info_attr : docstring -> Parsetree.attribute


val add_info_attrs : info -> Parsetree.attributes -> Parsetree.attributes
[@@ocaml.doc
  " Convert field info to attributes and add them to an\n    attribute list "]


val symbol_info : unit -> info[@@ocaml.doc
                                " Fetch the field info for the current symbol. "]


val rhs_info : int -> info[@@ocaml.doc
                            " Fetch the field info following the symbol at a given position. "]


[@@@ocaml.text
  " {2 Unattached comments}\n\n    The {!text} type represents documentation which is not attached to\n    anything. "]

type text = docstring list
  

val empty_text : text


val empty_text_lazy : text Lazy.t


val text_attr : docstring -> Parsetree.attribute


val add_text_attrs : text -> Parsetree.attributes -> Parsetree.attributes
[@@ocaml.doc
  " Convert text to attributes and add them to an attribute list "]


val symbol_text : unit -> text[@@ocaml.doc
                                " Fetch the text preceding the current symbol. "]


val symbol_text_lazy : unit -> text Lazy.t


val rhs_text : int -> text[@@ocaml.doc
                            " Fetch the text preceding the symbol at the given position. "]


val rhs_text_lazy : int -> text Lazy.t


[@@@ocaml.text
  " {2 Extra text}\n\n    There may be additional text attached to the delimiters of a block\n    (e.g. [struct] and [end]). This is fetched by the following\n    functions, which are applied to the contents of the block rather\n    than the delimiters. "]

val symbol_pre_extra_text : unit -> text[@@ocaml.doc
                                          " Fetch additional text preceding the current symbol "]


val symbol_post_extra_text : unit -> text[@@ocaml.doc
                                           " Fetch additional text following the current symbol "]


val rhs_pre_extra_text : int -> text[@@ocaml.doc
                                      " Fetch additional text preceding the symbol at the given position "]


val rhs_post_extra_text : int -> text[@@ocaml.doc
                                       " Fetch additional text following the symbol at the given position "]


val rhs_post_text : int -> text[@@ocaml.doc
                                 " Fetch text following the symbol at the given position "]


module WithMenhir :
sig
  val symbol_docs : (Lexing.position * Lexing.position) -> docs[@@ocaml.doc
                                                                 " Fetch the item documentation for the current symbol. This also\n    marks this documentation (for ambiguity warnings). "]
  
  val symbol_docs_lazy : (Lexing.position * Lexing.position) -> docs Lazy.t
  
  val rhs_docs : Lexing.position -> Lexing.position -> docs[@@ocaml.doc
                                                             " Fetch the item documentation for the symbols between two\n    positions. This also marks this documentation (for ambiguity\n    warnings). "]
  
  val rhs_docs_lazy : Lexing.position -> Lexing.position -> docs Lazy.t
  
  val mark_symbol_docs : (Lexing.position * Lexing.position) -> unit[@@ocaml.doc
                                                                    " Mark the item documentation for the current symbol (for ambiguity\n    warnings). "]
  
  val mark_rhs_docs : Lexing.position -> Lexing.position -> unit[@@ocaml.doc
                                                                  " Mark as associated the item documentation for the symbols between\n    two positions (for ambiguity warnings) "]
  
  val symbol_info : Lexing.position -> info[@@ocaml.doc
                                             " Fetch the field info for the current symbol. "]
  
  val rhs_info : Lexing.position -> info[@@ocaml.doc
                                          " Fetch the field info following the symbol at a given position. "]
  
  val symbol_text : Lexing.position -> text[@@ocaml.doc
                                             " Fetch the text preceding the current symbol. "]
  
  val symbol_text_lazy : Lexing.position -> text Lazy.t
  
  val rhs_text : Lexing.position -> text[@@ocaml.doc
                                          " Fetch the text preceding the symbol at the given position. "]
  
  val rhs_text_lazy : Lexing.position -> text Lazy.t
  
  [@@@ocaml.text
    " {3 Extra text}\n\n    There may be additional text attached to the delimiters of a block\n    (e.g. [struct] and [end]). This is fetched by the following\n    functions, which are applied to the contents of the block rather\n    than the delimiters. "]
  val symbol_pre_extra_text : Lexing.position -> text[@@ocaml.doc
                                                       " Fetch additional text preceding the current symbol "]
  
  val symbol_post_extra_text : Lexing.position -> text[@@ocaml.doc
                                                        " Fetch additional text following the current symbol "]
  
  val rhs_pre_extra_text : Lexing.position -> text[@@ocaml.doc
                                                    " Fetch additional text preceding the symbol at the given position "]
  
  val rhs_post_extra_text : Lexing.position -> text[@@ocaml.doc
                                                     " Fetch additional text following the symbol at the given position "]
  
  val rhs_post_text : Lexing.position -> text[@@ocaml.doc
                                               " Fetch text following the symbol at the given position "]
  
end

*******************************
********* Typed GOSPEL ********
*******************************
module docstrings.mli

  Namespace: docstrings.mli
    Type symbols
       docs
       docstring
       info [=docstring option]
       text [=docstring list]
      
    Logic Symbols
      function constr#docs (_:docstring option) (_:docstring option) : docs
      function docs_post (_:docs) : docstring option
      function docs_pre (_:docs) : docstring option
      
    Exception Symbols
      
    Namespaces
      Namespace: WithMenhir
        Type symbols
          
        Logic Symbols
          
        Exception Symbols
          
        Namespaces
          
        Type Namespaces
          
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    [@@@ocaml.text
      " Documentation comments\n\n  {b Warning:} this module is unstable and part of\n  {{!Compiler_libs}compiler-libs}.\n\n"]
    
    val init :
    unit -> unit[@@ocaml.doc " (Re)Initialise all docstring state "]
    
    
    val warn_bad_docstrings :
    unit -> unit[@@ocaml.doc
                  " Emit warnings for unattached and ambiguous docstrings "]
    
    
    [@@@ocaml.text " {2 Docstrings} "]
    
    type docstring
    
    
    val docstring#1 :
    string -> Location.t -> docstring[@@ocaml.doc " Create a docstring "]
    
    
    val register : docstring -> unit[@@ocaml.doc " Register a docstring "]
    
    
    val docstring_body :
    docstring -> string[@@ocaml.doc " Get the text of a docstring "]
    
    
    val docstring_loc :
    docstring -> Location.t[@@ocaml.doc " Get the location of a docstring "]
    
    
    [@@@ocaml.text
      " {2 Set functions}\n\n   These functions are used by the lexer to associate docstrings to\n   the locations of tokens. "]
    
    val set_pre_docstrings :
    Lexing.position -> docstring list -> unit[@@ocaml.doc
                                               " Docstrings immediately preceding a token "]
    
    
    val set_post_docstrings :
    Lexing.position -> docstring list -> unit[@@ocaml.doc
                                               " Docstrings immediately following a token "]
    
    
    val set_floating_docstrings :
    Lexing.position -> docstring list -> unit[@@ocaml.doc
                                               " Docstrings not immediately adjacent to a token "]
    
    
    val set_pre_extra_docstrings :
    Lexing.position -> docstring list -> unit[@@ocaml.doc
                                               " Docstrings immediately following the token which precedes this one "]
    
    
    val set_post_extra_docstrings :
    Lexing.position -> docstring list -> unit[@@ocaml.doc
                                               " Docstrings immediately preceding the token which follows this one "]
    
    
    [@@@ocaml.text
      " {2 Items}\n\n    The {!docs} type represents documentation attached to an item. "]
    
    type docs = {docs_pre:docstring option; docs_post:docstring option}
             function constr#docs (_:docstring option) (_:docstring option) : docs
               function docs_pre (_:docs) : docstring option
               function docs_post (_:docs) : docstring option
    
    
    val empty_docs : docs
    
    
    val docs_attr : docstring -> Parsetree.attribute
    
    
    val add_docs_attrs :
    docs -> Parsetree.attributes -> Parsetree.attributes[@@ocaml.doc
                                                          " Convert item documentation to attributes and add them to an\n    attribute list "]
    
    
    val symbol_docs :
    unit -> docs[@@ocaml.doc
                  " Fetch the item documentation for the current symbol. This also\n    marks this documentation (for ambiguity warnings). "]
    
    
    val symbol_docs_lazy : unit -> docs Lazy.t
    
    
    val rhs_docs :
    int -> int -> docs[@@ocaml.doc
                        " Fetch the item documentation for the symbols between two\n    positions. This also marks this documentation (for ambiguity\n    warnings). "]
    
    
    val rhs_docs_lazy : int -> int -> docs Lazy.t
    
    
    val mark_symbol_docs :
    unit -> unit[@@ocaml.doc
                  " Mark the item documentation for the current symbol (for ambiguity\n    warnings). "]
    
    
    val mark_rhs_docs :
    int -> int -> unit[@@ocaml.doc
                        " Mark as associated the item documentation for the symbols between\n    two positions (for ambiguity warnings) "]
    
    
    [@@@ocaml.text
      " {2 Fields and constructors}\n\n    The {!info} type represents documentation attached to a field or\n    constructor. "]
    
    type info = docstring option
    
    
    val empty_info : info
    
    
    val info_attr : docstring -> Parsetree.attribute
    
    
    val add_info_attrs :
    info -> Parsetree.attributes -> Parsetree.attributes[@@ocaml.doc
                                                          " Convert field info to attributes and add them to an\n    attribute list "]
    
    
    val symbol_info :
    unit -> info[@@ocaml.doc
                  " Fetch the field info for the current symbol. "]
    
    
    val rhs_info :
    int -> info[@@ocaml.doc
                 " Fetch the field info following the symbol at a given position. "]
    
    
    [@@@ocaml.text
      " {2 Unattached comments}\n\n    The {!text} type represents documentation which is not attached to\n    anything. "]
    
    type text = docstring list
    
    
    val empty_text : text
    
    
    val empty_text_lazy : text Lazy.t
    
    
    val text_attr : docstring -> Parsetree.attribute
    
    
    val add_text_attrs :
    text -> Parsetree.attributes -> Parsetree.attributes[@@ocaml.doc
                                                          " Convert text to attributes and add them to an attribute list "]
    
    
    val symbol_text :
    unit -> text[@@ocaml.doc
                  " Fetch the text preceding the current symbol. "]
    
    
    val symbol_text_lazy : unit -> text Lazy.t
    
    
    val rhs_text :
    int -> text[@@ocaml.doc
                 " Fetch the text preceding the symbol at the given position. "]
    
    
    val rhs_text_lazy : int -> text Lazy.t
    
    
    [@@@ocaml.text
      " {2 Extra text}\n\n    There may be additional text attached to the delimiters of a block\n    (e.g. [struct] and [end]). This is fetched by the following\n    functions, which are applied to the contents of the block rather\n    than the delimiters. "]
    
    val symbol_pre_extra_text :
    unit -> text[@@ocaml.doc
                  " Fetch additional text preceding the current symbol "]
    
    
    val symbol_post_extra_text :
    unit -> text[@@ocaml.doc
                  " Fetch additional text following the current symbol "]
    
    
    val rhs_pre_extra_text :
    int -> text[@@ocaml.doc
                 " Fetch additional text preceding the symbol at the given position "]
    
    
    val rhs_post_extra_text :
    int -> text[@@ocaml.doc
                 " Fetch additional text following the symbol at the given position "]
    
    
    val rhs_post_text :
    int -> text[@@ocaml.doc
                 " Fetch text following the symbol at the given position "]
    
    
    module WithMenhir :
    sig
      val symbol_docs#1 :
      (Lexing.position * Lexing.position) -> docs[@@ocaml.doc
                                                   " Fetch the item documentation for the current symbol. This also\n    marks this documentation (for ambiguity warnings). "]
      
      val symbol_docs_lazy#1 :
      (Lexing.position * Lexing.position) -> docs Lazy.t
      
      val rhs_docs#1 :
      Lexing.position -> Lexing.position -> docs[@@ocaml.doc
                                                  " Fetch the item documentation for the symbols between two\n    positions. This also marks this documentation (for ambiguity\n    warnings). "]
      
      val rhs_docs_lazy#1 : Lexing.position -> Lexing.position -> docs Lazy.t
      
      val mark_symbol_docs#1 :
      (Lexing.position * Lexing.position) -> unit[@@ocaml.doc
                                                   " Mark the item documentation for the current symbol (for ambiguity\n    warnings). "]
      
      val mark_rhs_docs#1 :
      Lexing.position -> Lexing.position -> unit[@@ocaml.doc
                                                  " Mark as associated the item documentation for the symbols between\n    two positions (for ambiguity warnings) "]
      
      val symbol_info#1 :
      Lexing.position -> info[@@ocaml.doc
                               " Fetch the field info for the current symbol. "]
      
      val rhs_info#1 :
      Lexing.position -> info[@@ocaml.doc
                               " Fetch the field info following the symbol at a given position. "]
      
      val symbol_text#1 :
      Lexing.position -> text[@@ocaml.doc
                               " Fetch the text preceding the current symbol. "]
      
      val symbol_text_lazy#1 : Lexing.position -> text Lazy.t
      
      val rhs_text#1 :
      Lexing.position -> text[@@ocaml.doc
                               " Fetch the text preceding the symbol at the given position. "]
      
      val rhs_text_lazy#1 : Lexing.position -> text Lazy.t
      
      [@@@ocaml.text
        " {3 Extra text}\n\n    There may be additional text attached to the delimiters of a block\n    (e.g. [struct] and [end]). This is fetched by the following\n    functions, which are applied to the contents of the block rather\n    than the delimiters. "]
      val symbol_pre_extra_text#1 :
      Lexing.position -> text[@@ocaml.doc
                               " Fetch additional text preceding the current symbol "]
      
      val symbol_post_extra_text#1 :
      Lexing.position -> text[@@ocaml.doc
                               " Fetch additional text following the current symbol "]
      
      val rhs_pre_extra_text#1 :
      Lexing.position -> text[@@ocaml.doc
                               " Fetch additional text preceding the symbol at the given position "]
      
      val rhs_post_extra_text#1 :
      Lexing.position -> text[@@ocaml.doc
                               " Fetch additional text following the symbol at the given position "]
      
      val rhs_post_text#1 :
      Lexing.position -> text[@@ocaml.doc
                               " Fetch text following the symbol at the given position "]
      
    end


*** OK ***

