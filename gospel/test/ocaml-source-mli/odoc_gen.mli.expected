
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.text " The types of generators. "]
class type doc_generator =
  object method  generate : Odoc_module.t_module list -> unit end[@@ocaml.doc
                                                                   " The minimal class type of documentation generators. "]
module type Base  = sig class generator : doc_generator end[@@ocaml.doc
                                                             " The module type of minimal generators. "]
module Base_generator : Base
module type Base_functor  = functor (P : Base) -> Base
module type Html_functor  =
  functor (G : Odoc_html.Html_generator) -> Odoc_html.Html_generator
module type Latex_functor  =
  functor (G : Odoc_latex.Latex_generator) -> Odoc_latex.Latex_generator
module type Texi_functor  =
  functor (G : Odoc_texi.Texi_generator) -> Odoc_texi.Texi_generator
module type Man_functor  =
  functor (G : Odoc_man.Man_generator) -> Odoc_man.Man_generator
module type Dot_functor  =
  functor (G : Odoc_dot.Dot_generator) -> Odoc_dot.Dot_generator
type generator =
  | Html of (module Odoc_html.Html_generator) 
  | Latex of (module Odoc_latex.Latex_generator) 
  | Texi of (module Odoc_texi.Texi_generator) 
  | Man of (module Odoc_man.Man_generator) 
  | Dot of (module Odoc_dot.Dot_generator) 
  | Base of (module Base) [@@ocaml.doc
                            " Various ways to create a generator. "]
val get_minimal_generator : generator -> doc_generator

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.text " The types of generators. "]

class type doc_generator =
  object method  generate : Odoc_module.t_module list -> unit end[@@ocaml.doc
                                                                   " The minimal class type of documentation generators. "]

module type Base  = sig class generator : doc_generator end[@@ocaml.doc
                                                             " The module type of minimal generators. "]

module Base_generator : Base

module type Base_functor  = functor (P : Base) -> Base

module type Html_functor  =
  functor (G : Odoc_html.Html_generator) -> Odoc_html.Html_generator

module type Latex_functor  =
  functor (G : Odoc_latex.Latex_generator) -> Odoc_latex.Latex_generator

module type Texi_functor  =
  functor (G : Odoc_texi.Texi_generator) -> Odoc_texi.Texi_generator

module type Man_functor  =
  functor (G : Odoc_man.Man_generator) -> Odoc_man.Man_generator

module type Dot_functor  =
  functor (G : Odoc_dot.Dot_generator) -> Odoc_dot.Dot_generator

type generator =
| Html of (module Odoc_html.Html_generator) 
| Latex of (module Odoc_latex.Latex_generator) 
| Texi of (module Odoc_texi.Texi_generator) 
| Man of (module Odoc_man.Man_generator) 
| Dot of (module Odoc_dot.Dot_generator) 
| Base of (module Base) [@@ocaml.doc " Various ways to create a generator. "]
  

val get_minimal_generator : generator -> doc_generator

File "odoc_gen.mli", line 30, characters 39-63:
Error: Type checking error: no module with name Odoc_html or file with name odoc_html.mli
