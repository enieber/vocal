
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.text
  " {1 Floating-point arithmetic}\n\n    OCaml's floating-point numbers follow the\n    IEEE 754 standard, using double precision (64 bits) numbers.\n    Floating-point operations never raise an exception on overflow,\n    underflow, division by zero, etc.  Instead, special IEEE numbers\n    are returned as appropriate, such as [infinity] for [1.0 /. 0.0],\n    [neg_infinity] for [-1.0 /. 0.0], and [nan] ('not a number')\n    for [0.0 /. 0.0].  These special numbers then propagate through\n    floating-point computations as expected: for instance,\n    [1.0 /. infinity] is [0.0], and any arithmetic operation with [nan]\n    as argument returns [nan] as result.\n\n    @since 4.07.0\n"]
external neg : float -> float = "%negfloat"[@@ocaml.doc " Unary negation. "]
external add : float -> float -> float = "%addfloat"[@@ocaml.doc
                                                      " Floating-point addition. "]
external sub : float -> float -> float = "%subfloat"[@@ocaml.doc
                                                      " Floating-point subtraction. "]
external mul : float -> float -> float = "%mulfloat"[@@ocaml.doc
                                                      " Floating-point multiplication. "]
external div : float -> float -> float = "%divfloat"[@@ocaml.doc
                                                      " Floating-point division. "]
external rem : float -> float -> float = "caml_fmod_float" "fmod"[@@unboxed ]
[@@noalloc ][@@ocaml.doc
              " [rem a b] returns the remainder of [a] with respect to [b].  The returned\n    value is [a -. n *. b], where [n] is the quotient [a /. b] rounded towards\n    zero to an integer. "]
external abs : float -> float = "%absfloat"[@@ocaml.doc
                                             " [abs f] returns the absolute value of [f]. "]
val infinity : float[@@ocaml.doc " Positive infinity. "]
val neg_infinity : float[@@ocaml.doc " Negative infinity. "]
val nan : float[@@ocaml.doc
                 " A special floating-point value denoting the result of an\n    undefined operation such as [0.0 /. 0.0].  Stands for\n    'not a number'.  Any floating-point operation with [nan] as\n    argument returns [nan] as result.  As for floating-point comparisons,\n    [=], [<], [<=], [>] and [>=] return [false] and [<>] returns [true]\n    if one or both of their arguments is [nan]. "]
val pi : float[@@ocaml.doc " The constant pi. "]
val max_float : float[@@ocaml.doc
                       " The largest positive finite value of type [float]. "]
val min_float : float[@@ocaml.doc
                       " The smallest positive, non-zero, non-denormalized value of type [float]. "]
val epsilon : float[@@ocaml.doc
                     " The difference between [1.0] and the smallest exactly representable\n    floating-point number greater than [1.0]. "]
external of_int : int -> float = "%floatofint"[@@ocaml.doc
                                                " Convert an integer to floating-point. "]
external to_int : float -> int = "%intoffloat"[@@ocaml.doc
                                                " Truncate the given floating-point number to an integer.\n    The result is unspecified if the argument is [nan] or falls outside the\n    range of representable integers. "]
external of_string : string -> float = "caml_float_of_string"[@@ocaml.doc
                                                               " Convert the given string to a float.  The string is read in decimal\n    (by default) or in hexadecimal (marked by [0x] or [0X]).\n    The format of decimal floating-point numbers is\n    [ [-] dd.ddd (e|E) [+|-] dd ], where [d] stands for a decimal digit.\n    The format of hexadecimal floating-point numbers is\n    [ [-] 0(x|X) hh.hhh (p|P) [+|-] dd ], where [h] stands for an\n    hexadecimal digit and [d] for a decimal digit.\n    In both cases, at least one of the integer and fractional parts must be\n    given; the exponent part is optional.\n    The [_] (underscore) character can appear anywhere in the string\n    and is ignored.\n    Depending on the execution platforms, other representations of\n    floating-point numbers can be accepted, but should not be relied upon.\n    Raise [Failure \"float_of_string\"] if the given string is not a valid\n    representation of a float. "]
val of_string_opt : string -> float option[@@ocaml.doc
                                            " Same as [of_string], but returns [None] instead of raising. "]
val to_string : float -> string[@@ocaml.doc
                                 " Return the string representation of a floating-point number. "]
type fpclass = Stdlib.fpclass =
  | FP_normal [@ocaml.doc " Normal number, none of the below "]
  | FP_subnormal
  [@ocaml.doc " Number very close to 0.0, has reduced precision "]
  | FP_zero [@ocaml.doc " Number is 0.0 or -0.0 "]
  | FP_infinite [@ocaml.doc " Number is positive or negative infinity "]
  | FP_nan [@ocaml.doc " Not a number: result of an undefined operation "]
[@@ocaml.doc
  " The five classes of floating-point numbers, as determined by\n    the {!classify_float} function. "]
external classify_float :
  ((float)[@unboxed ]) -> fpclass = "caml_classify_float"
    "caml_classify_float_unboxed"[@@noalloc ][@@ocaml.doc
                                               " Return the class of the given floating-point number:\n    normal, subnormal, zero, infinite, or not a number. "]
external pow : float -> float -> float = "caml_power_float" "pow"[@@unboxed ]
[@@noalloc ][@@ocaml.doc " Exponentiation. "]
external sqrt : float -> float = "caml_sqrt_float" "sqrt"[@@unboxed ]
[@@noalloc ][@@ocaml.doc " Square root. "]
external exp : float -> float = "caml_exp_float" "exp"[@@unboxed ][@@noalloc
                                                                    ]
[@@ocaml.doc " Exponential. "]
external log : float -> float = "caml_log_float" "log"[@@unboxed ][@@noalloc
                                                                    ]
[@@ocaml.doc " Natural logarithm. "]
external log10 : float -> float = "caml_log10_float" "log10"[@@unboxed ]
[@@noalloc ][@@ocaml.doc " Base 10 logarithm. "]
external expm1 : float -> float = "caml_expm1_float" "caml_expm1"[@@unboxed ]
[@@noalloc ][@@ocaml.doc
              " [expm1 x] computes [exp x -. 1.0], giving numerically-accurate results\n    even if [x] is close to [0.0]. "]
external log1p : float -> float = "caml_log1p_float" "caml_log1p"[@@unboxed ]
[@@noalloc ][@@ocaml.doc
              " [log1p x] computes [log(1.0 +. x)] (natural logarithm),\n    giving numerically-accurate results even if [x] is close to [0.0]. "]
external cos : float -> float = "caml_cos_float" "cos"[@@unboxed ][@@noalloc
                                                                    ]
[@@ocaml.doc " Cosine.  Argument is in radians. "]
external sin : float -> float = "caml_sin_float" "sin"[@@unboxed ][@@noalloc
                                                                    ]
[@@ocaml.doc " Sine.  Argument is in radians. "]
external tan : float -> float = "caml_tan_float" "tan"[@@unboxed ][@@noalloc
                                                                    ]
[@@ocaml.doc " Tangent.  Argument is in radians. "]
external acos : float -> float = "caml_acos_float" "acos"[@@unboxed ]
[@@noalloc ][@@ocaml.doc
              " Arc cosine.  The argument must fall within the range [[-1.0, 1.0]].\n    Result is in radians and is between [0.0] and [pi]. "]
external asin : float -> float = "caml_asin_float" "asin"[@@unboxed ]
[@@noalloc ][@@ocaml.doc
              " Arc sine.  The argument must fall within the range [[-1.0, 1.0]].\n    Result is in radians and is between [-pi/2] and [pi/2]. "]
external atan : float -> float = "caml_atan_float" "atan"[@@unboxed ]
[@@noalloc ][@@ocaml.doc
              " Arc tangent.\n    Result is in radians and is between [-pi/2] and [pi/2]. "]
external atan2 : float -> float -> float = "caml_atan2_float" "atan2"
[@@unboxed ][@@noalloc ][@@ocaml.doc
                          " [atan2 y x] returns the arc tangent of [y /. x].  The signs of [x]\n    and [y] are used to determine the quadrant of the result.\n    Result is in radians and is between [-pi] and [pi]. "]
external hypot : float -> float -> float = "caml_hypot_float" "caml_hypot"
[@@unboxed ][@@noalloc ][@@ocaml.doc
                          " [hypot x y] returns [sqrt(x *. x + y *. y)], that is, the length\n    of the hypotenuse of a right-angled triangle with sides of length\n    [x] and [y], or, equivalently, the distance of the point [(x,y)]\n    to origin.  If one of [x] or [y] is infinite, returns [infinity]\n    even if the other is [nan]. "]
external cosh : float -> float = "caml_cosh_float" "cosh"[@@unboxed ]
[@@noalloc ][@@ocaml.doc " Hyperbolic cosine.  Argument is in radians. "]
external sinh : float -> float = "caml_sinh_float" "sinh"[@@unboxed ]
[@@noalloc ][@@ocaml.doc " Hyperbolic sine.  Argument is in radians. "]
external tanh : float -> float = "caml_tanh_float" "tanh"[@@unboxed ]
[@@noalloc ][@@ocaml.doc " Hyperbolic tangent.  Argument is in radians. "]
external ceil : float -> float = "caml_ceil_float" "ceil"[@@unboxed ]
[@@noalloc ][@@ocaml.doc
              " Round above to an integer value.\n    [ceil f] returns the least integer value greater than or equal to [f].\n    The result is returned as a float. "]
external floor : float -> float = "caml_floor_float" "floor"[@@unboxed ]
[@@noalloc ][@@ocaml.doc
              " Round below to an integer value.\n    [floor f] returns the greatest integer value less than or\n    equal to [f].\n    The result is returned as a float. "]
external copysign :
  float -> float -> float = "caml_copysign_float" "caml_copysign"[@@unboxed ]
[@@noalloc ][@@ocaml.doc
              " [copysign x y] returns a float whose absolute value is that of [x]\n    and whose sign is that of [y].  If [x] is [nan], returns [nan].\n    If [y] is [nan], returns either [x] or [-. x], but it is not\n    specified which. "]
external frexp : float -> (float * int) = "caml_frexp_float"[@@ocaml.doc
                                                              " [frexp f] returns the pair of the significant\n    and the exponent of [f].  When [f] is zero, the\n    significant [x] and the exponent [n] of [f] are equal to\n    zero.  When [f] is non-zero, they are defined by\n    [f = x *. 2 ** n] and [0.5 <= x < 1.0]. "]
external ldexp :
  ((float)[@unboxed ]) -> ((int)[@untagged ]) -> ((float)[@unboxed ]) =
    "caml_ldexp_float" "caml_ldexp_float_unboxed"[@@noalloc ][@@ocaml.doc
                                                               " [ldexp x n] returns [x *. 2 ** n]. "]
external modf : float -> (float * float) = "caml_modf_float"[@@ocaml.doc
                                                              " [modf f] returns the pair of the fractional and integral\n    part of [f]. "]
type t = float[@@ocaml.doc
                " An alias for the type of floating-point numbers. "]
val compare : t -> t -> int[@@ocaml.doc
                             " [compare x y] returns [0] if [x] is equal to [y], a negative integer if [x]\n    is less than [y], and a positive integer if [x] is greater than\n    [y]. [compare] treats [nan] as equal to itself and less than any other float\n    value.  This treatment of [nan] ensures that [compare] defines a total\n    ordering relation.  "]
val equal : t -> t -> bool[@@ocaml.doc
                            " The equal function for floating-point numbers, compared using {!compare}. "]
val hash : t -> int[@@ocaml.doc
                     " The hash function for floating-point numbers. "]
module Array :
sig
  type t = floatarray
  external create : int -> t = "caml_floatarray_create"
  external length : t -> int = "%floatarray_length"
  external get : t -> int -> float = "%floatarray_safe_get"
  external set : t -> int -> float -> unit = "%floatarray_safe_set"
  external unsafe_get : t -> int -> float = "%floatarray_unsafe_get"
  external unsafe_set : t -> int -> float -> unit = "%floatarray_unsafe_set"
end

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.text
  " {1 Floating-point arithmetic}\n\n    OCaml's floating-point numbers follow the\n    IEEE 754 standard, using double precision (64 bits) numbers.\n    Floating-point operations never raise an exception on overflow,\n    underflow, division by zero, etc.  Instead, special IEEE numbers\n    are returned as appropriate, such as [infinity] for [1.0 /. 0.0],\n    [neg_infinity] for [-1.0 /. 0.0], and [nan] ('not a number')\n    for [0.0 /. 0.0].  These special numbers then propagate through\n    floating-point computations as expected: for instance,\n    [1.0 /. infinity] is [0.0], and any arithmetic operation with [nan]\n    as argument returns [nan] as result.\n\n    @since 4.07.0\n"]

external neg : float -> float = "%negfloat"[@@ocaml.doc " Unary negation. "]


external add : float -> float -> float = "%addfloat"[@@ocaml.doc
                                                      " Floating-point addition. "]


external sub : float -> float -> float = "%subfloat"[@@ocaml.doc
                                                      " Floating-point subtraction. "]


external mul : float -> float -> float = "%mulfloat"[@@ocaml.doc
                                                      " Floating-point multiplication. "]


external div : float -> float -> float = "%divfloat"[@@ocaml.doc
                                                      " Floating-point division. "]


external rem : float -> float -> float = "caml_fmod_float" "fmod"[@@unboxed ]
[@@noalloc ][@@ocaml.doc
              " [rem a b] returns the remainder of [a] with respect to [b].  The returned\n    value is [a -. n *. b], where [n] is the quotient [a /. b] rounded towards\n    zero to an integer. "]


external abs : float -> float = "%absfloat"[@@ocaml.doc
                                             " [abs f] returns the absolute value of [f]. "]


val infinity : float[@@ocaml.doc " Positive infinity. "]


val neg_infinity : float[@@ocaml.doc " Negative infinity. "]


val nan : float[@@ocaml.doc
                 " A special floating-point value denoting the result of an\n    undefined operation such as [0.0 /. 0.0].  Stands for\n    'not a number'.  Any floating-point operation with [nan] as\n    argument returns [nan] as result.  As for floating-point comparisons,\n    [=], [<], [<=], [>] and [>=] return [false] and [<>] returns [true]\n    if one or both of their arguments is [nan]. "]


val pi : float[@@ocaml.doc " The constant pi. "]


val max_float : float[@@ocaml.doc
                       " The largest positive finite value of type [float]. "]


val min_float : float[@@ocaml.doc
                       " The smallest positive, non-zero, non-denormalized value of type [float]. "]


val epsilon : float[@@ocaml.doc
                     " The difference between [1.0] and the smallest exactly representable\n    floating-point number greater than [1.0]. "]


external of_int : int -> float = "%floatofint"[@@ocaml.doc
                                                " Convert an integer to floating-point. "]


external to_int : float -> int = "%intoffloat"[@@ocaml.doc
                                                " Truncate the given floating-point number to an integer.\n    The result is unspecified if the argument is [nan] or falls outside the\n    range of representable integers. "]


external of_string : string -> float = "caml_float_of_string"[@@ocaml.doc
                                                               " Convert the given string to a float.  The string is read in decimal\n    (by default) or in hexadecimal (marked by [0x] or [0X]).\n    The format of decimal floating-point numbers is\n    [ [-] dd.ddd (e|E) [+|-] dd ], where [d] stands for a decimal digit.\n    The format of hexadecimal floating-point numbers is\n    [ [-] 0(x|X) hh.hhh (p|P) [+|-] dd ], where [h] stands for an\n    hexadecimal digit and [d] for a decimal digit.\n    In both cases, at least one of the integer and fractional parts must be\n    given; the exponent part is optional.\n    The [_] (underscore) character can appear anywhere in the string\n    and is ignored.\n    Depending on the execution platforms, other representations of\n    floating-point numbers can be accepted, but should not be relied upon.\n    Raise [Failure \"float_of_string\"] if the given string is not a valid\n    representation of a float. "]


val of_string_opt : string -> float option[@@ocaml.doc
                                            " Same as [of_string], but returns [None] instead of raising. "]


val to_string : float -> string[@@ocaml.doc
                                 " Return the string representation of a floating-point number. "]


type fpclass = Stdlib.fpclass =
| FP_normal [@ocaml.doc " Normal number, none of the below "]
| FP_subnormal
[@ocaml.doc " Number very close to 0.0, has reduced precision "]
| FP_zero [@ocaml.doc " Number is 0.0 or -0.0 "]
| FP_infinite [@ocaml.doc " Number is positive or negative infinity "]
| FP_nan [@ocaml.doc " Not a number: result of an undefined operation "]
[@@ocaml.doc
  " The five classes of floating-point numbers, as determined by\n    the {!classify_float} function. "]
  

external classify_float :
  ((float)[@unboxed ]) -> fpclass = "caml_classify_float"
  "caml_classify_float_unboxed"[@@noalloc ][@@ocaml.doc
                                             " Return the class of the given floating-point number:\n    normal, subnormal, zero, infinite, or not a number. "]


external pow : float -> float -> float = "caml_power_float" "pow"[@@unboxed ]
[@@noalloc ][@@ocaml.doc " Exponentiation. "]


external sqrt : float -> float = "caml_sqrt_float" "sqrt"[@@unboxed ]
[@@noalloc ][@@ocaml.doc " Square root. "]


external exp : float -> float = "caml_exp_float" "exp"[@@unboxed ][@@noalloc
                                                                    ]
[@@ocaml.doc " Exponential. "]


external log : float -> float = "caml_log_float" "log"[@@unboxed ][@@noalloc
                                                                    ]
[@@ocaml.doc " Natural logarithm. "]


external log10 : float -> float = "caml_log10_float" "log10"[@@unboxed ]
[@@noalloc ][@@ocaml.doc " Base 10 logarithm. "]


external expm1 : float -> float = "caml_expm1_float" "caml_expm1"[@@unboxed ]
[@@noalloc ][@@ocaml.doc
              " [expm1 x] computes [exp x -. 1.0], giving numerically-accurate results\n    even if [x] is close to [0.0]. "]


external log1p : float -> float = "caml_log1p_float" "caml_log1p"[@@unboxed ]
[@@noalloc ][@@ocaml.doc
              " [log1p x] computes [log(1.0 +. x)] (natural logarithm),\n    giving numerically-accurate results even if [x] is close to [0.0]. "]


external cos : float -> float = "caml_cos_float" "cos"[@@unboxed ][@@noalloc
                                                                    ]
[@@ocaml.doc " Cosine.  Argument is in radians. "]


external sin : float -> float = "caml_sin_float" "sin"[@@unboxed ][@@noalloc
                                                                    ]
[@@ocaml.doc " Sine.  Argument is in radians. "]


external tan : float -> float = "caml_tan_float" "tan"[@@unboxed ][@@noalloc
                                                                    ]
[@@ocaml.doc " Tangent.  Argument is in radians. "]


external acos : float -> float = "caml_acos_float" "acos"[@@unboxed ]
[@@noalloc ][@@ocaml.doc
              " Arc cosine.  The argument must fall within the range [[-1.0, 1.0]].\n    Result is in radians and is between [0.0] and [pi]. "]


external asin : float -> float = "caml_asin_float" "asin"[@@unboxed ]
[@@noalloc ][@@ocaml.doc
              " Arc sine.  The argument must fall within the range [[-1.0, 1.0]].\n    Result is in radians and is between [-pi/2] and [pi/2]. "]


external atan : float -> float = "caml_atan_float" "atan"[@@unboxed ]
[@@noalloc ][@@ocaml.doc
              " Arc tangent.\n    Result is in radians and is between [-pi/2] and [pi/2]. "]


external atan2 : float -> float -> float = "caml_atan2_float" "atan2"
[@@unboxed ][@@noalloc ][@@ocaml.doc
                          " [atan2 y x] returns the arc tangent of [y /. x].  The signs of [x]\n    and [y] are used to determine the quadrant of the result.\n    Result is in radians and is between [-pi] and [pi]. "]


external hypot : float -> float -> float = "caml_hypot_float" "caml_hypot"
[@@unboxed ][@@noalloc ][@@ocaml.doc
                          " [hypot x y] returns [sqrt(x *. x + y *. y)], that is, the length\n    of the hypotenuse of a right-angled triangle with sides of length\n    [x] and [y], or, equivalently, the distance of the point [(x,y)]\n    to origin.  If one of [x] or [y] is infinite, returns [infinity]\n    even if the other is [nan]. "]


external cosh : float -> float = "caml_cosh_float" "cosh"[@@unboxed ]
[@@noalloc ][@@ocaml.doc " Hyperbolic cosine.  Argument is in radians. "]


external sinh : float -> float = "caml_sinh_float" "sinh"[@@unboxed ]
[@@noalloc ][@@ocaml.doc " Hyperbolic sine.  Argument is in radians. "]


external tanh : float -> float = "caml_tanh_float" "tanh"[@@unboxed ]
[@@noalloc ][@@ocaml.doc " Hyperbolic tangent.  Argument is in radians. "]


external ceil : float -> float = "caml_ceil_float" "ceil"[@@unboxed ]
[@@noalloc ][@@ocaml.doc
              " Round above to an integer value.\n    [ceil f] returns the least integer value greater than or equal to [f].\n    The result is returned as a float. "]


external floor : float -> float = "caml_floor_float" "floor"[@@unboxed ]
[@@noalloc ][@@ocaml.doc
              " Round below to an integer value.\n    [floor f] returns the greatest integer value less than or\n    equal to [f].\n    The result is returned as a float. "]


external copysign :
  float -> float -> float = "caml_copysign_float" "caml_copysign"[@@unboxed ]
[@@noalloc ][@@ocaml.doc
              " [copysign x y] returns a float whose absolute value is that of [x]\n    and whose sign is that of [y].  If [x] is [nan], returns [nan].\n    If [y] is [nan], returns either [x] or [-. x], but it is not\n    specified which. "]


external frexp : float -> (float * int) = "caml_frexp_float"[@@ocaml.doc
                                                              " [frexp f] returns the pair of the significant\n    and the exponent of [f].  When [f] is zero, the\n    significant [x] and the exponent [n] of [f] are equal to\n    zero.  When [f] is non-zero, they are defined by\n    [f = x *. 2 ** n] and [0.5 <= x < 1.0]. "]


external ldexp :
  ((float)[@unboxed ]) -> ((int)[@untagged ]) -> ((float)[@unboxed ]) =
  "caml_ldexp_float" "caml_ldexp_float_unboxed"[@@noalloc ][@@ocaml.doc
                                                             " [ldexp x n] returns [x *. 2 ** n]. "]


external modf : float -> (float * float) = "caml_modf_float"[@@ocaml.doc
                                                              " [modf f] returns the pair of the fractional and integral\n    part of [f]. "]


type t = float[@@ocaml.doc
                " An alias for the type of floating-point numbers. "]
  

val compare : t -> t -> int[@@ocaml.doc
                             " [compare x y] returns [0] if [x] is equal to [y], a negative integer if [x]\n    is less than [y], and a positive integer if [x] is greater than\n    [y]. [compare] treats [nan] as equal to itself and less than any other float\n    value.  This treatment of [nan] ensures that [compare] defines a total\n    ordering relation.  "]


val equal : t -> t -> bool[@@ocaml.doc
                            " The equal function for floating-point numbers, compared using {!compare}. "]


val hash : t -> int[@@ocaml.doc
                     " The hash function for floating-point numbers. "]


module Array :
sig
  type t = floatarray
    
  external create : int -> t = "caml_floatarray_create"
  
  external length : t -> int = "%floatarray_length"
  
  external get : t -> int -> float = "%floatarray_safe_get"
  
  external set : t -> int -> float -> unit = "%floatarray_safe_set"
  
  external unsafe_get : t -> int -> float = "%floatarray_unsafe_get"
  
  external unsafe_set : t -> int -> float -> unit = "%floatarray_unsafe_set"
  
end
File "./stdlib.mli", line 1072, characters 8-11:
Error: Multiple definitions of type ref
