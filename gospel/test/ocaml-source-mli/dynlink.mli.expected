
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.text " Dynamic loading of object files. "]
val is_native : bool[@@ocaml.doc
                      " [true] if the program is native,\n    [false] if the program is bytecode. "]
[@@@ocaml.text " {1 Dynamic loading of compiled files} "]
val loadfile : string -> unit[@@ocaml.doc
                               " In bytecode: load the given bytecode object file ([.cmo] file) or\n    bytecode library file ([.cma] file), and link it with the running\n    program. In native code: load the given OCaml plugin file (usually\n    [.cmxs]), and link it with the running\n    program.\n    All toplevel expressions in the loaded compilation units\n    are evaluated. No facilities are provided to\n    access value names defined by the unit. Therefore, the unit\n    must register itself its entry points with the main program,\n    e.g. by modifying tables of functions. "]
val loadfile_private : string -> unit[@@ocaml.doc
                                       " Same as [loadfile], except that the compilation units just loaded\n    are hidden (cannot be referenced) from other modules dynamically\n    loaded afterwards. "]
val adapt_filename : string -> string[@@ocaml.doc
                                       " In bytecode, the identity function. In native code, replace the last\n    extension with [.cmxs]. "]
[@@@ocaml.text " {1 Access control} "]
val allow_only : string list -> unit[@@ocaml.doc
                                      " [allow_only units] restricts the compilation units that\n    dynamically-linked units can reference: it forbids all references\n    to units other than those named in the list [units]. References\n    to any other compilation unit will cause a [Unavailable_unit]\n    error during [loadfile] or [loadfile_private].\n\n    Initially (or after calling [default_available_units]) all\n    compilation units composing the program currently running are\n    available for reference from dynamically-linked units.\n    [allow_only] can be used to restrict access to a subset of these\n    units, e.g. to the units that compose the API for\n    dynamically-linked code, and prevent access to all other units,\n    e.g. private, internal modules of the running program. If\n    [allow_only] is called several times, access will be restricted to\n    the intersection of the given lists (i.e. a call to [allow_only]\n    can never increase the set of available units). "]
val prohibit : string list -> unit[@@ocaml.doc
                                    " [prohibit units] prohibits dynamically-linked units from referencing\n    the units named in list [units].  This can be used to prevent\n    access to selected units, e.g. private, internal modules of\n    the running program. "]
val default_available_units : unit -> unit[@@ocaml.doc
                                            " Reset the set of units that can be referenced from dynamically-linked\n    code to its default value, that is, all units composing the currently\n    running program. "]
val allow_unsafe_modules : bool -> unit[@@ocaml.doc
                                         " Govern whether unsafe object files are allowed to be\n    dynamically linked. A compilation unit is 'unsafe' if it contains\n    declarations of external functions, which can break type safety.\n    By default, dynamic linking of unsafe object files is\n    not allowed. In native code, this function does nothing; object files\n    with external functions are always allowed to be dynamically linked. "]
[@@@ocaml.text " {1 Deprecated, low-level API for access control} "]
[@@@ocaml.text
  " @deprecated  The functions [add_interfaces], [add_available_units]\n    and [clear_available_units] should not be used in new programs,\n    since the default initialization of allowed units, along with the\n    [allow_only] and [prohibit] function, provides a better, safer\n    mechanism to control access to program units.  The three functions\n    below are provided for backward compatibility only and are not\n    available in native code. "]
val add_interfaces : string list -> string list -> unit[@@ocaml.doc
                                                         " [add_interfaces units path] grants dynamically-linked object\n    files access to the compilation  units named in list [units].\n    The interfaces ([.cmi] files) for these units are searched in\n    [path] (a list of directory names). "]
val add_available_units : (string * Digest.t) list -> unit[@@ocaml.doc
                                                            " Same as {!Dynlink.add_interfaces}, but instead of searching [.cmi] files\n    to find the unit interfaces, uses the interface digests given\n    for each unit. This way, the [.cmi] interface files need not be\n    available at run-time. The digests can be extracted from [.cmi]\n    files using the [extract_crc] program installed in the\n    OCaml standard library directory. "]
val clear_available_units : unit -> unit[@@ocaml.doc
                                          " Empty the list of compilation units accessible to dynamically-linked\n    programs. "]
[@@@ocaml.text " {1 Deprecated, initialization} "]
val init : unit -> unit[@@ocaml.doc
                         " @deprecated Initialize the [Dynlink] library. This function is called\n    automatically when needed. "]
[@@@ocaml.text " {1 Error reporting} "]
type linking_error =
  | Undefined_global of string 
  | Unavailable_primitive of string 
  | Uninitialized_global of string 
type error =
  | Not_a_bytecode_file of string 
  | Inconsistent_import of string 
  | Unavailable_unit of string 
  | Unsafe_file 
  | Linking_error of string * linking_error 
  | Corrupted_interface of string 
  | File_not_found of string 
  | Cannot_open_dll of string 
  | Inconsistent_implementation of string 
exception Error of error
  [@ocaml.doc
    " Errors in dynamic linking are reported by raising the [Error]\n    exception with a description of the error. "]
val error_message : error -> string[@@ocaml.doc
                                     " Convert an error description to a printable message. "]
[@@@ocaml.text "/*"]
[@@@ocaml.text " {1 Internal functions} "]
val digest_interface : string -> string list -> Digest.t

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.text " Dynamic loading of object files. "]

val is_native : bool[@@ocaml.doc
                      " [true] if the program is native,\n    [false] if the program is bytecode. "]


[@@@ocaml.text " {1 Dynamic loading of compiled files} "]

val loadfile : string -> unit[@@ocaml.doc
                               " In bytecode: load the given bytecode object file ([.cmo] file) or\n    bytecode library file ([.cma] file), and link it with the running\n    program. In native code: load the given OCaml plugin file (usually\n    [.cmxs]), and link it with the running\n    program.\n    All toplevel expressions in the loaded compilation units\n    are evaluated. No facilities are provided to\n    access value names defined by the unit. Therefore, the unit\n    must register itself its entry points with the main program,\n    e.g. by modifying tables of functions. "]


val loadfile_private : string -> unit[@@ocaml.doc
                                       " Same as [loadfile], except that the compilation units just loaded\n    are hidden (cannot be referenced) from other modules dynamically\n    loaded afterwards. "]


val adapt_filename : string -> string[@@ocaml.doc
                                       " In bytecode, the identity function. In native code, replace the last\n    extension with [.cmxs]. "]


[@@@ocaml.text " {1 Access control} "]

val allow_only : string list -> unit[@@ocaml.doc
                                      " [allow_only units] restricts the compilation units that\n    dynamically-linked units can reference: it forbids all references\n    to units other than those named in the list [units]. References\n    to any other compilation unit will cause a [Unavailable_unit]\n    error during [loadfile] or [loadfile_private].\n\n    Initially (or after calling [default_available_units]) all\n    compilation units composing the program currently running are\n    available for reference from dynamically-linked units.\n    [allow_only] can be used to restrict access to a subset of these\n    units, e.g. to the units that compose the API for\n    dynamically-linked code, and prevent access to all other units,\n    e.g. private, internal modules of the running program. If\n    [allow_only] is called several times, access will be restricted to\n    the intersection of the given lists (i.e. a call to [allow_only]\n    can never increase the set of available units). "]


val prohibit : string list -> unit[@@ocaml.doc
                                    " [prohibit units] prohibits dynamically-linked units from referencing\n    the units named in list [units].  This can be used to prevent\n    access to selected units, e.g. private, internal modules of\n    the running program. "]


val default_available_units : unit -> unit[@@ocaml.doc
                                            " Reset the set of units that can be referenced from dynamically-linked\n    code to its default value, that is, all units composing the currently\n    running program. "]


val allow_unsafe_modules : bool -> unit[@@ocaml.doc
                                         " Govern whether unsafe object files are allowed to be\n    dynamically linked. A compilation unit is 'unsafe' if it contains\n    declarations of external functions, which can break type safety.\n    By default, dynamic linking of unsafe object files is\n    not allowed. In native code, this function does nothing; object files\n    with external functions are always allowed to be dynamically linked. "]


[@@@ocaml.text " {1 Deprecated, low-level API for access control} "]

[@@@ocaml.text
  " @deprecated  The functions [add_interfaces], [add_available_units]\n    and [clear_available_units] should not be used in new programs,\n    since the default initialization of allowed units, along with the\n    [allow_only] and [prohibit] function, provides a better, safer\n    mechanism to control access to program units.  The three functions\n    below are provided for backward compatibility only and are not\n    available in native code. "]

val add_interfaces : string list -> string list -> unit[@@ocaml.doc
                                                         " [add_interfaces units path] grants dynamically-linked object\n    files access to the compilation  units named in list [units].\n    The interfaces ([.cmi] files) for these units are searched in\n    [path] (a list of directory names). "]


val add_available_units : (string * Digest.t) list -> unit[@@ocaml.doc
                                                            " Same as {!Dynlink.add_interfaces}, but instead of searching [.cmi] files\n    to find the unit interfaces, uses the interface digests given\n    for each unit. This way, the [.cmi] interface files need not be\n    available at run-time. The digests can be extracted from [.cmi]\n    files using the [extract_crc] program installed in the\n    OCaml standard library directory. "]


val clear_available_units : unit -> unit[@@ocaml.doc
                                          " Empty the list of compilation units accessible to dynamically-linked\n    programs. "]


[@@@ocaml.text " {1 Deprecated, initialization} "]

val init : unit -> unit[@@ocaml.doc
                         " @deprecated Initialize the [Dynlink] library. This function is called\n    automatically when needed. "]


[@@@ocaml.text " {1 Error reporting} "]

type linking_error =
| Undefined_global of string 
| Unavailable_primitive of string 
| Uninitialized_global of string 
  

type error =
| Not_a_bytecode_file of string 
| Inconsistent_import of string 
| Unavailable_unit of string 
| Unsafe_file 
| Linking_error of string * linking_error 
| Corrupted_interface of string 
| File_not_found of string 
| Cannot_open_dll of string 
| Inconsistent_implementation of string 
  

exception Error of error
  [@ocaml.doc
    " Errors in dynamic linking are reported by raising the [Error]\n    exception with a description of the error. "]

val error_message : error -> string[@@ocaml.doc
                                     " Convert an error description to a printable message. "]


[@@@ocaml.text "/*"]

[@@@ocaml.text " {1 Internal functions} "]

val digest_interface : string -> string list -> Digest.t


*******************************
********* Typed GOSPEL ********
*******************************
module dynlink.mli

  Namespace: dynlink.mli
    Type symbols
       error
       linking_error
      
    Logic Symbols
      function Cannot_open_dll (_:string) : error
      function Corrupted_interface (_:string) : error
      function File_not_found (_:string) : error
      function Inconsistent_implementation (_:string) : error
      function Inconsistent_import (_:string) : error
      function Linking_error (_:string * linking_error) : error
      function Not_a_bytecode_file (_:string) : error
      function Unavailable_primitive (_:string) : linking_error
      function Unavailable_unit (_:string) : error
      function Undefined_global (_:string) : linking_error
      function Uninitialized_global (_:string) : linking_error
      function Unsafe_file  : error
      
    Exception Symbols
      Error
      
    Namespaces
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    [@@@ocaml.text " Dynamic loading of object files. "]
    
    val is_native :
    bool[@@ocaml.doc
          " [true] if the program is native,\n    [false] if the program is bytecode. "]
    
    
    [@@@ocaml.text " {1 Dynamic loading of compiled files} "]
    
    val loadfile :
    string -> unit[@@ocaml.doc
                    " In bytecode: load the given bytecode object file ([.cmo] file) or\n    bytecode library file ([.cma] file), and link it with the running\n    program. In native code: load the given OCaml plugin file (usually\n    [.cmxs]), and link it with the running\n    program.\n    All toplevel expressions in the loaded compilation units\n    are evaluated. No facilities are provided to\n    access value names defined by the unit. Therefore, the unit\n    must register itself its entry points with the main program,\n    e.g. by modifying tables of functions. "]
    
    
    val loadfile_private :
    string -> unit[@@ocaml.doc
                    " Same as [loadfile], except that the compilation units just loaded\n    are hidden (cannot be referenced) from other modules dynamically\n    loaded afterwards. "]
    
    
    val adapt_filename :
    string -> string[@@ocaml.doc
                      " In bytecode, the identity function. In native code, replace the last\n    extension with [.cmxs]. "]
    
    
    [@@@ocaml.text " {1 Access control} "]
    
    val allow_only :
    string list -> unit[@@ocaml.doc
                         " [allow_only units] restricts the compilation units that\n    dynamically-linked units can reference: it forbids all references\n    to units other than those named in the list [units]. References\n    to any other compilation unit will cause a [Unavailable_unit]\n    error during [loadfile] or [loadfile_private].\n\n    Initially (or after calling [default_available_units]) all\n    compilation units composing the program currently running are\n    available for reference from dynamically-linked units.\n    [allow_only] can be used to restrict access to a subset of these\n    units, e.g. to the units that compose the API for\n    dynamically-linked code, and prevent access to all other units,\n    e.g. private, internal modules of the running program. If\n    [allow_only] is called several times, access will be restricted to\n    the intersection of the given lists (i.e. a call to [allow_only]\n    can never increase the set of available units). "]
    
    
    val prohibit :
    string list -> unit[@@ocaml.doc
                         " [prohibit units] prohibits dynamically-linked units from referencing\n    the units named in list [units].  This can be used to prevent\n    access to selected units, e.g. private, internal modules of\n    the running program. "]
    
    
    val default_available_units :
    unit -> unit[@@ocaml.doc
                  " Reset the set of units that can be referenced from dynamically-linked\n    code to its default value, that is, all units composing the currently\n    running program. "]
    
    
    val allow_unsafe_modules :
    bool -> unit[@@ocaml.doc
                  " Govern whether unsafe object files are allowed to be\n    dynamically linked. A compilation unit is 'unsafe' if it contains\n    declarations of external functions, which can break type safety.\n    By default, dynamic linking of unsafe object files is\n    not allowed. In native code, this function does nothing; object files\n    with external functions are always allowed to be dynamically linked. "]
    
    
    [@@@ocaml.text " {1 Deprecated, low-level API for access control} "]
    
    [@@@ocaml.text
      " @deprecated  The functions [add_interfaces], [add_available_units]\n    and [clear_available_units] should not be used in new programs,\n    since the default initialization of allowed units, along with the\n    [allow_only] and [prohibit] function, provides a better, safer\n    mechanism to control access to program units.  The three functions\n    below are provided for backward compatibility only and are not\n    available in native code. "]
    
    val add_interfaces :
    string list -> string list -> unit[@@ocaml.doc
                                        " [add_interfaces units path] grants dynamically-linked object\n    files access to the compilation  units named in list [units].\n    The interfaces ([.cmi] files) for these units are searched in\n    [path] (a list of directory names). "]
    
    
    val add_available_units :
    (string * Digest.t) list -> unit[@@ocaml.doc
                                      " Same as {!Dynlink.add_interfaces}, but instead of searching [.cmi] files\n    to find the unit interfaces, uses the interface digests given\n    for each unit. This way, the [.cmi] interface files need not be\n    available at run-time. The digests can be extracted from [.cmi]\n    files using the [extract_crc] program installed in the\n    OCaml standard library directory. "]
    
    
    val clear_available_units :
    unit -> unit[@@ocaml.doc
                  " Empty the list of compilation units accessible to dynamically-linked\n    programs. "]
    
    
    [@@@ocaml.text " {1 Deprecated, initialization} "]
    
    val init :
    unit -> unit[@@ocaml.doc
                  " @deprecated Initialize the [Dynlink] library. This function is called\n    automatically when needed. "]
    
    
    [@@@ocaml.text " {1 Error reporting} "]
    
    type linking_error = Undefined_global of string
                         function Undefined_global (_:string) : linking_error
                      | Unavailable_primitive of string
                        function Unavailable_primitive (_:string) : linking_error
                      | Uninitialized_global of string
                        function Uninitialized_global (_:string) : linking_error
    
    
    type error = Not_a_bytecode_file of string
                 function Not_a_bytecode_file (_:string) : error
              | Inconsistent_import of string
                function Inconsistent_import (_:string) : error
              | Unavailable_unit of string
                function Unavailable_unit (_:string) : error
              | Unsafe_file of 
                function Unsafe_file  : error
              | Linking_error of string * linking_error
                function Linking_error (_:string * linking_error) : error
              | Corrupted_interface of string
                function Corrupted_interface (_:string) : error
              | File_not_found of string
                function File_not_found (_:string) : error
              | Cannot_open_dll of string
                function Cannot_open_dll (_:string) : error
              | Inconsistent_implementation of string
                function Inconsistent_implementation (_:string) : error
    
    
    exception Error
    
    val error_message :
    error -> string[@@ocaml.doc
                     " Convert an error description to a printable message. "]
    
    
    [@@@ocaml.text "/*"]
    
    [@@@ocaml.text " {1 Internal functions} "]
    
    val digest_interface : string -> string list -> Digest.t
    


*** OK ***

