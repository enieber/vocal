
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.text
  " Marshaling of data structures.\n\n   This module provides functions to encode arbitrary data structures\n   as sequences of bytes, which can then be written on a file or\n   sent over a pipe or network connection.  The bytes can then\n   be read back later, possibly in another process, and decoded back\n   into a data structure. The format for the byte sequences\n   is compatible across all machines for a given version of OCaml.\n\n   Warning: marshaling is currently not type-safe. The type\n   of marshaled data is not transmitted along the value of the data,\n   making it impossible to check that the data read back possesses the\n   type expected by the context. In particular, the result type of\n   the [Marshal.from_*] functions is given as ['a], but this is\n   misleading: the returned OCaml value does not possess type ['a]\n   for all ['a]; it has one, unique type which cannot be determined\n   at compile-time.  The programmer should explicitly give the expected\n   type of the returned value, using the following syntax:\n   - [(Marshal.from_channel chan : type)].\n   Anything can happen at run-time if the object in the file does not\n   belong to the given type.\n\n   Values of extensible variant types, for example exceptions (of\n   extensible type [exn]), returned by the unmarshaller should not be\n   pattern-matched over through [match ... with] or [try ... with],\n   because unmarshalling does not preserve the information required for\n   matching their constructors. Structural equalities with other\n   extensible variant values does not work either.  Most other uses such\n   as Printexc.to_string, will still work as expected.\n\n   The representation of marshaled values is not human-readable,\n   and uses bytes that are not printable characters. Therefore,\n   input and output channels used in conjunction with [Marshal.to_channel]\n   and [Marshal.from_channel] must be opened in binary mode, using e.g.\n   [open_out_bin] or [open_in_bin]; channels opened in text mode will\n   cause unmarshaling errors on platforms where text channels behave\n   differently than binary channels, e.g. Windows.\n "]
type extern_flags =
  | No_sharing [@ocaml.doc " Don't preserve sharing "]
  | Closures [@ocaml.doc " Send function closures "]
  | Compat_32 [@ocaml.doc " Ensure 32-bit compatibility "][@@ocaml.doc
                                                            " The flags to the [Marshal.to_*] functions below. "]
val to_channel : out_channel -> 'a -> extern_flags list -> unit[@@ocaml.doc
                                                                 " [Marshal.to_channel chan v flags] writes the representation\n   of [v] on channel [chan]. The [flags] argument is a\n   possibly empty list of flags that governs the marshaling\n   behavior with respect to sharing, functional values, and compatibility\n   between 32- and 64-bit platforms.\n\n   If [flags] does not contain [Marshal.No_sharing], circularities\n   and sharing inside the value [v] are detected and preserved\n   in the sequence of bytes produced. In particular, this\n   guarantees that marshaling always terminates. Sharing\n   between values marshaled by successive calls to\n   [Marshal.to_channel] is neither detected nor preserved, though.\n   If [flags] contains [Marshal.No_sharing], sharing is ignored.\n   This results in faster marshaling if [v] contains no shared\n   substructures, but may cause slower marshaling and larger\n   byte representations if [v] actually contains sharing,\n   or even non-termination if [v] contains cycles.\n\n   If [flags] does not contain [Marshal.Closures], marshaling fails\n   when it encounters a functional value inside [v]: only 'pure' data\n   structures, containing neither functions nor objects, can safely be\n   transmitted between different programs. If [flags] contains\n   [Marshal.Closures], functional values will be marshaled as a the\n   position in the code of the program together with the values\n   corresponding to the free variables captured in the closure.  In\n   this case, the output of marshaling can only be read back in\n   processes that run exactly the same program, with exactly the same\n   compiled code. (This is checked at un-marshaling time, using an MD5\n   digest of the code transmitted along with the code position.)\n\n   The exact definition of which free variables are captured in a\n   closure is not specified and can vary between bytecode and native\n   code (and according to optimization flags).  In particular, a\n   function value accessing a global reference may or may not include\n   the reference in its closure.  If it does, unmarshaling the\n   corresponding closure will create a new reference, different from\n   the global one.\n\n\n   If [flags] contains [Marshal.Compat_32], marshaling fails when\n   it encounters an integer value outside the range [[-2{^30}, 2{^30}-1]]\n   of integers that are representable on a 32-bit platform.  This\n   ensures that marshaled data generated on a 64-bit platform can be\n   safely read back on a 32-bit platform.  If [flags] does not\n   contain [Marshal.Compat_32], integer values outside the\n   range [[-2{^30}, 2{^30}-1]] are marshaled, and can be read back on\n   a 64-bit platform, but will cause an error at un-marshaling time\n   when read back on a 32-bit platform.  The [Mashal.Compat_32] flag\n   only matters when marshaling is performed on a 64-bit platform;\n   it has no effect if marshaling is performed on a 32-bit platform.\n "]
external to_bytes :
  'a -> extern_flags list -> bytes = "caml_output_value_to_bytes"[@@ocaml.doc
                                                                   " [Marshal.to_bytes v flags] returns a byte sequence containing\n   the representation of [v].\n   The [flags] argument has the same meaning as for\n   {!Marshal.to_channel}.\n   @since 4.02.0 "]
external to_string :
  'a -> extern_flags list -> string = "caml_output_value_to_string"[@@ocaml.doc
                                                                    " Same as [to_bytes] but return the result as a string instead of\n    a byte sequence. "]
val to_buffer : bytes -> int -> int -> 'a -> extern_flags list -> int
[@@ocaml.doc
  " [Marshal.to_buffer buff ofs len v flags] marshals the value [v],\n   storing its byte representation in the sequence [buff],\n   starting at index [ofs], and writing at most\n   [len] bytes.  It returns the number of bytes\n   actually written to the sequence. If the byte representation\n   of [v] does not fit in [len] characters, the exception [Failure]\n   is raised. "]
val from_channel : in_channel -> 'a[@@ocaml.doc
                                     " [Marshal.from_channel chan] reads from channel [chan] the\n   byte representation of a structured value, as produced by\n   one of the [Marshal.to_*] functions, and reconstructs and\n   returns the corresponding value.\n\n   It raises [End_of_file] if the function has already reached the\n   end of file when starting to read from the channel, and raises\n   [Failure \"input_value: truncated object\"] if it reaches the end\n   of file later during the unmarshalling. "]
val from_bytes : bytes -> int -> 'a[@@ocaml.doc
                                     " [Marshal.from_bytes buff ofs] unmarshals a structured value\n   like {!Marshal.from_channel} does, except that the byte\n   representation is not read from a channel, but taken from\n   the byte sequence [buff], starting at position [ofs].\n   The byte sequence is not mutated.\n   @since 4.02.0 "]
val from_string : string -> int -> 'a[@@ocaml.doc
                                       " Same as [from_bytes] but take a string as argument instead of a\n    byte sequence. "]
val header_size : int[@@ocaml.doc
                       " The bytes representing a marshaled value are composed of\n   a fixed-size header and a variable-sized data part,\n   whose size can be determined from the header.\n   {!Marshal.header_size} is the size, in bytes, of the header.\n   {!Marshal.data_size}[ buff ofs] is the size, in bytes,\n   of the data part, assuming a valid header is stored in\n   [buff] starting at position [ofs].\n   Finally, {!Marshal.total_size} [buff ofs] is the total size,\n   in bytes, of the marshaled value.\n   Both {!Marshal.data_size} and {!Marshal.total_size} raise [Failure]\n   if [buff], [ofs] does not contain a valid header.\n\n   To read the byte representation of a marshaled value into\n   a byte sequence, the program needs to read first\n   {!Marshal.header_size} bytes into the sequence,\n   then determine the length of the remainder of the\n   representation using {!Marshal.data_size},\n   make sure the sequence is large enough to hold the remaining\n   data, then read it, and finally call {!Marshal.from_bytes}\n   to unmarshal the value. "]
val data_size : bytes -> int -> int[@@ocaml.doc
                                     " See {!Marshal.header_size}."]
val total_size : bytes -> int -> int[@@ocaml.doc
                                      " See {!Marshal.header_size}."]

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.text
  " Marshaling of data structures.\n\n   This module provides functions to encode arbitrary data structures\n   as sequences of bytes, which can then be written on a file or\n   sent over a pipe or network connection.  The bytes can then\n   be read back later, possibly in another process, and decoded back\n   into a data structure. The format for the byte sequences\n   is compatible across all machines for a given version of OCaml.\n\n   Warning: marshaling is currently not type-safe. The type\n   of marshaled data is not transmitted along the value of the data,\n   making it impossible to check that the data read back possesses the\n   type expected by the context. In particular, the result type of\n   the [Marshal.from_*] functions is given as ['a], but this is\n   misleading: the returned OCaml value does not possess type ['a]\n   for all ['a]; it has one, unique type which cannot be determined\n   at compile-time.  The programmer should explicitly give the expected\n   type of the returned value, using the following syntax:\n   - [(Marshal.from_channel chan : type)].\n   Anything can happen at run-time if the object in the file does not\n   belong to the given type.\n\n   Values of extensible variant types, for example exceptions (of\n   extensible type [exn]), returned by the unmarshaller should not be\n   pattern-matched over through [match ... with] or [try ... with],\n   because unmarshalling does not preserve the information required for\n   matching their constructors. Structural equalities with other\n   extensible variant values does not work either.  Most other uses such\n   as Printexc.to_string, will still work as expected.\n\n   The representation of marshaled values is not human-readable,\n   and uses bytes that are not printable characters. Therefore,\n   input and output channels used in conjunction with [Marshal.to_channel]\n   and [Marshal.from_channel] must be opened in binary mode, using e.g.\n   [open_out_bin] or [open_in_bin]; channels opened in text mode will\n   cause unmarshaling errors on platforms where text channels behave\n   differently than binary channels, e.g. Windows.\n "]

type extern_flags =
| No_sharing [@ocaml.doc " Don't preserve sharing "]
| Closures [@ocaml.doc " Send function closures "]
| Compat_32 [@ocaml.doc " Ensure 32-bit compatibility "][@@ocaml.doc
                                                          " The flags to the [Marshal.to_*] functions below. "]
  

val to_channel : out_channel -> 'a -> extern_flags list -> unit[@@ocaml.doc
                                                                 " [Marshal.to_channel chan v flags] writes the representation\n   of [v] on channel [chan]. The [flags] argument is a\n   possibly empty list of flags that governs the marshaling\n   behavior with respect to sharing, functional values, and compatibility\n   between 32- and 64-bit platforms.\n\n   If [flags] does not contain [Marshal.No_sharing], circularities\n   and sharing inside the value [v] are detected and preserved\n   in the sequence of bytes produced. In particular, this\n   guarantees that marshaling always terminates. Sharing\n   between values marshaled by successive calls to\n   [Marshal.to_channel] is neither detected nor preserved, though.\n   If [flags] contains [Marshal.No_sharing], sharing is ignored.\n   This results in faster marshaling if [v] contains no shared\n   substructures, but may cause slower marshaling and larger\n   byte representations if [v] actually contains sharing,\n   or even non-termination if [v] contains cycles.\n\n   If [flags] does not contain [Marshal.Closures], marshaling fails\n   when it encounters a functional value inside [v]: only 'pure' data\n   structures, containing neither functions nor objects, can safely be\n   transmitted between different programs. If [flags] contains\n   [Marshal.Closures], functional values will be marshaled as a the\n   position in the code of the program together with the values\n   corresponding to the free variables captured in the closure.  In\n   this case, the output of marshaling can only be read back in\n   processes that run exactly the same program, with exactly the same\n   compiled code. (This is checked at un-marshaling time, using an MD5\n   digest of the code transmitted along with the code position.)\n\n   The exact definition of which free variables are captured in a\n   closure is not specified and can vary between bytecode and native\n   code (and according to optimization flags).  In particular, a\n   function value accessing a global reference may or may not include\n   the reference in its closure.  If it does, unmarshaling the\n   corresponding closure will create a new reference, different from\n   the global one.\n\n\n   If [flags] contains [Marshal.Compat_32], marshaling fails when\n   it encounters an integer value outside the range [[-2{^30}, 2{^30}-1]]\n   of integers that are representable on a 32-bit platform.  This\n   ensures that marshaled data generated on a 64-bit platform can be\n   safely read back on a 32-bit platform.  If [flags] does not\n   contain [Marshal.Compat_32], integer values outside the\n   range [[-2{^30}, 2{^30}-1]] are marshaled, and can be read back on\n   a 64-bit platform, but will cause an error at un-marshaling time\n   when read back on a 32-bit platform.  The [Mashal.Compat_32] flag\n   only matters when marshaling is performed on a 64-bit platform;\n   it has no effect if marshaling is performed on a 32-bit platform.\n "]


external to_bytes :
  'a -> extern_flags list -> bytes = "caml_output_value_to_bytes"[@@ocaml.doc
                                                                   " [Marshal.to_bytes v flags] returns a byte sequence containing\n   the representation of [v].\n   The [flags] argument has the same meaning as for\n   {!Marshal.to_channel}.\n   @since 4.02.0 "]


external to_string :
  'a -> extern_flags list -> string = "caml_output_value_to_string"[@@ocaml.doc
                                                                    " Same as [to_bytes] but return the result as a string instead of\n    a byte sequence. "]


val to_buffer : bytes -> int -> int -> 'a -> extern_flags list -> int
[@@ocaml.doc
  " [Marshal.to_buffer buff ofs len v flags] marshals the value [v],\n   storing its byte representation in the sequence [buff],\n   starting at index [ofs], and writing at most\n   [len] bytes.  It returns the number of bytes\n   actually written to the sequence. If the byte representation\n   of [v] does not fit in [len] characters, the exception [Failure]\n   is raised. "]


val from_channel : in_channel -> 'a[@@ocaml.doc
                                     " [Marshal.from_channel chan] reads from channel [chan] the\n   byte representation of a structured value, as produced by\n   one of the [Marshal.to_*] functions, and reconstructs and\n   returns the corresponding value.\n\n   It raises [End_of_file] if the function has already reached the\n   end of file when starting to read from the channel, and raises\n   [Failure \"input_value: truncated object\"] if it reaches the end\n   of file later during the unmarshalling. "]


val from_bytes : bytes -> int -> 'a[@@ocaml.doc
                                     " [Marshal.from_bytes buff ofs] unmarshals a structured value\n   like {!Marshal.from_channel} does, except that the byte\n   representation is not read from a channel, but taken from\n   the byte sequence [buff], starting at position [ofs].\n   The byte sequence is not mutated.\n   @since 4.02.0 "]


val from_string : string -> int -> 'a[@@ocaml.doc
                                       " Same as [from_bytes] but take a string as argument instead of a\n    byte sequence. "]


val header_size : int[@@ocaml.doc
                       " The bytes representing a marshaled value are composed of\n   a fixed-size header and a variable-sized data part,\n   whose size can be determined from the header.\n   {!Marshal.header_size} is the size, in bytes, of the header.\n   {!Marshal.data_size}[ buff ofs] is the size, in bytes,\n   of the data part, assuming a valid header is stored in\n   [buff] starting at position [ofs].\n   Finally, {!Marshal.total_size} [buff ofs] is the total size,\n   in bytes, of the marshaled value.\n   Both {!Marshal.data_size} and {!Marshal.total_size} raise [Failure]\n   if [buff], [ofs] does not contain a valid header.\n\n   To read the byte representation of a marshaled value into\n   a byte sequence, the program needs to read first\n   {!Marshal.header_size} bytes into the sequence,\n   then determine the length of the remainder of the\n   representation using {!Marshal.data_size},\n   make sure the sequence is large enough to hold the remaining\n   data, then read it, and finally call {!Marshal.from_bytes}\n   to unmarshal the value. "]


val data_size : bytes -> int -> int[@@ocaml.doc
                                     " See {!Marshal.header_size}."]


val total_size : bytes -> int -> int[@@ocaml.doc
                                      " See {!Marshal.header_size}."]


*******************************
********* Typed GOSPEL ********
*******************************
module marshal.mli

  Namespace: marshal.mli
    Type symbols
       extern_flags
      
    Logic Symbols
      function Closures  : extern_flags
      function Compat_32  : extern_flags
      function No_sharing  : extern_flags
      
    Exception Symbols
      
    Namespaces
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    [@@@ocaml.text
      " Marshaling of data structures.\n\n   This module provides functions to encode arbitrary data structures\n   as sequences of bytes, which can then be written on a file or\n   sent over a pipe or network connection.  The bytes can then\n   be read back later, possibly in another process, and decoded back\n   into a data structure. The format for the byte sequences\n   is compatible across all machines for a given version of OCaml.\n\n   Warning: marshaling is currently not type-safe. The type\n   of marshaled data is not transmitted along the value of the data,\n   making it impossible to check that the data read back possesses the\n   type expected by the context. In particular, the result type of\n   the [Marshal.from_*] functions is given as ['a], but this is\n   misleading: the returned OCaml value does not possess type ['a]\n   for all ['a]; it has one, unique type which cannot be determined\n   at compile-time.  The programmer should explicitly give the expected\n   type of the returned value, using the following syntax:\n   - [(Marshal.from_channel chan : type)].\n   Anything can happen at run-time if the object in the file does not\n   belong to the given type.\n\n   Values of extensible variant types, for example exceptions (of\n   extensible type [exn]), returned by the unmarshaller should not be\n   pattern-matched over through [match ... with] or [try ... with],\n   because unmarshalling does not preserve the information required for\n   matching their constructors. Structural equalities with other\n   extensible variant values does not work either.  Most other uses such\n   as Printexc.to_string, will still work as expected.\n\n   The representation of marshaled values is not human-readable,\n   and uses bytes that are not printable characters. Therefore,\n   input and output channels used in conjunction with [Marshal.to_channel]\n   and [Marshal.from_channel] must be opened in binary mode, using e.g.\n   [open_out_bin] or [open_in_bin]; channels opened in text mode will\n   cause unmarshaling errors on platforms where text channels behave\n   differently than binary channels, e.g. Windows.\n "]
    
    type extern_flags = No_sharing of 
                        function No_sharing  : extern_flags
                     | Closures of 
                       function Closures  : extern_flags
                     | Compat_32 of 
                       function Compat_32  : extern_flags
    
    
    val to_channel :
    out_channel -> 'a -> extern_flags list -> unit[@@ocaml.doc
                                                    " [Marshal.to_channel chan v flags] writes the representation\n   of [v] on channel [chan]. The [flags] argument is a\n   possibly empty list of flags that governs the marshaling\n   behavior with respect to sharing, functional values, and compatibility\n   between 32- and 64-bit platforms.\n\n   If [flags] does not contain [Marshal.No_sharing], circularities\n   and sharing inside the value [v] are detected and preserved\n   in the sequence of bytes produced. In particular, this\n   guarantees that marshaling always terminates. Sharing\n   between values marshaled by successive calls to\n   [Marshal.to_channel] is neither detected nor preserved, though.\n   If [flags] contains [Marshal.No_sharing], sharing is ignored.\n   This results in faster marshaling if [v] contains no shared\n   substructures, but may cause slower marshaling and larger\n   byte representations if [v] actually contains sharing,\n   or even non-termination if [v] contains cycles.\n\n   If [flags] does not contain [Marshal.Closures], marshaling fails\n   when it encounters a functional value inside [v]: only 'pure' data\n   structures, containing neither functions nor objects, can safely be\n   transmitted between different programs. If [flags] contains\n   [Marshal.Closures], functional values will be marshaled as a the\n   position in the code of the program together with the values\n   corresponding to the free variables captured in the closure.  In\n   this case, the output of marshaling can only be read back in\n   processes that run exactly the same program, with exactly the same\n   compiled code. (This is checked at un-marshaling time, using an MD5\n   digest of the code transmitted along with the code position.)\n\n   The exact definition of which free variables are captured in a\n   closure is not specified and can vary between bytecode and native\n   code (and according to optimization flags).  In particular, a\n   function value accessing a global reference may or may not include\n   the reference in its closure.  If it does, unmarshaling the\n   corresponding closure will create a new reference, different from\n   the global one.\n\n\n   If [flags] contains [Marshal.Compat_32], marshaling fails when\n   it encounters an integer value outside the range [[-2{^30}, 2{^30}-1]]\n   of integers that are representable on a 32-bit platform.  This\n   ensures that marshaled data generated on a 64-bit platform can be\n   safely read back on a 32-bit platform.  If [flags] does not\n   contain [Marshal.Compat_32], integer values outside the\n   range [[-2{^30}, 2{^30}-1]] are marshaled, and can be read back on\n   a 64-bit platform, but will cause an error at un-marshaling time\n   when read back on a 32-bit platform.  The [Mashal.Compat_32] flag\n   only matters when marshaling is performed on a 64-bit platform;\n   it has no effect if marshaling is performed on a 32-bit platform.\n "]
    
    
    external to_bytes : 'a -> extern_flags list -> bytes =
    "caml_output_value_to_bytes"[@@ocaml.doc
                                  " [Marshal.to_bytes v flags] returns a byte sequence containing\n   the representation of [v].\n   The [flags] argument has the same meaning as for\n   {!Marshal.to_channel}.\n   @since 4.02.0 "]
    
    
    external to_string : 'a -> extern_flags list -> string =
    "caml_output_value_to_string"[@@ocaml.doc
                                   " Same as [to_bytes] but return the result as a string instead of\n    a byte sequence. "]
    
    
    val to_buffer :
    bytes -> int -> int -> 'a -> extern_flags list -> int[@@ocaml.doc
                                                           " [Marshal.to_buffer buff ofs len v flags] marshals the value [v],\n   storing its byte representation in the sequence [buff],\n   starting at index [ofs], and writing at most\n   [len] bytes.  It returns the number of bytes\n   actually written to the sequence. If the byte representation\n   of [v] does not fit in [len] characters, the exception [Failure]\n   is raised. "]
    
    
    val from_channel :
    in_channel -> 'a[@@ocaml.doc
                      " [Marshal.from_channel chan] reads from channel [chan] the\n   byte representation of a structured value, as produced by\n   one of the [Marshal.to_*] functions, and reconstructs and\n   returns the corresponding value.\n\n   It raises [End_of_file] if the function has already reached the\n   end of file when starting to read from the channel, and raises\n   [Failure \"input_value: truncated object\"] if it reaches the end\n   of file later during the unmarshalling. "]
    
    
    val from_bytes :
    bytes -> int -> 'a[@@ocaml.doc
                        " [Marshal.from_bytes buff ofs] unmarshals a structured value\n   like {!Marshal.from_channel} does, except that the byte\n   representation is not read from a channel, but taken from\n   the byte sequence [buff], starting at position [ofs].\n   The byte sequence is not mutated.\n   @since 4.02.0 "]
    
    
    val from_string :
    string -> int -> 'a[@@ocaml.doc
                         " Same as [from_bytes] but take a string as argument instead of a\n    byte sequence. "]
    
    
    val header_size :
    int[@@ocaml.doc
         " The bytes representing a marshaled value are composed of\n   a fixed-size header and a variable-sized data part,\n   whose size can be determined from the header.\n   {!Marshal.header_size} is the size, in bytes, of the header.\n   {!Marshal.data_size}[ buff ofs] is the size, in bytes,\n   of the data part, assuming a valid header is stored in\n   [buff] starting at position [ofs].\n   Finally, {!Marshal.total_size} [buff ofs] is the total size,\n   in bytes, of the marshaled value.\n   Both {!Marshal.data_size} and {!Marshal.total_size} raise [Failure]\n   if [buff], [ofs] does not contain a valid header.\n\n   To read the byte representation of a marshaled value into\n   a byte sequence, the program needs to read first\n   {!Marshal.header_size} bytes into the sequence,\n   then determine the length of the remainder of the\n   representation using {!Marshal.data_size},\n   make sure the sequence is large enough to hold the remaining\n   data, then read it, and finally call {!Marshal.from_bytes}\n   to unmarshal the value. "]
    
    
    val data_size :
    bytes -> int -> int[@@ocaml.doc " See {!Marshal.header_size}."]
    
    
    val total_size :
    bytes -> int -> int[@@ocaml.doc " See {!Marshal.header_size}."]
    


*** OK ***

