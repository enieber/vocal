
*******************************
********** Parsed file ********
*******************************
val compile_implementation_flambda :
  ?toplevel:(string -> bool) ->
    string ->
      required_globals:Ident.Set.t ->
        backend:(module Backend_intf.S) ->
          ppf_dump:Format.formatter -> Flambda.program -> unit
val compile_implementation_clambda :
  ?toplevel:(string -> bool) ->
    string -> ppf_dump:Format.formatter -> Lambda.program -> unit
val compile_phrase : ppf_dump:Format.formatter -> Cmm.phrase -> unit
type error =
  | Assembler_error of string 
exception Error of error 
val report_error : Format.formatter -> error -> unit
val compile_unit :
  string -> string -> bool -> string -> (unit -> unit) -> unit

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

val compile_implementation_flambda :
  ?toplevel:(string -> bool) ->
    string ->
      required_globals:Ident.Set.t ->
        backend:(module Backend_intf.S) ->
          ppf_dump:Format.formatter -> Flambda.program -> unit


val compile_implementation_clambda :
  ?toplevel:(string -> bool) ->
    string -> ppf_dump:Format.formatter -> Lambda.program -> unit


val compile_phrase : ppf_dump:Format.formatter -> Cmm.phrase -> unit


type error =
| Assembler_error of string 
  

exception Error of error 

val report_error : Format.formatter -> error -> unit


val compile_unit :
  string -> string -> bool -> string -> (unit -> unit) -> unit


*******************************
********* Typed GOSPEL ********
*******************************
module asmgen.mli

  Namespace: asmgen.mli
    Type symbols
       error
      
    Logic Symbols
      function Assembler_error (_:string) : error
      
    Exception Symbols
      Error
      
    Namespaces
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    val compile_implementation_flambda :
    ?toplevel:(string -> bool) ->
      string ->
        required_globals:Ident.Set.t ->
          backend:(module Backend_intf.S) ->
            ppf_dump:Format.formatter -> Flambda.program -> unit
    
    
    val compile_implementation_clambda :
    ?toplevel:(string -> bool) ->
      string -> ppf_dump:Format.formatter -> Lambda.program -> unit
    
    
    val compile_phrase : ppf_dump:Format.formatter -> Cmm.phrase -> unit
    
    
    type error = Assembler_error of string
                 function Assembler_error (_:string) : error
    
    
    exception Error
    
    val report_error : Format.formatter -> error -> unit
    
    
    val compile_unit :
    string -> string -> bool -> string -> (unit -> unit) -> unit
    


*** OK ***

