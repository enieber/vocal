
*******************************
********** Parsed file ********
*******************************
open Typedtree
open Types
exception Dont_match 
type type_mismatch =
  | Arity 
  | Privacy 
  | Kind 
  | Constraint 
  | Manifest 
  | Variance 
  | Field_type of Ident.t 
  | Field_mutable of Ident.t 
  | Field_arity of Ident.t 
  | Field_names of int * Ident.t * Ident.t 
  | Field_missing of bool * Ident.t 
  | Record_representation of bool 
  | Unboxed_representation of bool 
  | Immediate 
val value_descriptions :
  loc:Location.t ->
    Env.t ->
      string -> value_description -> value_description -> module_coercion
val type_declarations :
  ?equality:bool ->
    loc:Location.t ->
      Env.t ->
        mark:bool ->
          string ->
            type_declaration ->
              Ident.t -> type_declaration -> type_mismatch option
val extension_constructors :
  loc:Location.t ->
    Env.t ->
      mark:bool ->
        Ident.t ->
          extension_constructor ->
            extension_constructor -> type_mismatch option
val report_type_mismatch :
  string -> string -> string -> Format.formatter -> type_mismatch -> unit

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

open Typedtree

open Types

exception Dont_match 

type type_mismatch =
| Arity 
| Privacy 
| Kind 
| Constraint 
| Manifest 
| Variance 
| Field_type of Ident.t 
| Field_mutable of Ident.t 
| Field_arity of Ident.t 
| Field_names of int * Ident.t * Ident.t 
| Field_missing of bool * Ident.t 
| Record_representation of bool 
| Unboxed_representation of bool 
| Immediate 
  

val value_descriptions :
  loc:Location.t ->
    Env.t ->
      string -> value_description -> value_description -> module_coercion


val type_declarations :
  ?equality:bool ->
    loc:Location.t ->
      Env.t ->
        mark:bool ->
          string ->
            type_declaration ->
              Ident.t -> type_declaration -> type_mismatch option


val extension_constructors :
  loc:Location.t ->
    Env.t ->
      mark:bool ->
        Ident.t ->
          extension_constructor ->
            extension_constructor -> type_mismatch option


val report_type_mismatch :
  string -> string -> string -> Format.formatter -> type_mismatch -> unit

File "./asttypes.mli", line 28, characters 19-24:
Error: Symbol int32 not found
