
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.warning "+a-4-9-30-40-41-42"]
[@@@ocaml.text
  " [Parameter.t] carries a unique [Variable.t] used as function parameter.\n    It can also carry annotations about the usage of the variable. "]
type t
type parameter = t
val wrap : Variable.t -> t[@@ocaml.doc
                            " Make a parameter from a variable with default attributes "]
val var : t -> Variable.t
val rename : ?current_compilation_unit:Compilation_unit.t -> t -> t[@@ocaml.doc
                                                                    " Rename the inner variable of the parameter "]
val map_var : (Variable.t -> Variable.t) -> t -> t
module T : Identifiable.Thing with type  t =  t
module Set :
sig
  include Identifiable.Set with module T := T
  val vars : parameter list -> Variable.Set.t
end
include
  Identifiable.S with type  t :=  t and module T := T and module Set := Set
module List :
sig
  val vars : t list -> Variable.t list[@@ocaml.doc
                                        " extract variables from a list of parameters, preserving the order "]
end

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.warning "+a-4-9-30-40-41-42"]

[@@@ocaml.text
  " [Parameter.t] carries a unique [Variable.t] used as function parameter.\n    It can also carry annotations about the usage of the variable. "]

type t
  

type parameter = t
  

val wrap : Variable.t -> t[@@ocaml.doc
                            " Make a parameter from a variable with default attributes "]


val var : t -> Variable.t


val rename : ?current_compilation_unit:Compilation_unit.t -> t -> t[@@ocaml.doc
                                                                    " Rename the inner variable of the parameter "]


val map_var : (Variable.t -> Variable.t) -> t -> t


module T : Identifiable.Thing with type  t =  t

module Set :
sig
  include Identifiable.Set with module T := T
  val vars : parameter list -> Variable.Set.t
  
end

include
  Identifiable.S with type  t :=  t and module T := T and module Set := Set

module List :
sig
  val vars : t list -> Variable.t list[@@ocaml.doc
                                        " extract variables from a list of parameters, preserving the order "]
  
end
File "./identifiable.mli", line 37, characters 13-28:
Error: Symbol Set.OrderedType not found
