
*******************************
********** Parsed file ********
*******************************
open Asttypes
open Lambda
type function_label = string
type ustructured_constant =
  | Uconst_float of float 
  | Uconst_int32 of int32 
  | Uconst_int64 of int64 
  | Uconst_nativeint of nativeint 
  | Uconst_block of int * uconstant list 
  | Uconst_float_array of float list 
  | Uconst_string of string 
  | Uconst_closure of ufunction list * string * uconstant list 
and uconstant =
  | Uconst_ref of string * ustructured_constant option 
  | Uconst_int of int 
  | Uconst_ptr of int 
and ulambda =
  | Uvar of Ident.t 
  | Uconst of uconstant 
  | Udirect_apply of function_label * ulambda list * Debuginfo.t 
  | Ugeneric_apply of ulambda * ulambda list * Debuginfo.t 
  | Uclosure of ufunction list * ulambda list 
  | Uoffset of ulambda * int 
  | Ulet of mutable_flag * value_kind * Ident.t * ulambda * ulambda 
  | Uletrec of (Ident.t * ulambda) list * ulambda 
  | Uprim of primitive * ulambda list * Debuginfo.t 
  | Uswitch of ulambda * ulambda_switch * Debuginfo.t 
  | Ustringswitch of ulambda * (string * ulambda) list * ulambda option 
  | Ustaticfail of int * ulambda list 
  | Ucatch of int * Ident.t list * ulambda * ulambda 
  | Utrywith of ulambda * Ident.t * ulambda 
  | Uifthenelse of ulambda * ulambda * ulambda 
  | Usequence of ulambda * ulambda 
  | Uwhile of ulambda * ulambda 
  | Ufor of Ident.t * ulambda * ulambda * direction_flag * ulambda 
  | Uassign of Ident.t * ulambda 
  | Usend of meth_kind * ulambda * ulambda * ulambda list * Debuginfo.t 
  | Uunreachable 
and ufunction =
  {
  label: function_label ;
  arity: int ;
  params: Ident.t list ;
  body: ulambda ;
  dbg: Debuginfo.t ;
  env: Ident.t option }
and ulambda_switch =
  {
  us_index_consts: int array ;
  us_actions_consts: ulambda array ;
  us_index_blocks: int array ;
  us_actions_blocks: ulambda array }
type function_description =
  {
  fun_label: function_label ;
  fun_arity: int ;
  mutable fun_closed: bool ;
  mutable fun_inline: (Ident.t list * ulambda) option ;
  mutable fun_float_const_prop: bool }
type value_approximation =
  | Value_closure of function_description * value_approximation 
  | Value_tuple of value_approximation array 
  | Value_unknown 
  | Value_const of uconstant 
  | Value_global_field of string * int 
val compare_structured_constants :
  ustructured_constant -> ustructured_constant -> int
val compare_constants : uconstant -> uconstant -> int
type uconstant_block_field =
  | Uconst_field_ref of string 
  | Uconst_field_int of int 
type preallocated_block =
  {
  symbol: string ;
  exported: bool ;
  tag: int ;
  fields: uconstant_block_field option list }
type preallocated_constant =
  {
  symbol: string ;
  exported: bool ;
  definition: ustructured_constant }

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

open Asttypes

open Lambda

type function_label = string
  

type ustructured_constant =
| Uconst_float of float 
| Uconst_int32 of int32 
| Uconst_int64 of int64 
| Uconst_nativeint of nativeint 
| Uconst_block of int * uconstant list 
| Uconst_float_array of float list 
| Uconst_string of string 
| Uconst_closure of ufunction list * string * uconstant list 
  
and uconstant =
| Uconst_ref of string * ustructured_constant option 
| Uconst_int of int 
| Uconst_ptr of int 
  
and ulambda =
| Uvar of Ident.t 
| Uconst of uconstant 
| Udirect_apply of function_label * ulambda list * Debuginfo.t 
| Ugeneric_apply of ulambda * ulambda list * Debuginfo.t 
| Uclosure of ufunction list * ulambda list 
| Uoffset of ulambda * int 
| Ulet of mutable_flag * value_kind * Ident.t * ulambda * ulambda 
| Uletrec of (Ident.t * ulambda) list * ulambda 
| Uprim of primitive * ulambda list * Debuginfo.t 
| Uswitch of ulambda * ulambda_switch * Debuginfo.t 
| Ustringswitch of ulambda * (string * ulambda) list * ulambda option 
| Ustaticfail of int * ulambda list 
| Ucatch of int * Ident.t list * ulambda * ulambda 
| Utrywith of ulambda * Ident.t * ulambda 
| Uifthenelse of ulambda * ulambda * ulambda 
| Usequence of ulambda * ulambda 
| Uwhile of ulambda * ulambda 
| Ufor of Ident.t * ulambda * ulambda * direction_flag * ulambda 
| Uassign of Ident.t * ulambda 
| Usend of meth_kind * ulambda * ulambda * ulambda list * Debuginfo.t 
| Uunreachable 
  
and ufunction =
{
label: function_label ;
arity: int ;
params: Ident.t list ;
body: ulambda ;
dbg: Debuginfo.t ;
env: Ident.t option }
  
and ulambda_switch =
{
us_index_consts: int array ;
us_actions_consts: ulambda array ;
us_index_blocks: int array ;
us_actions_blocks: ulambda array }
  

type function_description =
{
fun_label: function_label ;
fun_arity: int ;
mutable fun_closed: bool ;
mutable fun_inline: (Ident.t list * ulambda) option ;
mutable fun_float_const_prop: bool }
  

type value_approximation =
| Value_closure of function_description * value_approximation 
| Value_tuple of value_approximation array 
| Value_unknown 
| Value_const of uconstant 
| Value_global_field of string * int 
  

val compare_structured_constants :
  ustructured_constant -> ustructured_constant -> int


val compare_constants : uconstant -> uconstant -> int


type uconstant_block_field =
| Uconst_field_ref of string 
| Uconst_field_int of int 
  

type preallocated_block =
{
symbol: string ;
exported: bool ;
tag: int ;
fields: uconstant_block_field option list }
  

type preallocated_constant =
{
symbol: string ;
exported: bool ;
definition: ustructured_constant }
  
File "./asttypes.mli", line 28, characters 19-24:
Error: Symbol int32 not found
