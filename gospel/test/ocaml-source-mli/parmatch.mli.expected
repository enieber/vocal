
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.text " Detection of partial matches and unused match cases. "]
open Asttypes
open Typedtree
open Types
val omega : pattern[@@ocaml.doc " aka. \"Tpat_any\" or \"_\"  "]
val omegas : int -> pattern list[@@ocaml.doc
                                  " [List.init (fun _ -> omega)] "]
val omega_list : 'a list -> pattern list[@@ocaml.doc
                                          " [List.map (fun _ -> omega)] "]
val normalize_pat : pattern -> pattern[@@ocaml.doc
                                        " Keep only the \"head\" of a pattern: all arguments are replaced by [omega], so\n    are variables. "]
val const_compare : constant -> constant -> int[@@ocaml.doc
                                                 " [const_compare c1 c2] compares the actual values represented by [c1] and\n    [c2], while simply using [Stdlib.compare] would compare the\n    representations.\n\n    cf. MPR#5758 "]
val le_pat : pattern -> pattern -> bool[@@ocaml.doc
                                         " [le_pat p q]  means: forall V,  V matches q implies V matches p "]
val le_pats : pattern list -> pattern list -> bool[@@ocaml.doc
                                                    " [le_pats (p1 .. pm) (q1 .. qn)] means: forall i <= m, [le_pat pi qi] "]
module Compat :
functor (Constr :
  sig
    val equal :
      Types.constructor_description -> Types.constructor_description -> bool
  end) ->
  sig
    val compat : pattern -> pattern -> bool
    val compats : pattern list -> pattern list -> bool
  end[@@ocaml.doc
       " Exported compatibility functor, abstracted over constructor equality "]
exception Empty 
val lub : pattern -> pattern -> pattern[@@ocaml.doc
                                         " [lub p q] is a pattern that matches all values matched by [p] and [q].\n    May raise [Empty], when [p] and [q] are not compatible. "]
val lubs : pattern list -> pattern list -> pattern list[@@ocaml.doc
                                                         " [lubs [p1; ...; pn] [q1; ...; qk]], where [n < k], is\n    [[lub p1 q1; ...; lub pk qk]].  "]
val get_mins : ('a -> 'a -> bool) -> 'a list -> 'a list
val set_args : pattern -> pattern list -> pattern list[@@ocaml.doc
                                                        " Those two functions recombine one pattern and its arguments:\n    For instance:\n      (_,_)::p1::p2::rem -> (p1, p2)::rem\n    The second one will replace mutable arguments by '_'\n"]
val set_args_erase_mutable : pattern -> pattern list -> pattern list
val pat_of_constr : pattern -> constructor_description -> pattern
val complete_constrs :
  pattern -> constructor_tag list -> constructor_description list
val ppat_of_type :
  Env.t ->
    type_expr ->
      (Parsetree.pattern * (string, constructor_description) Hashtbl.t *
        (string, label_description) Hashtbl.t)[@@ocaml.doc
                                                " [ppat_of_type] builds an untyped or-pattern from its expected type.\n     May raise [Empty] when [type_expr] is an empty variant "]
val pressure_variants : Env.t -> pattern list -> unit
val check_partial :
  ((string, constructor_description) Hashtbl.t ->
     (string, label_description) Hashtbl.t ->
       Parsetree.pattern -> pattern option)
    -> Location.t -> case list -> partial
val check_unused :
  (bool ->
     (string, constructor_description) Hashtbl.t ->
       (string, label_description) Hashtbl.t ->
         Parsetree.pattern -> pattern option)
    -> case list -> unit
val irrefutable : pattern -> bool
val inactive : partial:partial -> pattern -> bool[@@ocaml.doc
                                                   " An inactive pattern is a pattern, matching against which can be duplicated,\n    erased or delayed without change in observable behavior of the program.\n    Patterns containing (lazy _) subpatterns or reads of mutable fields are\n    active. "]
val check_ambiguous_bindings : case list -> unit
val some_private_tag : label

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.text " Detection of partial matches and unused match cases. "]

open Asttypes

open Typedtree

open Types

val omega : pattern[@@ocaml.doc " aka. \"Tpat_any\" or \"_\"  "]


val omegas : int -> pattern list[@@ocaml.doc
                                  " [List.init (fun _ -> omega)] "]


val omega_list : 'a list -> pattern list[@@ocaml.doc
                                          " [List.map (fun _ -> omega)] "]


val normalize_pat : pattern -> pattern[@@ocaml.doc
                                        " Keep only the \"head\" of a pattern: all arguments are replaced by [omega], so\n    are variables. "]


val const_compare : constant -> constant -> int[@@ocaml.doc
                                                 " [const_compare c1 c2] compares the actual values represented by [c1] and\n    [c2], while simply using [Stdlib.compare] would compare the\n    representations.\n\n    cf. MPR#5758 "]


val le_pat : pattern -> pattern -> bool[@@ocaml.doc
                                         " [le_pat p q]  means: forall V,  V matches q implies V matches p "]


val le_pats : pattern list -> pattern list -> bool[@@ocaml.doc
                                                    " [le_pats (p1 .. pm) (q1 .. qn)] means: forall i <= m, [le_pat pi qi] "]


module Compat :
functor (Constr :
  sig
    val equal :
      Types.constructor_description -> Types.constructor_description -> bool
    
  end) ->
  sig
    val compat : pattern -> pattern -> bool
    
    val compats : pattern list -> pattern list -> bool
    
  end[@@ocaml.doc
       " Exported compatibility functor, abstracted over constructor equality "]

exception Empty 

val lub : pattern -> pattern -> pattern[@@ocaml.doc
                                         " [lub p q] is a pattern that matches all values matched by [p] and [q].\n    May raise [Empty], when [p] and [q] are not compatible. "]


val lubs : pattern list -> pattern list -> pattern list[@@ocaml.doc
                                                         " [lubs [p1; ...; pn] [q1; ...; qk]], where [n < k], is\n    [[lub p1 q1; ...; lub pk qk]].  "]


val get_mins : ('a -> 'a -> bool) -> 'a list -> 'a list


val set_args : pattern -> pattern list -> pattern list[@@ocaml.doc
                                                        " Those two functions recombine one pattern and its arguments:\n    For instance:\n      (_,_)::p1::p2::rem -> (p1, p2)::rem\n    The second one will replace mutable arguments by '_'\n"]


val set_args_erase_mutable : pattern -> pattern list -> pattern list


val pat_of_constr : pattern -> constructor_description -> pattern


val complete_constrs :
  pattern -> constructor_tag list -> constructor_description list


val ppat_of_type :
  Env.t ->
    type_expr ->
      (Parsetree.pattern * (string, constructor_description) Hashtbl.t *
        (string, label_description) Hashtbl.t)[@@ocaml.doc
                                                " [ppat_of_type] builds an untyped or-pattern from its expected type.\n     May raise [Empty] when [type_expr] is an empty variant "]


val pressure_variants : Env.t -> pattern list -> unit


val check_partial :
  ((string, constructor_description) Hashtbl.t ->
     (string, label_description) Hashtbl.t ->
       Parsetree.pattern -> pattern option)
    -> Location.t -> case list -> partial


val check_unused :
  (bool ->
     (string, constructor_description) Hashtbl.t ->
       (string, label_description) Hashtbl.t ->
         Parsetree.pattern -> pattern option)
    -> case list -> unit


val irrefutable : pattern -> bool


val inactive : partial:partial -> pattern -> bool[@@ocaml.doc
                                                   " An inactive pattern is a pattern, matching against which can be duplicated,\n    erased or delayed without change in observable behavior of the program.\n    Patterns containing (lazy _) subpatterns or reads of mutable fields are\n    active. "]


val check_ambiguous_bindings : case list -> unit


val some_private_tag : label

File "./asttypes.mli", line 28, characters 19-24:
Error: Symbol int32 not found
