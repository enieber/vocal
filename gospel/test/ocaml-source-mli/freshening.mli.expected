
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.warning "+a-4-9-30-40-41-42"]
[@@@ocaml.text " Freshening of various identifiers. "]
type t[@@ocaml.doc
        " A table used for freshening variables and static exception identifiers. "]
type subst = t
val empty : t[@@ocaml.doc
               " The freshening that does nothing.  This is the unique inactive\n    freshening. "]
val is_empty : t -> bool
val activate : t -> t[@@ocaml.doc
                       " Activate the freshening.  Without activation, operations to request\n    freshenings have no effect (cf. the documentation below for\n    [add_variable]).  As such, the inactive renaming is unique. "]
val empty_preserving_activation_state : t -> t[@@ocaml.doc
                                                " Given the inactive freshening, return the same; otherwise, return an\n    empty active freshening. "]
val add_variable : t -> Variable.t -> (Variable.t * t)[@@ocaml.doc
                                                        " [add_variable t var]\n    If [t] is active:\n      It returns a fresh variable [new_var] and adds [var] -> [new_var]\n      to the freshening.\n      If a renaming [other_var] -> [var] or [symbol] -> [var] was already\n      present in [t], it will also add [other_var] -> [new_var] and\n      [symbol] -> [new_var].\n    If [t] is inactive, this is the identity.\n"]
val add_variables' : t -> Variable.t list -> (Variable.t list * t)[@@ocaml.doc
                                                                    " Like [add_variable], but for multiple variables, each freshened\n    separately. "]
val add_variables :
  t -> (Variable.t * 'a) list -> ((Variable.t * 'a) list * t)[@@ocaml.doc
                                                               " Like [add_variables'], but passes through the second component of the\n    input list unchanged. "]
val add_mutable_variable :
  t -> Mutable_variable.t -> (Mutable_variable.t * t)[@@ocaml.doc
                                                       " Like [add_variable], but for mutable variables. "]
val add_static_exception :
  t -> Static_exception.t -> (Static_exception.t * t)[@@ocaml.doc
                                                       " As for [add_variable], but for static exception identifiers. "]
val apply_variable : t -> Variable.t -> Variable.t[@@ocaml.doc
                                                    " [apply_variable t var] applies the freshening [t] to [var].\n    If no renaming is specified in [t] for [var] it is returned unchanged. "]
val apply_mutable_variable : t -> Mutable_variable.t -> Mutable_variable.t
[@@ocaml.doc " As for [apply_variable], but for mutable variables. "]
val apply_static_exception : t -> Static_exception.t -> Static_exception.t
[@@ocaml.doc
  " As for [apply_variable], but for static exception identifiers. "]
val rewrite_recursive_calls_with_symbols :
  t ->
    Flambda.function_declarations ->
      make_closure_symbol:(Closure_id.t -> Symbol.t) ->
        Flambda.function_declarations[@@ocaml.doc
                                       " Replace recursive accesses to the closures in the set through\n    [Symbol] by the corresponding [Var]. This is used to recover\n    the recursive call when importing code from another compilation unit.\n\n    If the renaming is inactive, this is the identity.\n"]
module Project_var :
sig
  type t[@@ocaml.doc
          " A table used for freshening of identifiers in [Project_closure] and\n      [Move_within_set_of_closures] (\"ids of closures\"); and [Project_var]\n      (\"bound vars of closures\") expressions.\n\n      This information is propagated bottom up and populated when inlining a\n      function containing a closure declaration.\n\n      For instance,\n        [let f x =\n           let g y = ... x ... in\n           ... g.x ...           (Project_var x)\n           ... g 1 ...           (Apply (Project_closure g ...))\n           ]\n\n      If f is inlined, g is renamed. The approximation of g will carry this\n      table such that later the access to the field x of g and selection of\n      g in the closure can be substituted.\n   "]
  val empty : t
  val compose : earlier:t -> later:t -> t[@@ocaml.doc
                                           " Composition of two freshenings. "]
  val apply_closure_id : t -> Closure_id.t -> Closure_id.t[@@ocaml.doc
                                                            " Freshen a closure ID based on the given renaming.  The same ID is\n      returned if the renaming does not affect it.\n      If dealing with approximations, you probably want to use\n      [Simple_value_approx.freshen_and_check_closure_id] instead of this\n      function.\n  "]
  val apply_var_within_closure :
    t -> Var_within_closure.t -> Var_within_closure.t[@@ocaml.doc
                                                       " Like [apply_closure_id], but for variables within closures. "]
  val print : Format.formatter -> t -> unit
end
val apply_function_decls_and_free_vars :
  t ->
    (Flambda.specialised_to * 'a) Variable.Map.t ->
      Flambda.function_declarations ->
        only_freshen_parameters:bool ->
          ((Flambda.specialised_to * 'a) Variable.Map.t *
            Flambda.function_declarations * t * Project_var.t)
val does_not_freshen : t -> Variable.t list -> bool
val print : Format.formatter -> t -> unit
val freshen_projection_relation :
  Flambda.specialised_to Variable.Map.t ->
    freshening:t ->
      closure_freshening:Project_var.t ->
        Flambda.specialised_to Variable.Map.t[@@ocaml.doc
                                               " N.B. This does not freshen the domain of the supplied map, only the\n    range. "]
val freshen_projection_relation' :
  (Flambda.specialised_to * 'a) Variable.Map.t ->
    freshening:t ->
      closure_freshening:Project_var.t ->
        (Flambda.specialised_to * 'a) Variable.Map.t

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.warning "+a-4-9-30-40-41-42"]

[@@@ocaml.text " Freshening of various identifiers. "]

type t[@@ocaml.doc
        " A table used for freshening variables and static exception identifiers. "]
  

type subst = t
  

val empty : t[@@ocaml.doc
               " The freshening that does nothing.  This is the unique inactive\n    freshening. "]


val is_empty : t -> bool


val activate : t -> t[@@ocaml.doc
                       " Activate the freshening.  Without activation, operations to request\n    freshenings have no effect (cf. the documentation below for\n    [add_variable]).  As such, the inactive renaming is unique. "]


val empty_preserving_activation_state : t -> t[@@ocaml.doc
                                                " Given the inactive freshening, return the same; otherwise, return an\n    empty active freshening. "]


val add_variable : t -> Variable.t -> (Variable.t * t)[@@ocaml.doc
                                                        " [add_variable t var]\n    If [t] is active:\n      It returns a fresh variable [new_var] and adds [var] -> [new_var]\n      to the freshening.\n      If a renaming [other_var] -> [var] or [symbol] -> [var] was already\n      present in [t], it will also add [other_var] -> [new_var] and\n      [symbol] -> [new_var].\n    If [t] is inactive, this is the identity.\n"]


val add_variables' : t -> Variable.t list -> (Variable.t list * t)[@@ocaml.doc
                                                                    " Like [add_variable], but for multiple variables, each freshened\n    separately. "]


val add_variables :
  t -> (Variable.t * 'a) list -> ((Variable.t * 'a) list * t)[@@ocaml.doc
                                                               " Like [add_variables'], but passes through the second component of the\n    input list unchanged. "]


val add_mutable_variable :
  t -> Mutable_variable.t -> (Mutable_variable.t * t)[@@ocaml.doc
                                                       " Like [add_variable], but for mutable variables. "]


val add_static_exception :
  t -> Static_exception.t -> (Static_exception.t * t)[@@ocaml.doc
                                                       " As for [add_variable], but for static exception identifiers. "]


val apply_variable : t -> Variable.t -> Variable.t[@@ocaml.doc
                                                    " [apply_variable t var] applies the freshening [t] to [var].\n    If no renaming is specified in [t] for [var] it is returned unchanged. "]


val apply_mutable_variable : t -> Mutable_variable.t -> Mutable_variable.t
[@@ocaml.doc " As for [apply_variable], but for mutable variables. "]


val apply_static_exception : t -> Static_exception.t -> Static_exception.t
[@@ocaml.doc
  " As for [apply_variable], but for static exception identifiers. "]


val rewrite_recursive_calls_with_symbols :
  t ->
    Flambda.function_declarations ->
      make_closure_symbol:(Closure_id.t -> Symbol.t) ->
        Flambda.function_declarations[@@ocaml.doc
                                       " Replace recursive accesses to the closures in the set through\n    [Symbol] by the corresponding [Var]. This is used to recover\n    the recursive call when importing code from another compilation unit.\n\n    If the renaming is inactive, this is the identity.\n"]


module Project_var :
sig
  type t[@@ocaml.doc
          " A table used for freshening of identifiers in [Project_closure] and\n      [Move_within_set_of_closures] (\"ids of closures\"); and [Project_var]\n      (\"bound vars of closures\") expressions.\n\n      This information is propagated bottom up and populated when inlining a\n      function containing a closure declaration.\n\n      For instance,\n        [let f x =\n           let g y = ... x ... in\n           ... g.x ...           (Project_var x)\n           ... g 1 ...           (Apply (Project_closure g ...))\n           ]\n\n      If f is inlined, g is renamed. The approximation of g will carry this\n      table such that later the access to the field x of g and selection of\n      g in the closure can be substituted.\n   "]
    
  val empty : t
  
  val compose : earlier:t -> later:t -> t[@@ocaml.doc
                                           " Composition of two freshenings. "]
  
  val apply_closure_id : t -> Closure_id.t -> Closure_id.t[@@ocaml.doc
                                                            " Freshen a closure ID based on the given renaming.  The same ID is\n      returned if the renaming does not affect it.\n      If dealing with approximations, you probably want to use\n      [Simple_value_approx.freshen_and_check_closure_id] instead of this\n      function.\n  "]
  
  val apply_var_within_closure :
    t -> Var_within_closure.t -> Var_within_closure.t[@@ocaml.doc
                                                       " Like [apply_closure_id], but for variables within closures. "]
  
  val print : Format.formatter -> t -> unit
  
end

val apply_function_decls_and_free_vars :
  t ->
    (Flambda.specialised_to * 'a) Variable.Map.t ->
      Flambda.function_declarations ->
        only_freshen_parameters:bool ->
          ((Flambda.specialised_to * 'a) Variable.Map.t *
            Flambda.function_declarations * t * Project_var.t)


val does_not_freshen : t -> Variable.t list -> bool


val print : Format.formatter -> t -> unit


val freshen_projection_relation :
  Flambda.specialised_to Variable.Map.t ->
    freshening:t ->
      closure_freshening:Project_var.t ->
        Flambda.specialised_to Variable.Map.t[@@ocaml.doc
                                               " N.B. This does not freshen the domain of the supplied map, only the\n    range. "]


val freshen_projection_relation' :
  (Flambda.specialised_to * 'a) Variable.Map.t ->
    freshening:t ->
      closure_freshening:Project_var.t ->
        (Flambda.specialised_to * 'a) Variable.Map.t

File "freshening.mli", line 114, characters 7-8:
Error: Multiple definitions of type t
