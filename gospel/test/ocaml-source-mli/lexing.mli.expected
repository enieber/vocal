
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.text " The run-time library for lexers generated by [ocamllex]. "]
[@@@ocaml.text " {1 Positions} "]
type position =
  {
  pos_fname: string ;
  pos_lnum: int ;
  pos_bol: int ;
  pos_cnum: int }[@@ocaml.doc
                   " A value of type [position] describes a point in a source file.\n   [pos_fname] is the file name; [pos_lnum] is the line number;\n   [pos_bol] is the offset of the beginning of the line (number\n   of characters between the beginning of the lexbuf and the beginning\n   of the line); [pos_cnum] is the offset of the position (number of\n   characters between the beginning of the lexbuf and the position).\n   The difference between [pos_cnum] and [pos_bol] is the character\n   offset within the line (i.e. the column number, assuming each\n   character is one column wide).\n\n   See the documentation of type [lexbuf] for information about\n   how the lexing engine will manage positions.\n "]
val dummy_pos : position[@@ocaml.doc
                          " A value of type [position], guaranteed to be different from any\n   valid position.\n "]
[@@@ocaml.text " {1 Lexer buffers} "]
type lexbuf =
  {
  refill_buff: lexbuf -> unit ;
  mutable lex_buffer: bytes ;
  mutable lex_buffer_len: int ;
  mutable lex_abs_pos: int ;
  mutable lex_start_pos: int ;
  mutable lex_curr_pos: int ;
  mutable lex_last_pos: int ;
  mutable lex_last_action: int ;
  mutable lex_eof_reached: bool ;
  mutable lex_mem: int array ;
  mutable lex_start_p: position ;
  mutable lex_curr_p: position }[@@ocaml.doc
                                  " The type of lexer buffers. A lexer buffer is the argument passed\n   to the scanning functions defined by the generated scanners.\n   The lexer buffer holds the current state of the scanner, plus\n   a function to refill the buffer from the input.\n\n   Lexers can optionally maintain the [lex_curr_p] and [lex_start_p]\n   position fields.  This \"position tracking\" mode is the default, and\n   it corresponds to passing [~with_position:true] to functions that\n   create lexer buffers. In this mode, the lexing engine and lexer\n   actions are co-responsible for properly updating the position\n   fields, as described in the next paragraph.  When the mode is\n   explicitly disabled (with [~with_position:false]), the lexing\n   engine will not touch the position fields and the lexer actions\n   should be careful not to do it either; the [lex_curr_p] and\n   [lex_start_p] field will then always hold the [dummy_pos] invalid\n   position.  Not tracking positions avoids allocations and memory\n   writes and can significantly improve the performance of the lexer\n   in contexts where [lex_start_p] and [lex_curr_p] are not needed.\n\n   Position tracking mode works as follows.  At each token, the lexing\n   engine will copy [lex_curr_p] to [lex_start_p], then change the\n   [pos_cnum] field of [lex_curr_p] by updating it with the number of\n   characters read since the start of the [lexbuf].  The other fields\n   are left unchanged by the lexing engine.  In order to keep them\n   accurate, they must be initialised before the first use of the\n   lexbuf, and updated by the relevant lexer actions (i.e. at each end\n   of line -- see also [new_line]).\n"]
val from_channel : ?with_positions:bool -> in_channel -> lexbuf[@@ocaml.doc
                                                                 " Create a lexer buffer on the given input channel.\n   [Lexing.from_channel inchan] returns a lexer buffer which reads\n   from the input channel [inchan], at the current reading position. "]
val from_string : ?with_positions:bool -> string -> lexbuf[@@ocaml.doc
                                                            " Create a lexer buffer which reads from\n   the given string. Reading starts from the first character in\n   the string. An end-of-input condition is generated when the\n   end of the string is reached. "]
val from_function : ?with_positions:bool -> (bytes -> int -> int) -> lexbuf
[@@ocaml.doc
  " Create a lexer buffer with the given function as its reading method.\n   When the scanner needs more characters, it will call the given\n   function, giving it a byte sequence [s] and a byte\n   count [n]. The function should put [n] bytes or fewer in [s],\n   starting at index 0, and return the number of bytes\n   provided. A return value of 0 means end of input. "]
val with_positions : lexbuf -> bool[@@ocaml.doc
                                     " Tell whether the lexer buffer keeps track of position fields\n    [lex_curr_p] / [lex_start_p], as determined by the corresponding\n    optional argument for functions that create lexer buffers\n    (whose default value is [true]).\n\n    When [with_positions] is [false], lexer actions should not\n    modify position fields.  Doing it nevertheless could\n    re-enable the [with_position] mode and degrade performances.\n"]
[@@@ocaml.text " {1 Functions for lexer semantic actions} "]
[@@@ocaml.text
  " The following functions can be called from the semantic actions\n   of lexer definitions (the ML code enclosed in braces that\n   computes the value returned by lexing functions). They give\n   access to the character string matched by the regular expression\n   associated with the semantic action. These functions must be\n   applied to the argument [lexbuf], which, in the code generated by\n   [ocamllex], is bound to the lexer buffer passed to the parsing\n   function. "]
val lexeme : lexbuf -> string[@@ocaml.doc
                               " [Lexing.lexeme lexbuf] returns the string matched by\n           the regular expression. "]
val lexeme_char : lexbuf -> int -> char[@@ocaml.doc
                                         " [Lexing.lexeme_char lexbuf i] returns character number [i] in\n   the matched string. "]
val lexeme_start : lexbuf -> int[@@ocaml.doc
                                  " [Lexing.lexeme_start lexbuf] returns the offset in the\n   input stream of the first character of the matched string.\n   The first character of the stream has offset 0. "]
val lexeme_end : lexbuf -> int[@@ocaml.doc
                                " [Lexing.lexeme_end lexbuf] returns the offset in the input stream\n   of the character following the last character of the matched\n   string. The first character of the stream has offset 0. "]
val lexeme_start_p : lexbuf -> position[@@ocaml.doc
                                         " Like [lexeme_start], but return a complete [position] instead\n    of an offset.  When position tracking is disabled, the function\n    returns [dummy_pos]. "]
val lexeme_end_p : lexbuf -> position[@@ocaml.doc
                                       " Like [lexeme_end], but return a complete [position] instead\n    of an offset.  When position tracking is disabled, the function\n    returns [dummy_pos]. "]
val new_line : lexbuf -> unit[@@ocaml.doc
                               " Update the [lex_curr_p] field of the lexbuf to reflect the start\n    of a new line.  You can call this function in the semantic action\n    of the rule that matches the end-of-line character.  The function\n    does nothing when position tracking is disabled.\n    @since 3.11.0\n"]
[@@@ocaml.text " {1 Miscellaneous functions} "]
val flush_input : lexbuf -> unit[@@ocaml.doc
                                  " Discard the contents of the buffer and reset the current\n    position to 0.  The next use of the lexbuf will trigger a\n    refill. "]
[@@@ocaml.text "/*"]
[@@@ocaml.text " {1  } "]
[@@@ocaml.text
  " The following definitions are used by the generated scanners only.\n   They are not intended to be used directly by user programs. "]
val sub_lexeme : lexbuf -> int -> int -> string
val sub_lexeme_opt : lexbuf -> int -> int -> string option
val sub_lexeme_char : lexbuf -> int -> char
val sub_lexeme_char_opt : lexbuf -> int -> char option
type lex_tables =
  {
  lex_base: string ;
  lex_backtrk: string ;
  lex_default: string ;
  lex_trans: string ;
  lex_check: string ;
  lex_base_code: string ;
  lex_backtrk_code: string ;
  lex_default_code: string ;
  lex_trans_code: string ;
  lex_check_code: string ;
  lex_code: string }
val engine : lex_tables -> int -> lexbuf -> int
val new_engine : lex_tables -> int -> lexbuf -> int

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.text " The run-time library for lexers generated by [ocamllex]. "]

[@@@ocaml.text " {1 Positions} "]

type position =
{
pos_fname: string ;
pos_lnum: int ;
pos_bol: int ;
pos_cnum: int }[@@ocaml.doc
                 " A value of type [position] describes a point in a source file.\n   [pos_fname] is the file name; [pos_lnum] is the line number;\n   [pos_bol] is the offset of the beginning of the line (number\n   of characters between the beginning of the lexbuf and the beginning\n   of the line); [pos_cnum] is the offset of the position (number of\n   characters between the beginning of the lexbuf and the position).\n   The difference between [pos_cnum] and [pos_bol] is the character\n   offset within the line (i.e. the column number, assuming each\n   character is one column wide).\n\n   See the documentation of type [lexbuf] for information about\n   how the lexing engine will manage positions.\n "]
  

val dummy_pos : position[@@ocaml.doc
                          " A value of type [position], guaranteed to be different from any\n   valid position.\n "]


[@@@ocaml.text " {1 Lexer buffers} "]

type lexbuf =
{
refill_buff: lexbuf -> unit ;
mutable lex_buffer: bytes ;
mutable lex_buffer_len: int ;
mutable lex_abs_pos: int ;
mutable lex_start_pos: int ;
mutable lex_curr_pos: int ;
mutable lex_last_pos: int ;
mutable lex_last_action: int ;
mutable lex_eof_reached: bool ;
mutable lex_mem: int array ;
mutable lex_start_p: position ;
mutable lex_curr_p: position }[@@ocaml.doc
                                " The type of lexer buffers. A lexer buffer is the argument passed\n   to the scanning functions defined by the generated scanners.\n   The lexer buffer holds the current state of the scanner, plus\n   a function to refill the buffer from the input.\n\n   Lexers can optionally maintain the [lex_curr_p] and [lex_start_p]\n   position fields.  This \"position tracking\" mode is the default, and\n   it corresponds to passing [~with_position:true] to functions that\n   create lexer buffers. In this mode, the lexing engine and lexer\n   actions are co-responsible for properly updating the position\n   fields, as described in the next paragraph.  When the mode is\n   explicitly disabled (with [~with_position:false]), the lexing\n   engine will not touch the position fields and the lexer actions\n   should be careful not to do it either; the [lex_curr_p] and\n   [lex_start_p] field will then always hold the [dummy_pos] invalid\n   position.  Not tracking positions avoids allocations and memory\n   writes and can significantly improve the performance of the lexer\n   in contexts where [lex_start_p] and [lex_curr_p] are not needed.\n\n   Position tracking mode works as follows.  At each token, the lexing\n   engine will copy [lex_curr_p] to [lex_start_p], then change the\n   [pos_cnum] field of [lex_curr_p] by updating it with the number of\n   characters read since the start of the [lexbuf].  The other fields\n   are left unchanged by the lexing engine.  In order to keep them\n   accurate, they must be initialised before the first use of the\n   lexbuf, and updated by the relevant lexer actions (i.e. at each end\n   of line -- see also [new_line]).\n"]
  

val from_channel : ?with_positions:bool -> in_channel -> lexbuf[@@ocaml.doc
                                                                 " Create a lexer buffer on the given input channel.\n   [Lexing.from_channel inchan] returns a lexer buffer which reads\n   from the input channel [inchan], at the current reading position. "]


val from_string : ?with_positions:bool -> string -> lexbuf[@@ocaml.doc
                                                            " Create a lexer buffer which reads from\n   the given string. Reading starts from the first character in\n   the string. An end-of-input condition is generated when the\n   end of the string is reached. "]


val from_function : ?with_positions:bool -> (bytes -> int -> int) -> lexbuf
[@@ocaml.doc
  " Create a lexer buffer with the given function as its reading method.\n   When the scanner needs more characters, it will call the given\n   function, giving it a byte sequence [s] and a byte\n   count [n]. The function should put [n] bytes or fewer in [s],\n   starting at index 0, and return the number of bytes\n   provided. A return value of 0 means end of input. "]


val with_positions : lexbuf -> bool[@@ocaml.doc
                                     " Tell whether the lexer buffer keeps track of position fields\n    [lex_curr_p] / [lex_start_p], as determined by the corresponding\n    optional argument for functions that create lexer buffers\n    (whose default value is [true]).\n\n    When [with_positions] is [false], lexer actions should not\n    modify position fields.  Doing it nevertheless could\n    re-enable the [with_position] mode and degrade performances.\n"]


[@@@ocaml.text " {1 Functions for lexer semantic actions} "]

[@@@ocaml.text
  " The following functions can be called from the semantic actions\n   of lexer definitions (the ML code enclosed in braces that\n   computes the value returned by lexing functions). They give\n   access to the character string matched by the regular expression\n   associated with the semantic action. These functions must be\n   applied to the argument [lexbuf], which, in the code generated by\n   [ocamllex], is bound to the lexer buffer passed to the parsing\n   function. "]

val lexeme : lexbuf -> string[@@ocaml.doc
                               " [Lexing.lexeme lexbuf] returns the string matched by\n           the regular expression. "]


val lexeme_char : lexbuf -> int -> char[@@ocaml.doc
                                         " [Lexing.lexeme_char lexbuf i] returns character number [i] in\n   the matched string. "]


val lexeme_start : lexbuf -> int[@@ocaml.doc
                                  " [Lexing.lexeme_start lexbuf] returns the offset in the\n   input stream of the first character of the matched string.\n   The first character of the stream has offset 0. "]


val lexeme_end : lexbuf -> int[@@ocaml.doc
                                " [Lexing.lexeme_end lexbuf] returns the offset in the input stream\n   of the character following the last character of the matched\n   string. The first character of the stream has offset 0. "]


val lexeme_start_p : lexbuf -> position[@@ocaml.doc
                                         " Like [lexeme_start], but return a complete [position] instead\n    of an offset.  When position tracking is disabled, the function\n    returns [dummy_pos]. "]


val lexeme_end_p : lexbuf -> position[@@ocaml.doc
                                       " Like [lexeme_end], but return a complete [position] instead\n    of an offset.  When position tracking is disabled, the function\n    returns [dummy_pos]. "]


val new_line : lexbuf -> unit[@@ocaml.doc
                               " Update the [lex_curr_p] field of the lexbuf to reflect the start\n    of a new line.  You can call this function in the semantic action\n    of the rule that matches the end-of-line character.  The function\n    does nothing when position tracking is disabled.\n    @since 3.11.0\n"]


[@@@ocaml.text " {1 Miscellaneous functions} "]

val flush_input : lexbuf -> unit[@@ocaml.doc
                                  " Discard the contents of the buffer and reset the current\n    position to 0.  The next use of the lexbuf will trigger a\n    refill. "]


[@@@ocaml.text "/*"]

[@@@ocaml.text " {1  } "]

[@@@ocaml.text
  " The following definitions are used by the generated scanners only.\n   They are not intended to be used directly by user programs. "]

val sub_lexeme : lexbuf -> int -> int -> string


val sub_lexeme_opt : lexbuf -> int -> int -> string option


val sub_lexeme_char : lexbuf -> int -> char


val sub_lexeme_char_opt : lexbuf -> int -> char option


type lex_tables =
{
lex_base: string ;
lex_backtrk: string ;
lex_default: string ;
lex_trans: string ;
lex_check: string ;
lex_base_code: string ;
lex_backtrk_code: string ;
lex_default_code: string ;
lex_trans_code: string ;
lex_check_code: string ;
lex_code: string }
  

val engine : lex_tables -> int -> lexbuf -> int


val new_engine : lex_tables -> int -> lexbuf -> int

gospel: internal error, uncaught exception:
        File "gospel/src/typing.ml", line 425, characters 7-13: Assertion failed
        
