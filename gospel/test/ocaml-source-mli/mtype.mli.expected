
*******************************
********** Parsed file ********
*******************************
open Types
val scrape : Env.t -> module_type -> module_type
val scrape_for_type_of :
  remove_aliases:bool -> Env.t -> module_type -> module_type
val freshen : module_type -> module_type
val strengthen :
  aliasable:bool -> Env.t -> module_type -> Path.t -> module_type
val strengthen_decl :
  aliasable:bool ->
    Env.t -> module_declaration -> Path.t -> module_declaration
val nondep_supertype : Env.t -> Ident.t list -> module_type -> module_type
val nondep_sig_item :
  Env.t -> Ident.t list -> signature_item -> signature_item
val no_code_needed : Env.t -> module_type -> bool
val no_code_needed_sig : Env.t -> signature -> bool
val enrich_modtype : Env.t -> Path.t -> module_type -> module_type
val enrich_typedecl :
  Env.t -> Path.t -> Ident.t -> type_declaration -> type_declaration
val type_paths : Env.t -> Path.t -> module_type -> Path.t list
val contains_type : Env.t -> module_type -> bool
val lower_nongen : int -> module_type -> unit

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

open Types

val scrape : Env.t -> module_type -> module_type


val scrape_for_type_of :
  remove_aliases:bool -> Env.t -> module_type -> module_type


val freshen : module_type -> module_type


val strengthen :
  aliasable:bool -> Env.t -> module_type -> Path.t -> module_type


val strengthen_decl :
  aliasable:bool ->
    Env.t -> module_declaration -> Path.t -> module_declaration


val nondep_supertype : Env.t -> Ident.t list -> module_type -> module_type


val nondep_sig_item :
  Env.t -> Ident.t list -> signature_item -> signature_item


val no_code_needed : Env.t -> module_type -> bool


val no_code_needed_sig : Env.t -> signature -> bool


val enrich_modtype : Env.t -> Path.t -> module_type -> module_type


val enrich_typedecl :
  Env.t -> Path.t -> Ident.t -> type_declaration -> type_declaration


val type_paths : Env.t -> Path.t -> module_type -> Path.t list


val contains_type : Env.t -> module_type -> bool


val lower_nongen : int -> module_type -> unit

File "./asttypes.mli", line 28, characters 19-24:
Error: Symbol int32 not found
