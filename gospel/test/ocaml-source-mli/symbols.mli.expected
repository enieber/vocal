
*******************************
********** Parsed file ********
*******************************
val modules : string list ref
val program_source_dirs : string list ref
val read_symbols : string -> unit
val set_all_events : unit -> unit
val any_event_at_pc : int -> Instruct.debug_event
val event_at_pc : int -> Instruct.debug_event
val set_event_at_pc : int -> unit
val events_in_module : string -> Instruct.debug_event list
val event_at_pos : string -> int -> Instruct.debug_event
val event_near_pos : string -> int -> Instruct.debug_event
val update_current_event : unit -> unit

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

val modules : string list ref


val program_source_dirs : string list ref


val read_symbols : string -> unit


val set_all_events : unit -> unit


val any_event_at_pc : int -> Instruct.debug_event


val event_at_pc : int -> Instruct.debug_event


val set_event_at_pc : int -> unit


val events_in_module : string -> Instruct.debug_event list


val event_at_pos : string -> int -> Instruct.debug_event


val event_near_pos : string -> int -> Instruct.debug_event


val update_current_event : unit -> unit


*******************************
********* Typed GOSPEL ********
*******************************
module symbols.mli

  Namespace: symbols.mli
    Type symbols
      
    Logic Symbols
      
    Exception Symbols
      
    Namespaces
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    val modules : string list ref
    
    
    val program_source_dirs : string list ref
    
    
    val read_symbols : string -> unit
    
    
    val set_all_events : unit -> unit
    
    
    val any_event_at_pc : int -> Instruct.debug_event
    
    
    val event_at_pc : int -> Instruct.debug_event
    
    
    val set_event_at_pc : int -> unit
    
    
    val events_in_module : string -> Instruct.debug_event list
    
    
    val event_at_pos : string -> int -> Instruct.debug_event
    
    
    val event_near_pos : string -> int -> Instruct.debug_event
    
    
    val update_current_event : unit -> unit
    


*** OK ***

