
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.text " Streams and parsers. "]
type 'a t[@@ocaml.doc " The type of streams holding values of type ['a]. "]
exception Failure
  [@ocaml.doc
    " Raised by parsers when none of the first components of the stream\n   patterns is accepted. "]
exception Error of string
  [@ocaml.doc
    " Raised by parsers when the first component of a stream pattern is\n   accepted, but one of the following components is rejected. "]
[@@@ocaml.text " {1 Stream builders} "]
val from : (int -> 'a option) -> 'a t[@@ocaml.doc
                                       " [Stream.from f] returns a stream built from the function [f].\n   To create a new stream element, the function [f] is called with\n   the current stream count. The user function [f] must return either\n   [Some <value>] for a value or [None] to specify the end of the\n   stream.\n\n   Do note that the indices passed to [f] may not start at [0] in the\n   general case. For example, [[< '0; '1; Stream.from f >]] would call\n   [f] the first time with count [2].\n"]
val of_list : 'a list -> 'a t[@@ocaml.doc
                               " Return the stream holding the elements of the list in the same\n   order. "]
val of_string : string -> char t[@@ocaml.doc
                                  " Return the stream of the characters of the string parameter. "]
val of_bytes : bytes -> char t[@@ocaml.doc
                                " Return the stream of the characters of the bytes parameter.\n    @since 4.02.0 "]
val of_channel : in_channel -> char t[@@ocaml.doc
                                       " Return the stream of the characters read from the input channel. "]
[@@@ocaml.text " {1 Stream iterator} "]
val iter : ('a -> unit) -> 'a t -> unit[@@ocaml.doc
                                         " [Stream.iter f s] scans the whole stream s, applying function [f]\n   in turn to each stream element encountered. "]
[@@@ocaml.text " {1 Predefined parsers} "]
val next : 'a t -> 'a[@@ocaml.doc
                       " Return the first element of the stream and remove it from the\n   stream. Raise {!Stream.Failure} if the stream is empty. "]
val empty : 'a t -> unit[@@ocaml.doc
                          " Return [()] if the stream is empty, else raise {!Stream.Failure}. "]
[@@@ocaml.text " {1 Useful functions} "]
val peek : 'a t -> 'a option[@@ocaml.doc
                              " Return [Some] of \"the first element\" of the stream, or [None] if\n   the stream is empty. "]
val junk : 'a t -> unit[@@ocaml.doc
                         " Remove the first element of the stream, possibly unfreezing\n   it before. "]
val count : 'a t -> int[@@ocaml.doc
                         " Return the current count of the stream elements, i.e. the number\n   of the stream elements discarded. "]
val npeek : int -> 'a t -> 'a list[@@ocaml.doc
                                    " [npeek n] returns the list of the [n] first elements of\n   the stream, or all its remaining elements if less than [n]\n   elements are available. "]
[@@@ocaml.text "/*"]
val iapp : 'a t -> 'a t -> 'a t
val icons : 'a -> 'a t -> 'a t
val ising : 'a -> 'a t
val lapp : (unit -> 'a t) -> 'a t -> 'a t
val lcons : (unit -> 'a) -> 'a t -> 'a t
val lsing : (unit -> 'a) -> 'a t
val sempty : 'a t
val slazy : (unit -> 'a t) -> 'a t
val dump : ('a -> unit) -> 'a t -> unit

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.text " Streams and parsers. "]

type 'a t[@@ocaml.doc " The type of streams holding values of type ['a]. "]
  

exception Failure
  [@ocaml.doc
    " Raised by parsers when none of the first components of the stream\n   patterns is accepted. "]

exception Error of string
  [@ocaml.doc
    " Raised by parsers when the first component of a stream pattern is\n   accepted, but one of the following components is rejected. "]

[@@@ocaml.text " {1 Stream builders} "]

val from : (int -> 'a option) -> 'a t[@@ocaml.doc
                                       " [Stream.from f] returns a stream built from the function [f].\n   To create a new stream element, the function [f] is called with\n   the current stream count. The user function [f] must return either\n   [Some <value>] for a value or [None] to specify the end of the\n   stream.\n\n   Do note that the indices passed to [f] may not start at [0] in the\n   general case. For example, [[< '0; '1; Stream.from f >]] would call\n   [f] the first time with count [2].\n"]


val of_list : 'a list -> 'a t[@@ocaml.doc
                               " Return the stream holding the elements of the list in the same\n   order. "]


val of_string : string -> char t[@@ocaml.doc
                                  " Return the stream of the characters of the string parameter. "]


val of_bytes : bytes -> char t[@@ocaml.doc
                                " Return the stream of the characters of the bytes parameter.\n    @since 4.02.0 "]


val of_channel : in_channel -> char t[@@ocaml.doc
                                       " Return the stream of the characters read from the input channel. "]


[@@@ocaml.text " {1 Stream iterator} "]

val iter : ('a -> unit) -> 'a t -> unit[@@ocaml.doc
                                         " [Stream.iter f s] scans the whole stream s, applying function [f]\n   in turn to each stream element encountered. "]


[@@@ocaml.text " {1 Predefined parsers} "]

val next : 'a t -> 'a[@@ocaml.doc
                       " Return the first element of the stream and remove it from the\n   stream. Raise {!Stream.Failure} if the stream is empty. "]


val empty : 'a t -> unit[@@ocaml.doc
                          " Return [()] if the stream is empty, else raise {!Stream.Failure}. "]


[@@@ocaml.text " {1 Useful functions} "]

val peek : 'a t -> 'a option[@@ocaml.doc
                              " Return [Some] of \"the first element\" of the stream, or [None] if\n   the stream is empty. "]


val junk : 'a t -> unit[@@ocaml.doc
                         " Remove the first element of the stream, possibly unfreezing\n   it before. "]


val count : 'a t -> int[@@ocaml.doc
                         " Return the current count of the stream elements, i.e. the number\n   of the stream elements discarded. "]


val npeek : int -> 'a t -> 'a list[@@ocaml.doc
                                    " [npeek n] returns the list of the [n] first elements of\n   the stream, or all its remaining elements if less than [n]\n   elements are available. "]


[@@@ocaml.text "/*"]

val iapp : 'a t -> 'a t -> 'a t


val icons : 'a -> 'a t -> 'a t


val ising : 'a -> 'a t


val lapp : (unit -> 'a t) -> 'a t -> 'a t


val lcons : (unit -> 'a) -> 'a t -> 'a t


val lsing : (unit -> 'a) -> 'a t


val sempty : 'a t


val slazy : (unit -> 'a t) -> 'a t


val dump : ('a -> unit) -> 'a t -> unit


*******************************
********* Typed GOSPEL ********
*******************************
module stream.mli

  Namespace: stream.mli
    Type symbols
      'a t
      
    Logic Symbols
      
    Exception Symbols
      Error
      Failure
      
    Namespaces
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    [@@@ocaml.text " Streams and parsers. "]
    
    type 'a t
    
    
    exception Failure
    
    exception Error
    
    [@@@ocaml.text " {1 Stream builders} "]
    
    val from :
    (int -> 'a option) -> 'a t[@@ocaml.doc
                                " [Stream.from f] returns a stream built from the function [f].\n   To create a new stream element, the function [f] is called with\n   the current stream count. The user function [f] must return either\n   [Some <value>] for a value or [None] to specify the end of the\n   stream.\n\n   Do note that the indices passed to [f] may not start at [0] in the\n   general case. For example, [[< '0; '1; Stream.from f >]] would call\n   [f] the first time with count [2].\n"]
    
    
    val of_list :
    'a list -> 'a t[@@ocaml.doc
                     " Return the stream holding the elements of the list in the same\n   order. "]
    
    
    val of_string :
    string -> char t[@@ocaml.doc
                      " Return the stream of the characters of the string parameter. "]
    
    
    val of_bytes :
    bytes -> char t[@@ocaml.doc
                     " Return the stream of the characters of the bytes parameter.\n    @since 4.02.0 "]
    
    
    val of_channel :
    in_channel -> char t[@@ocaml.doc
                          " Return the stream of the characters read from the input channel. "]
    
    
    [@@@ocaml.text " {1 Stream iterator} "]
    
    val iter :
    ('a -> unit) -> 'a t -> unit[@@ocaml.doc
                                  " [Stream.iter f s] scans the whole stream s, applying function [f]\n   in turn to each stream element encountered. "]
    
    
    [@@@ocaml.text " {1 Predefined parsers} "]
    
    val next :
    'a t -> 'a[@@ocaml.doc
                " Return the first element of the stream and remove it from the\n   stream. Raise {!Stream.Failure} if the stream is empty. "]
    
    
    val empty :
    'a t -> unit[@@ocaml.doc
                  " Return [()] if the stream is empty, else raise {!Stream.Failure}. "]
    
    
    [@@@ocaml.text " {1 Useful functions} "]
    
    val peek :
    'a t -> 'a option[@@ocaml.doc
                       " Return [Some] of \"the first element\" of the stream, or [None] if\n   the stream is empty. "]
    
    
    val junk :
    'a t -> unit[@@ocaml.doc
                  " Remove the first element of the stream, possibly unfreezing\n   it before. "]
    
    
    val count :
    'a t -> int[@@ocaml.doc
                 " Return the current count of the stream elements, i.e. the number\n   of the stream elements discarded. "]
    
    
    val npeek :
    int -> 'a t -> 'a list[@@ocaml.doc
                            " [npeek n] returns the list of the [n] first elements of\n   the stream, or all its remaining elements if less than [n]\n   elements are available. "]
    
    
    [@@@ocaml.text "/*"]
    
    val iapp : 'a t -> 'a t -> 'a t
    
    
    val icons : 'a -> 'a t -> 'a t
    
    
    val ising : 'a -> 'a t
    
    
    val lapp : (unit -> 'a t) -> 'a t -> 'a t
    
    
    val lcons : (unit -> 'a) -> 'a t -> 'a t
    
    
    val lsing : (unit -> 'a) -> 'a t
    
    
    val sempty : 'a t
    
    
    val slazy : (unit -> 'a t) -> 'a t
    
    
    val dump : ('a -> unit) -> 'a t -> unit
    


*** OK ***

