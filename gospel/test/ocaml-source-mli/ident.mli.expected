
*******************************
********** Parsed file ********
*******************************
type t
include Identifiable.S with type  t :=  t
val create : string -> t
val create_persistent : string -> t
val create_predef_exn : string -> t
val rename : t -> t
val name : t -> string
val with_name : t -> string -> t
val unique_name : t -> string
val unique_toplevel_name : t -> string
val persistent : t -> bool
val same : t -> t -> bool
val compare : t -> t -> int
val create_hidden : string -> t
val global : t -> bool
val is_predef_exn : t -> bool
val binding_time : t -> int
val current_time : unit -> int
val set_current_time : int -> unit
val reinit : unit -> unit
type 'a tbl
val empty : 'a tbl
val add : t -> 'a -> 'a tbl -> 'a tbl
val find_same : t -> 'a tbl -> 'a
val find_name : string -> 'a tbl -> (t * 'a)
val find_all : string -> 'a tbl -> (t * 'a) list
val fold_name : (t -> 'a -> 'b -> 'b) -> 'a tbl -> 'b -> 'b
val fold_all : (t -> 'a -> 'b -> 'b) -> 'a tbl -> 'b -> 'b
val iter : (t -> 'a -> unit) -> 'a tbl -> unit
val make_key_generator : unit -> t -> t

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

type t
  

include Identifiable.S with type  t :=  t

val create : string -> t


val create_persistent : string -> t


val create_predef_exn : string -> t


val rename : t -> t


val name : t -> string


val with_name : t -> string -> t


val unique_name : t -> string


val unique_toplevel_name : t -> string


val persistent : t -> bool


val same : t -> t -> bool


val compare : t -> t -> int


val create_hidden : string -> t


val global : t -> bool


val is_predef_exn : t -> bool


val binding_time : t -> int


val current_time : unit -> int


val set_current_time : int -> unit


val reinit : unit -> unit


type 'a tbl
  

val empty : 'a tbl


val add : t -> 'a -> 'a tbl -> 'a tbl


val find_same : t -> 'a tbl -> 'a


val find_name : string -> 'a tbl -> (t * 'a)


val find_all : string -> 'a tbl -> (t * 'a) list


val fold_name : (t -> 'a -> 'b -> 'b) -> 'a tbl -> 'b -> 'b


val fold_all : (t -> 'a -> 'b -> 'b) -> 'a tbl -> 'b -> 'b


val iter : (t -> 'a -> unit) -> 'a tbl -> unit


val make_key_generator : unit -> t -> t


*******************************
********* Typed GOSPEL ********
*******************************
module ident.mli

  Namespace: ident.mli
    Type symbols
       t
      'a tbl
      
    Logic Symbols
      
    Exception Symbols
      
    Namespaces
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    type t
    
    
    include Identifiable.S with type  t :=  t
    
    val create : string -> t
    
    
    val create_persistent : string -> t
    
    
    val create_predef_exn : string -> t
    
    
    val rename : t -> t
    
    
    val name : t -> string
    
    
    val with_name : t -> string -> t
    
    
    val unique_name : t -> string
    
    
    val unique_toplevel_name : t -> string
    
    
    val persistent : t -> bool
    
    
    val same : t -> t -> bool
    
    
    val compare : t -> t -> int
    
    
    val create_hidden : string -> t
    
    
    val global : t -> bool
    
    
    val is_predef_exn : t -> bool
    
    
    val binding_time : t -> int
    
    
    val current_time : unit -> int
    
    
    val set_current_time : int -> unit
    
    
    val reinit : unit -> unit
    
    
    type 'a tbl
    
    
    val empty : 'a tbl
    
    
    val add : t -> 'a -> 'a tbl -> 'a tbl
    
    
    val find_same : t -> 'a tbl -> 'a
    
    
    val find_name : string -> 'a tbl -> (t * 'a)
    
    
    val find_all : string -> 'a tbl -> (t * 'a) list
    
    
    val fold_name : (t -> 'a -> 'b -> 'b) -> 'a tbl -> 'b -> 'b
    
    
    val fold_all : (t -> 'a -> 'b -> 'b) -> 'a tbl -> 'b -> 'b
    
    
    val iter : (t -> 'a -> unit) -> 'a tbl -> unit
    
    
    val make_key_generator : unit -> t -> t
    


*** OK ***

