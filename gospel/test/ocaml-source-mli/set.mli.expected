
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.text
  " Sets over ordered types.\n\n   This module implements the set data structure, given a total ordering\n   function over the set elements. All operations over sets\n   are purely applicative (no side-effects).\n   The implementation uses balanced binary trees, and is therefore\n   reasonably efficient: insertion and membership take time\n   logarithmic in the size of the set, for instance.\n\n   The {!Make} functor constructs implementations for any type, given a\n   [compare] function.\n   For instance:\n   {[\n     module IntPairs =\n       struct\n         type t = int * int\n         let compare (x0,y0) (x1,y1) =\n           match Stdlib.compare x0 x1 with\n               0 -> Stdlib.compare y0 y1\n             | c -> c\n       end\n\n     module PairsSet = Set.Make(IntPairs)\n\n     let m = PairsSet.(empty |> add (2,3) |> add (5,7) |> add (11,13))\n   ]}\n\n   This creates a new module [PairsSet], with a new type [PairsSet.t]\n   of sets of [int * int].\n"]
module type OrderedType  =
  sig
    type t[@@ocaml.doc " The type of the set elements. "]
    val compare : t -> t -> int[@@ocaml.doc
                                 " A total ordering function over the set elements.\n          This is a two-argument function [f] such that\n          [f e1 e2] is zero if the elements [e1] and [e2] are equal,\n          [f e1 e2] is strictly negative if [e1] is smaller than [e2],\n          and [f e1 e2] is strictly positive if [e1] is greater than [e2].\n          Example: a suitable ordering function is the generic structural\n          comparison function {!Stdlib.compare}. "]
  end[@@ocaml.doc " Input signature of the functor {!Set.Make}. "]
module type S  =
  sig
    type elt[@@ocaml.doc " The type of the set elements. "]
    type t[@@ocaml.doc " The type of sets. "]
    val empty : t[@@ocaml.doc " The empty set. "]
    val is_empty : t -> bool[@@ocaml.doc
                              " Test whether a set is empty or not. "]
    val mem : elt -> t -> bool[@@ocaml.doc
                                " [mem x s] tests whether [x] belongs to the set [s]. "]
    val add : elt -> t -> t[@@ocaml.doc
                             " [add x s] returns a set containing all elements of [s],\n       plus [x]. If [x] was already in [s], [s] is returned unchanged\n       (the result of the function is then physically equal to [s]).\n       @before 4.03 Physical equality was not ensured. "]
    val singleton : elt -> t[@@ocaml.doc
                              " [singleton x] returns the one-element set containing only [x]. "]
    val remove : elt -> t -> t[@@ocaml.doc
                                " [remove x s] returns a set containing all elements of [s],\n       except [x]. If [x] was not in [s], [s] is returned unchanged\n       (the result of the function is then physically equal to [s]).\n       @before 4.03 Physical equality was not ensured. "]
    val union : t -> t -> t[@@ocaml.doc " Set union. "]
    val inter : t -> t -> t[@@ocaml.doc " Set intersection. "]
    val disjoint : t -> t -> bool[@@ocaml.doc
                                   " Test if two sets are disjoint.\n        @since 4.08.0 "]
    val diff : t -> t -> t[@@ocaml.doc " Set difference. "]
    val compare : t -> t -> int[@@ocaml.doc
                                 " Total ordering between sets. Can be used as the ordering function\n       for doing sets of sets. "]
    val equal : t -> t -> bool[@@ocaml.doc
                                " [equal s1 s2] tests whether the sets [s1] and [s2] are\n       equal, that is, contain equal elements. "]
    val subset : t -> t -> bool[@@ocaml.doc
                                 " [subset s1 s2] tests whether the set [s1] is a subset of\n       the set [s2]. "]
    val iter : (elt -> unit) -> t -> unit[@@ocaml.doc
                                           " [iter f s] applies [f] in turn to all elements of [s].\n       The elements of [s] are presented to [f] in increasing order\n       with respect to the ordering over the type of the elements. "]
    val map : (elt -> elt) -> t -> t[@@ocaml.doc
                                      " [map f s] is the set whose elements are [f a0],[f a1]... [f\n        aN], where [a0],[a1]...[aN] are the elements of [s].\n\n       The elements are passed to [f] in increasing order\n       with respect to the ordering over the type of the elements.\n\n       If no element of [s] is changed by [f], [s] is returned\n       unchanged. (If each output of [f] is physically equal to its\n       input, the returned set is physically equal to [s].)\n       @since 4.04.0 "]
    val fold : (elt -> 'a -> 'a) -> t -> 'a -> 'a[@@ocaml.doc
                                                   " [fold f s a] computes [(f xN ... (f x2 (f x1 a))...)],\n       where [x1 ... xN] are the elements of [s], in increasing order. "]
    val for_all : (elt -> bool) -> t -> bool[@@ocaml.doc
                                              " [for_all p s] checks if all elements of the set\n       satisfy the predicate [p]. "]
    val exists : (elt -> bool) -> t -> bool[@@ocaml.doc
                                             " [exists p s] checks if at least one element of\n       the set satisfies the predicate [p]. "]
    val filter : (elt -> bool) -> t -> t[@@ocaml.doc
                                          " [filter p s] returns the set of all elements in [s]\n       that satisfy predicate [p]. If [p] satisfies every element in [s],\n       [s] is returned unchanged (the result of the function is then\n       physically equal to [s]).\n       @before 4.03 Physical equality was not ensured."]
    val partition : (elt -> bool) -> t -> (t * t)[@@ocaml.doc
                                                   " [partition p s] returns a pair of sets [(s1, s2)], where\n       [s1] is the set of all the elements of [s] that satisfy the\n       predicate [p], and [s2] is the set of all the elements of\n       [s] that do not satisfy [p]. "]
    val cardinal : t -> int[@@ocaml.doc
                             " Return the number of elements of a set. "]
    val elements : t -> elt list[@@ocaml.doc
                                  " Return the list of all elements of the given set.\n       The returned list is sorted in increasing order with respect\n       to the ordering [Ord.compare], where [Ord] is the argument\n       given to {!Set.Make}. "]
    val min_elt : t -> elt[@@ocaml.doc
                            " Return the smallest element of the given set\n       (with respect to the [Ord.compare] ordering), or raise\n       [Not_found] if the set is empty. "]
    val min_elt_opt : t -> elt option[@@ocaml.doc
                                       " Return the smallest element of the given set\n       (with respect to the [Ord.compare] ordering), or [None]\n       if the set is empty.\n        @since 4.05\n    "]
    val max_elt : t -> elt[@@ocaml.doc
                            " Same as {!Set.S.min_elt}, but returns the largest element of the\n       given set. "]
    val max_elt_opt : t -> elt option[@@ocaml.doc
                                       " Same as {!Set.S.min_elt_opt}, but returns the largest element of the\n        given set.\n        @since 4.05\n    "]
    val choose : t -> elt[@@ocaml.doc
                           " Return one element of the given set, or raise [Not_found] if\n       the set is empty. Which element is chosen is unspecified,\n       but equal elements will be chosen for equal sets. "]
    val choose_opt : t -> elt option[@@ocaml.doc
                                      " Return one element of the given set, or [None] if\n        the set is empty. Which element is chosen is unspecified,\n        but equal elements will be chosen for equal sets.\n        @since 4.05\n    "]
    val split : elt -> t -> (t * bool * t)[@@ocaml.doc
                                            " [split x s] returns a triple [(l, present, r)], where\n          [l] is the set of elements of [s] that are\n          strictly less than [x];\n          [r] is the set of elements of [s] that are\n          strictly greater than [x];\n          [present] is [false] if [s] contains no element equal to [x],\n          or [true] if [s] contains an element equal to [x]. "]
    val find : elt -> t -> elt[@@ocaml.doc
                                " [find x s] returns the element of [s] equal to [x] (according\n        to [Ord.compare]), or raise [Not_found] if no such element\n        exists.\n        @since 4.01.0 "]
    val find_opt : elt -> t -> elt option[@@ocaml.doc
                                           " [find_opt x s] returns the element of [s] equal to [x] (according\n        to [Ord.compare]), or [None] if no such element\n        exists.\n        @since 4.05 "]
    val find_first : (elt -> bool) -> t -> elt[@@ocaml.doc
                                                " [find_first f s], where [f] is a monotonically increasing function,\n       returns the lowest element [e] of [s] such that [f e],\n       or raises [Not_found] if no such element exists.\n\n       For example, [find_first (fun e -> Ord.compare e x >= 0) s] will return\n       the first element [e] of [s] where [Ord.compare e x >= 0] (intuitively:\n       [e >= x]), or raise [Not_found] if [x] is greater than any element of\n       [s].\n\n        @since 4.05\n       "]
    val find_first_opt : (elt -> bool) -> t -> elt option[@@ocaml.doc
                                                           " [find_first_opt f s], where [f] is a monotonically increasing function,\n       returns an option containing the lowest element [e] of [s] such that\n       [f e], or [None] if no such element exists.\n        @since 4.05\n       "]
    val find_last : (elt -> bool) -> t -> elt[@@ocaml.doc
                                               " [find_last f s], where [f] is a monotonically decreasing function,\n       returns the highest element [e] of [s] such that [f e],\n       or raises [Not_found] if no such element exists.\n        @since 4.05\n       "]
    val find_last_opt : (elt -> bool) -> t -> elt option[@@ocaml.doc
                                                          " [find_last_opt f s], where [f] is a monotonically decreasing function,\n       returns an option containing the highest element [e] of [s] such that\n       [f e], or [None] if no such element exists.\n        @since 4.05\n       "]
    val of_list : elt list -> t[@@ocaml.doc
                                 " [of_list l] creates a set from a list of elements.\n        This is usually more efficient than folding [add] over the list,\n        except perhaps for lists with many duplicated elements.\n        @since 4.02.0 "]
    [@@@ocaml.text " {6 Iterators} "]
    val to_seq_from : elt -> t -> elt Seq.t[@@ocaml.doc
                                             " [to_seq_from x s] iterates on a subset of the elements of [s]\n        in ascending order, from [x] or above.\n        @since 4.07 "]
    val to_seq : t -> elt Seq.t[@@ocaml.doc
                                 " Iterate on the whole set, in ascending order\n        @since 4.07 "]
    val add_seq : elt Seq.t -> t -> t[@@ocaml.doc
                                       " Add the given elements to the set, in order.\n        @since 4.07 "]
    val of_seq : elt Seq.t -> t[@@ocaml.doc
                                 " Build a set from the given bindings\n        @since 4.07 "]
  end[@@ocaml.doc " Output signature of the functor {!Set.Make}. "]
module Make : functor (Ord : OrderedType) -> S with type  elt =  Ord.t
[@@ocaml.doc
  " Functor building an implementation of the set structure\n   given a totally ordered type. "]

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.text
  " Sets over ordered types.\n\n   This module implements the set data structure, given a total ordering\n   function over the set elements. All operations over sets\n   are purely applicative (no side-effects).\n   The implementation uses balanced binary trees, and is therefore\n   reasonably efficient: insertion and membership take time\n   logarithmic in the size of the set, for instance.\n\n   The {!Make} functor constructs implementations for any type, given a\n   [compare] function.\n   For instance:\n   {[\n     module IntPairs =\n       struct\n         type t = int * int\n         let compare (x0,y0) (x1,y1) =\n           match Stdlib.compare x0 x1 with\n               0 -> Stdlib.compare y0 y1\n             | c -> c\n       end\n\n     module PairsSet = Set.Make(IntPairs)\n\n     let m = PairsSet.(empty |> add (2,3) |> add (5,7) |> add (11,13))\n   ]}\n\n   This creates a new module [PairsSet], with a new type [PairsSet.t]\n   of sets of [int * int].\n"]

module type OrderedType  =
  sig
    type t[@@ocaml.doc " The type of the set elements. "]
      
    val compare : t -> t -> int[@@ocaml.doc
                                 " A total ordering function over the set elements.\n          This is a two-argument function [f] such that\n          [f e1 e2] is zero if the elements [e1] and [e2] are equal,\n          [f e1 e2] is strictly negative if [e1] is smaller than [e2],\n          and [f e1 e2] is strictly positive if [e1] is greater than [e2].\n          Example: a suitable ordering function is the generic structural\n          comparison function {!Stdlib.compare}. "]
    
  end[@@ocaml.doc " Input signature of the functor {!Set.Make}. "]

module type S  =
  sig
    type elt[@@ocaml.doc " The type of the set elements. "]
      
    type t[@@ocaml.doc " The type of sets. "]
      
    val empty : t[@@ocaml.doc " The empty set. "]
    
    val is_empty : t -> bool[@@ocaml.doc
                              " Test whether a set is empty or not. "]
    
    val mem : elt -> t -> bool[@@ocaml.doc
                                " [mem x s] tests whether [x] belongs to the set [s]. "]
    
    val add : elt -> t -> t[@@ocaml.doc
                             " [add x s] returns a set containing all elements of [s],\n       plus [x]. If [x] was already in [s], [s] is returned unchanged\n       (the result of the function is then physically equal to [s]).\n       @before 4.03 Physical equality was not ensured. "]
    
    val singleton : elt -> t[@@ocaml.doc
                              " [singleton x] returns the one-element set containing only [x]. "]
    
    val remove : elt -> t -> t[@@ocaml.doc
                                " [remove x s] returns a set containing all elements of [s],\n       except [x]. If [x] was not in [s], [s] is returned unchanged\n       (the result of the function is then physically equal to [s]).\n       @before 4.03 Physical equality was not ensured. "]
    
    val union : t -> t -> t[@@ocaml.doc " Set union. "]
    
    val inter : t -> t -> t[@@ocaml.doc " Set intersection. "]
    
    val disjoint : t -> t -> bool[@@ocaml.doc
                                   " Test if two sets are disjoint.\n        @since 4.08.0 "]
    
    val diff : t -> t -> t[@@ocaml.doc " Set difference. "]
    
    val compare : t -> t -> int[@@ocaml.doc
                                 " Total ordering between sets. Can be used as the ordering function\n       for doing sets of sets. "]
    
    val equal : t -> t -> bool[@@ocaml.doc
                                " [equal s1 s2] tests whether the sets [s1] and [s2] are\n       equal, that is, contain equal elements. "]
    
    val subset : t -> t -> bool[@@ocaml.doc
                                 " [subset s1 s2] tests whether the set [s1] is a subset of\n       the set [s2]. "]
    
    val iter : (elt -> unit) -> t -> unit[@@ocaml.doc
                                           " [iter f s] applies [f] in turn to all elements of [s].\n       The elements of [s] are presented to [f] in increasing order\n       with respect to the ordering over the type of the elements. "]
    
    val map : (elt -> elt) -> t -> t[@@ocaml.doc
                                      " [map f s] is the set whose elements are [f a0],[f a1]... [f\n        aN], where [a0],[a1]...[aN] are the elements of [s].\n\n       The elements are passed to [f] in increasing order\n       with respect to the ordering over the type of the elements.\n\n       If no element of [s] is changed by [f], [s] is returned\n       unchanged. (If each output of [f] is physically equal to its\n       input, the returned set is physically equal to [s].)\n       @since 4.04.0 "]
    
    val fold : (elt -> 'a -> 'a) -> t -> 'a -> 'a[@@ocaml.doc
                                                   " [fold f s a] computes [(f xN ... (f x2 (f x1 a))...)],\n       where [x1 ... xN] are the elements of [s], in increasing order. "]
    
    val for_all : (elt -> bool) -> t -> bool[@@ocaml.doc
                                              " [for_all p s] checks if all elements of the set\n       satisfy the predicate [p]. "]
    
    val exists : (elt -> bool) -> t -> bool[@@ocaml.doc
                                             " [exists p s] checks if at least one element of\n       the set satisfies the predicate [p]. "]
    
    val filter : (elt -> bool) -> t -> t[@@ocaml.doc
                                          " [filter p s] returns the set of all elements in [s]\n       that satisfy predicate [p]. If [p] satisfies every element in [s],\n       [s] is returned unchanged (the result of the function is then\n       physically equal to [s]).\n       @before 4.03 Physical equality was not ensured."]
    
    val partition : (elt -> bool) -> t -> (t * t)[@@ocaml.doc
                                                   " [partition p s] returns a pair of sets [(s1, s2)], where\n       [s1] is the set of all the elements of [s] that satisfy the\n       predicate [p], and [s2] is the set of all the elements of\n       [s] that do not satisfy [p]. "]
    
    val cardinal : t -> int[@@ocaml.doc
                             " Return the number of elements of a set. "]
    
    val elements : t -> elt list[@@ocaml.doc
                                  " Return the list of all elements of the given set.\n       The returned list is sorted in increasing order with respect\n       to the ordering [Ord.compare], where [Ord] is the argument\n       given to {!Set.Make}. "]
    
    val min_elt : t -> elt[@@ocaml.doc
                            " Return the smallest element of the given set\n       (with respect to the [Ord.compare] ordering), or raise\n       [Not_found] if the set is empty. "]
    
    val min_elt_opt : t -> elt option[@@ocaml.doc
                                       " Return the smallest element of the given set\n       (with respect to the [Ord.compare] ordering), or [None]\n       if the set is empty.\n        @since 4.05\n    "]
    
    val max_elt : t -> elt[@@ocaml.doc
                            " Same as {!Set.S.min_elt}, but returns the largest element of the\n       given set. "]
    
    val max_elt_opt : t -> elt option[@@ocaml.doc
                                       " Same as {!Set.S.min_elt_opt}, but returns the largest element of the\n        given set.\n        @since 4.05\n    "]
    
    val choose : t -> elt[@@ocaml.doc
                           " Return one element of the given set, or raise [Not_found] if\n       the set is empty. Which element is chosen is unspecified,\n       but equal elements will be chosen for equal sets. "]
    
    val choose_opt : t -> elt option[@@ocaml.doc
                                      " Return one element of the given set, or [None] if\n        the set is empty. Which element is chosen is unspecified,\n        but equal elements will be chosen for equal sets.\n        @since 4.05\n    "]
    
    val split : elt -> t -> (t * bool * t)[@@ocaml.doc
                                            " [split x s] returns a triple [(l, present, r)], where\n          [l] is the set of elements of [s] that are\n          strictly less than [x];\n          [r] is the set of elements of [s] that are\n          strictly greater than [x];\n          [present] is [false] if [s] contains no element equal to [x],\n          or [true] if [s] contains an element equal to [x]. "]
    
    val find : elt -> t -> elt[@@ocaml.doc
                                " [find x s] returns the element of [s] equal to [x] (according\n        to [Ord.compare]), or raise [Not_found] if no such element\n        exists.\n        @since 4.01.0 "]
    
    val find_opt : elt -> t -> elt option[@@ocaml.doc
                                           " [find_opt x s] returns the element of [s] equal to [x] (according\n        to [Ord.compare]), or [None] if no such element\n        exists.\n        @since 4.05 "]
    
    val find_first : (elt -> bool) -> t -> elt[@@ocaml.doc
                                                " [find_first f s], where [f] is a monotonically increasing function,\n       returns the lowest element [e] of [s] such that [f e],\n       or raises [Not_found] if no such element exists.\n\n       For example, [find_first (fun e -> Ord.compare e x >= 0) s] will return\n       the first element [e] of [s] where [Ord.compare e x >= 0] (intuitively:\n       [e >= x]), or raise [Not_found] if [x] is greater than any element of\n       [s].\n\n        @since 4.05\n       "]
    
    val find_first_opt : (elt -> bool) -> t -> elt option[@@ocaml.doc
                                                           " [find_first_opt f s], where [f] is a monotonically increasing function,\n       returns an option containing the lowest element [e] of [s] such that\n       [f e], or [None] if no such element exists.\n        @since 4.05\n       "]
    
    val find_last : (elt -> bool) -> t -> elt[@@ocaml.doc
                                               " [find_last f s], where [f] is a monotonically decreasing function,\n       returns the highest element [e] of [s] such that [f e],\n       or raises [Not_found] if no such element exists.\n        @since 4.05\n       "]
    
    val find_last_opt : (elt -> bool) -> t -> elt option[@@ocaml.doc
                                                          " [find_last_opt f s], where [f] is a monotonically decreasing function,\n       returns an option containing the highest element [e] of [s] such that\n       [f e], or [None] if no such element exists.\n        @since 4.05\n       "]
    
    val of_list : elt list -> t[@@ocaml.doc
                                 " [of_list l] creates a set from a list of elements.\n        This is usually more efficient than folding [add] over the list,\n        except perhaps for lists with many duplicated elements.\n        @since 4.02.0 "]
    
    [@@@ocaml.text " {6 Iterators} "]
    val to_seq_from : elt -> t -> elt Seq.t[@@ocaml.doc
                                             " [to_seq_from x s] iterates on a subset of the elements of [s]\n        in ascending order, from [x] or above.\n        @since 4.07 "]
    
    val to_seq : t -> elt Seq.t[@@ocaml.doc
                                 " Iterate on the whole set, in ascending order\n        @since 4.07 "]
    
    val add_seq : elt Seq.t -> t -> t[@@ocaml.doc
                                       " Add the given elements to the set, in order.\n        @since 4.07 "]
    
    val of_seq : elt Seq.t -> t[@@ocaml.doc
                                 " Build a set from the given bindings\n        @since 4.07 "]
    
  end[@@ocaml.doc " Output signature of the functor {!Set.Make}. "]

module Make : functor (Ord : OrderedType) -> S with type  elt =  Ord.t
[@@ocaml.doc
  " Functor building an implementation of the set structure\n   given a totally ordered type. "]

*******************************
********* Typed GOSPEL ********
*******************************
module set.mli

  Namespace: set.mli
    Type symbols
      
    Logic Symbols
      
    Exception Symbols
      
    Namespaces
      Namespace: Make
        Type symbols
           elt [=t]
           t#1
          
        Logic Symbols
          
        Exception Symbols
          
        Namespaces
          
        Type Namespaces
          
      
    Type Namespaces
      Namespace: OrderedType
        Type symbols
           t
          
        Logic Symbols
          
        Exception Symbols
          
        Namespaces
          
        Type Namespaces
          
      Namespace: S
        Type symbols
           elt#1
           t#1
          
        Logic Symbols
          
        Exception Symbols
          
        Namespaces
          
        Type Namespaces
          
      
  Signatures
    (*@ open Gospelstdlib *)
    
    [@@@ocaml.text
      " Sets over ordered types.\n\n   This module implements the set data structure, given a total ordering\n   function over the set elements. All operations over sets\n   are purely applicative (no side-effects).\n   The implementation uses balanced binary trees, and is therefore\n   reasonably efficient: insertion and membership take time\n   logarithmic in the size of the set, for instance.\n\n   The {!Make} functor constructs implementations for any type, given a\n   [compare] function.\n   For instance:\n   {[\n     module IntPairs =\n       struct\n         type t = int * int\n         let compare (x0,y0) (x1,y1) =\n           match Stdlib.compare x0 x1 with\n               0 -> Stdlib.compare y0 y1\n             | c -> c\n       end\n\n     module PairsSet = Set.Make(IntPairs)\n\n     let m = PairsSet.(empty |> add (2,3) |> add (5,7) |> add (11,13))\n   ]}\n\n   This creates a new module [PairsSet], with a new type [PairsSet.t]\n   of sets of [int * int].\n"]
    
    module type OrderedType  =
      sig
        type t
        
        val compare :
        t -> t -> int[@@ocaml.doc
                       " A total ordering function over the set elements.\n          This is a two-argument function [f] such that\n          [f e1 e2] is zero if the elements [e1] and [e2] are equal,\n          [f e1 e2] is strictly negative if [e1] is smaller than [e2],\n          and [f e1 e2] is strictly positive if [e1] is greater than [e2].\n          Example: a suitable ordering function is the generic structural\n          comparison function {!Stdlib.compare}. "]
        
      end[@@ocaml.doc " Input signature of the functor {!Set.Make}. "]
    
    module type S  =
      sig
        type elt#1
        
        type t#1
        
        val empty : t[@@ocaml.doc " The empty set. "]
        
        val is_empty :
        t -> bool[@@ocaml.doc " Test whether a set is empty or not. "]
        
        val mem :
        elt -> t -> bool[@@ocaml.doc
                          " [mem x s] tests whether [x] belongs to the set [s]. "]
        
        val add :
        elt -> t -> t[@@ocaml.doc
                       " [add x s] returns a set containing all elements of [s],\n       plus [x]. If [x] was already in [s], [s] is returned unchanged\n       (the result of the function is then physically equal to [s]).\n       @before 4.03 Physical equality was not ensured. "]
        
        val singleton :
        elt -> t[@@ocaml.doc
                  " [singleton x] returns the one-element set containing only [x]. "]
        
        val remove :
        elt -> t -> t[@@ocaml.doc
                       " [remove x s] returns a set containing all elements of [s],\n       except [x]. If [x] was not in [s], [s] is returned unchanged\n       (the result of the function is then physically equal to [s]).\n       @before 4.03 Physical equality was not ensured. "]
        
        val union : t -> t -> t[@@ocaml.doc " Set union. "]
        
        val inter : t -> t -> t[@@ocaml.doc " Set intersection. "]
        
        val disjoint :
        t -> t -> bool[@@ocaml.doc
                        " Test if two sets are disjoint.\n        @since 4.08.0 "]
        
        val diff : t -> t -> t[@@ocaml.doc " Set difference. "]
        
        val compare#1 :
        t -> t -> int[@@ocaml.doc
                       " Total ordering between sets. Can be used as the ordering function\n       for doing sets of sets. "]
        
        val equal :
        t -> t -> bool[@@ocaml.doc
                        " [equal s1 s2] tests whether the sets [s1] and [s2] are\n       equal, that is, contain equal elements. "]
        
        val subset :
        t -> t -> bool[@@ocaml.doc
                        " [subset s1 s2] tests whether the set [s1] is a subset of\n       the set [s2]. "]
        
        val iter :
        (elt -> unit) -> t -> unit[@@ocaml.doc
                                    " [iter f s] applies [f] in turn to all elements of [s].\n       The elements of [s] are presented to [f] in increasing order\n       with respect to the ordering over the type of the elements. "]
        
        val map :
        (elt -> elt) -> t -> t[@@ocaml.doc
                                " [map f s] is the set whose elements are [f a0],[f a1]... [f\n        aN], where [a0],[a1]...[aN] are the elements of [s].\n\n       The elements are passed to [f] in increasing order\n       with respect to the ordering over the type of the elements.\n\n       If no element of [s] is changed by [f], [s] is returned\n       unchanged. (If each output of [f] is physically equal to its\n       input, the returned set is physically equal to [s].)\n       @since 4.04.0 "]
        
        val fold :
        (elt -> 'a -> 'a) -> t -> 'a -> 'a[@@ocaml.doc
                                            " [fold f s a] computes [(f xN ... (f x2 (f x1 a))...)],\n       where [x1 ... xN] are the elements of [s], in increasing order. "]
        
        val for_all :
        (elt -> bool) -> t -> bool[@@ocaml.doc
                                    " [for_all p s] checks if all elements of the set\n       satisfy the predicate [p]. "]
        
        val exists :
        (elt -> bool) -> t -> bool[@@ocaml.doc
                                    " [exists p s] checks if at least one element of\n       the set satisfies the predicate [p]. "]
        
        val filter :
        (elt -> bool) -> t -> t[@@ocaml.doc
                                 " [filter p s] returns the set of all elements in [s]\n       that satisfy predicate [p]. If [p] satisfies every element in [s],\n       [s] is returned unchanged (the result of the function is then\n       physically equal to [s]).\n       @before 4.03 Physical equality was not ensured."]
        
        val partition :
        (elt -> bool) -> t -> (t * t)[@@ocaml.doc
                                       " [partition p s] returns a pair of sets [(s1, s2)], where\n       [s1] is the set of all the elements of [s] that satisfy the\n       predicate [p], and [s2] is the set of all the elements of\n       [s] that do not satisfy [p]. "]
        
        val cardinal :
        t -> int[@@ocaml.doc " Return the number of elements of a set. "]
        
        val elements :
        t -> elt list[@@ocaml.doc
                       " Return the list of all elements of the given set.\n       The returned list is sorted in increasing order with respect\n       to the ordering [Ord.compare], where [Ord] is the argument\n       given to {!Set.Make}. "]
        
        val min_elt :
        t -> elt[@@ocaml.doc
                  " Return the smallest element of the given set\n       (with respect to the [Ord.compare] ordering), or raise\n       [Not_found] if the set is empty. "]
        
        val min_elt_opt :
        t -> elt option[@@ocaml.doc
                         " Return the smallest element of the given set\n       (with respect to the [Ord.compare] ordering), or [None]\n       if the set is empty.\n        @since 4.05\n    "]
        
        val max_elt :
        t -> elt[@@ocaml.doc
                  " Same as {!Set.S.min_elt}, but returns the largest element of the\n       given set. "]
        
        val max_elt_opt :
        t -> elt option[@@ocaml.doc
                         " Same as {!Set.S.min_elt_opt}, but returns the largest element of the\n        given set.\n        @since 4.05\n    "]
        
        val choose :
        t -> elt[@@ocaml.doc
                  " Return one element of the given set, or raise [Not_found] if\n       the set is empty. Which element is chosen is unspecified,\n       but equal elements will be chosen for equal sets. "]
        
        val choose_opt :
        t -> elt option[@@ocaml.doc
                         " Return one element of the given set, or [None] if\n        the set is empty. Which element is chosen is unspecified,\n        but equal elements will be chosen for equal sets.\n        @since 4.05\n    "]
        
        val split :
        elt -> t -> (t * bool * t)[@@ocaml.doc
                                    " [split x s] returns a triple [(l, present, r)], where\n          [l] is the set of elements of [s] that are\n          strictly less than [x];\n          [r] is the set of elements of [s] that are\n          strictly greater than [x];\n          [present] is [false] if [s] contains no element equal to [x],\n          or [true] if [s] contains an element equal to [x]. "]
        
        val find :
        elt -> t -> elt[@@ocaml.doc
                         " [find x s] returns the element of [s] equal to [x] (according\n        to [Ord.compare]), or raise [Not_found] if no such element\n        exists.\n        @since 4.01.0 "]
        
        val find_opt :
        elt -> t -> elt option[@@ocaml.doc
                                " [find_opt x s] returns the element of [s] equal to [x] (according\n        to [Ord.compare]), or [None] if no such element\n        exists.\n        @since 4.05 "]
        
        val find_first :
        (elt -> bool) -> t -> elt[@@ocaml.doc
                                   " [find_first f s], where [f] is a monotonically increasing function,\n       returns the lowest element [e] of [s] such that [f e],\n       or raises [Not_found] if no such element exists.\n\n       For example, [find_first (fun e -> Ord.compare e x >= 0) s] will return\n       the first element [e] of [s] where [Ord.compare e x >= 0] (intuitively:\n       [e >= x]), or raise [Not_found] if [x] is greater than any element of\n       [s].\n\n        @since 4.05\n       "]
        
        val find_first_opt :
        (elt -> bool) -> t -> elt option[@@ocaml.doc
                                          " [find_first_opt f s], where [f] is a monotonically increasing function,\n       returns an option containing the lowest element [e] of [s] such that\n       [f e], or [None] if no such element exists.\n        @since 4.05\n       "]
        
        val find_last :
        (elt -> bool) -> t -> elt[@@ocaml.doc
                                   " [find_last f s], where [f] is a monotonically decreasing function,\n       returns the highest element [e] of [s] such that [f e],\n       or raises [Not_found] if no such element exists.\n        @since 4.05\n       "]
        
        val find_last_opt :
        (elt -> bool) -> t -> elt option[@@ocaml.doc
                                          " [find_last_opt f s], where [f] is a monotonically decreasing function,\n       returns an option containing the highest element [e] of [s] such that\n       [f e], or [None] if no such element exists.\n        @since 4.05\n       "]
        
        val of_list :
        elt list -> t[@@ocaml.doc
                       " [of_list l] creates a set from a list of elements.\n        This is usually more efficient than folding [add] over the list,\n        except perhaps for lists with many duplicated elements.\n        @since 4.02.0 "]
        
        [@@@ocaml.text " {6 Iterators} "]
        val to_seq_from :
        elt -> t -> elt Seq.t[@@ocaml.doc
                               " [to_seq_from x s] iterates on a subset of the elements of [s]\n        in ascending order, from [x] or above.\n        @since 4.07 "]
        
        val to_seq :
        t -> elt Seq.t[@@ocaml.doc
                        " Iterate on the whole set, in ascending order\n        @since 4.07 "]
        
        val add_seq :
        elt Seq.t -> t -> t[@@ocaml.doc
                             " Add the given elements to the set, in order.\n        @since 4.07 "]
        
        val of_seq :
        elt Seq.t -> t[@@ocaml.doc
                        " Build a set from the given bindings\n        @since 4.07 "]
        
      end[@@ocaml.doc " Output signature of the functor {!Set.Make}. "]
    
    module Make : functor (Ord : OrderedType) -> S with type elt#1 = t
                                                   [@@ocaml.doc
                                                     " Functor building an implementation of the set structure\n   given a totally ordered type. "]


*** OK ***

