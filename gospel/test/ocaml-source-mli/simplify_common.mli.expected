
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.warning "+a-4-9-30-40-41-42"]
[@@@ocaml.text
  " [const_*_expr expr v annot], where the expression [expr] is known to\n    evaluate to the value [v], attempt to produce a more simple expression\n    together with its approximation and the benefit gained by replacing [expr]\n    with this new expression.  This simplification is only performed if [expr]\n    is known to have no side effects.  Otherwise, [expr] itself is returned,\n    with an appropriate approximation but zero benefit.\n\n    [const_boxed_int_expr] takes an additional argument specifying the kind of\n    boxed integer to which the given expression evaluates.\n"]
val const_int_expr :
  Flambda.named ->
    int -> (Flambda.named * Simple_value_approx.t * Inlining_cost.Benefit.t)
val const_char_expr :
  Flambda.named ->
    char -> (Flambda.named * Simple_value_approx.t * Inlining_cost.Benefit.t)
val const_bool_expr :
  Flambda.named ->
    bool -> (Flambda.named * Simple_value_approx.t * Inlining_cost.Benefit.t)
val const_ptr_expr :
  Flambda.named ->
    int -> (Flambda.named * Simple_value_approx.t * Inlining_cost.Benefit.t)
val const_float_expr :
  Flambda.named ->
    float ->
      (Flambda.named * Simple_value_approx.t * Inlining_cost.Benefit.t)
val const_boxed_int_expr :
  Flambda.named ->
    'a Simple_value_approx.boxed_int ->
      'a -> (Flambda.named * Simple_value_approx.t * Inlining_cost.Benefit.t)
val const_integer_comparison_expr :
  Flambda.named ->
    Lambda.integer_comparison ->
      'a ->
        'a ->
          (Flambda.named * Simple_value_approx.t * Inlining_cost.Benefit.t)
val const_float_comparison_expr :
  Flambda.named ->
    Lambda.float_comparison ->
      float ->
        float ->
          (Flambda.named * Simple_value_approx.t * Inlining_cost.Benefit.t)
val swap16 : int -> int[@@ocaml.doc
                         " Functions for transposing the order of bytes within words of various\n    sizes. "]
val swap32 : int32 -> int32
val swap64 : int64 -> int64
val swapnative : nativeint -> nativeint

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.warning "+a-4-9-30-40-41-42"]

[@@@ocaml.text
  " [const_*_expr expr v annot], where the expression [expr] is known to\n    evaluate to the value [v], attempt to produce a more simple expression\n    together with its approximation and the benefit gained by replacing [expr]\n    with this new expression.  This simplification is only performed if [expr]\n    is known to have no side effects.  Otherwise, [expr] itself is returned,\n    with an appropriate approximation but zero benefit.\n\n    [const_boxed_int_expr] takes an additional argument specifying the kind of\n    boxed integer to which the given expression evaluates.\n"]

val const_int_expr :
  Flambda.named ->
    int -> (Flambda.named * Simple_value_approx.t * Inlining_cost.Benefit.t)


val const_char_expr :
  Flambda.named ->
    char -> (Flambda.named * Simple_value_approx.t * Inlining_cost.Benefit.t)


val const_bool_expr :
  Flambda.named ->
    bool -> (Flambda.named * Simple_value_approx.t * Inlining_cost.Benefit.t)


val const_ptr_expr :
  Flambda.named ->
    int -> (Flambda.named * Simple_value_approx.t * Inlining_cost.Benefit.t)


val const_float_expr :
  Flambda.named ->
    float ->
      (Flambda.named * Simple_value_approx.t * Inlining_cost.Benefit.t)


val const_boxed_int_expr :
  Flambda.named ->
    'a Simple_value_approx.boxed_int ->
      'a -> (Flambda.named * Simple_value_approx.t * Inlining_cost.Benefit.t)


val const_integer_comparison_expr :
  Flambda.named ->
    Lambda.integer_comparison ->
      'a ->
        'a ->
          (Flambda.named * Simple_value_approx.t * Inlining_cost.Benefit.t)


val const_float_comparison_expr :
  Flambda.named ->
    Lambda.float_comparison ->
      float ->
        float ->
          (Flambda.named * Simple_value_approx.t * Inlining_cost.Benefit.t)


val swap16 : int -> int[@@ocaml.doc
                         " Functions for transposing the order of bytes within words of various\n    sizes. "]


val swap32 : int32 -> int32


val swap64 : int64 -> int64


val swapnative : nativeint -> nativeint


*******************************
********* Typed GOSPEL ********
*******************************
module simplify_common.mli

  Namespace: simplify_common.mli
    Type symbols
      
    Logic Symbols
      
    Exception Symbols
      
    Namespaces
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    [@@@ocaml.warning "+a-4-9-30-40-41-42"]
    
    [@@@ocaml.text
      " [const_*_expr expr v annot], where the expression [expr] is known to\n    evaluate to the value [v], attempt to produce a more simple expression\n    together with its approximation and the benefit gained by replacing [expr]\n    with this new expression.  This simplification is only performed if [expr]\n    is known to have no side effects.  Otherwise, [expr] itself is returned,\n    with an appropriate approximation but zero benefit.\n\n    [const_boxed_int_expr] takes an additional argument specifying the kind of\n    boxed integer to which the given expression evaluates.\n"]
    
    val const_int_expr :
    Flambda.named ->
      int ->
        (Flambda.named * Simple_value_approx.t * Inlining_cost.Benefit.t)
    
    
    val const_char_expr :
    Flambda.named ->
      char ->
        (Flambda.named * Simple_value_approx.t * Inlining_cost.Benefit.t)
    
    
    val const_bool_expr :
    Flambda.named ->
      bool ->
        (Flambda.named * Simple_value_approx.t * Inlining_cost.Benefit.t)
    
    
    val const_ptr_expr :
    Flambda.named ->
      int ->
        (Flambda.named * Simple_value_approx.t * Inlining_cost.Benefit.t)
    
    
    val const_float_expr :
    Flambda.named ->
      float ->
        (Flambda.named * Simple_value_approx.t * Inlining_cost.Benefit.t)
    
    
    val const_boxed_int_expr :
    Flambda.named ->
      'a Simple_value_approx.boxed_int ->
        'a ->
          (Flambda.named * Simple_value_approx.t * Inlining_cost.Benefit.t)
    
    
    val const_integer_comparison_expr :
    Flambda.named ->
      Lambda.integer_comparison ->
        'a ->
          'a ->
            (Flambda.named * Simple_value_approx.t * Inlining_cost.Benefit.t)
    
    
    val const_float_comparison_expr :
    Flambda.named ->
      Lambda.float_comparison ->
        float ->
          float ->
            (Flambda.named * Simple_value_approx.t * Inlining_cost.Benefit.t)
    
    
    val swap16 :
    int -> int[@@ocaml.doc
                " Functions for transposing the order of bytes within words of various\n    sizes. "]
    
    
    val swap32 : int32 -> int32
    
    
    val swap64 : int64 -> int64
    
    
    val swapnative : nativeint -> nativeint
    


*** OK ***

