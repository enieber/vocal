
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.text
  " Access to the information recorded by the [Spacetime]\n    module.  (It is intended that this module will be used by\n    post-processors rather than users wishing to understand their\n    programs.)\n    For 64-bit targets only.\n    This module may be used from any program, not just one compiled\n    with a compiler configured for Spacetime. "]
module Gc_stats :
sig
  type t
  val minor_words : t -> int
  val promoted_words : t -> int
  val major_words : t -> int
  val minor_collections : t -> int
  val major_collections : t -> int
  val heap_words : t -> int
  val heap_chunks : t -> int
  val compactions : t -> int
  val top_heap_words : t -> int
end
module Annotation :
sig
  type t[@@ocaml.doc
          " An annotation written into a value's header.  These may be looked up\n      in a [Trace.t] (see below). "]
  val to_int : t -> int
end
module Program_counter :
sig
  module OCaml : sig type t val to_int64 : t -> Int64.t end
  module Foreign : sig type t val to_int64 : t -> Int64.t end
end
module Frame_table :
sig
  type t[@@ocaml.doc
          " A value of type [t] corresponds to the frame table of a running\n      OCaml program.  The table is indexed by program counter address\n      (typically, but not always when using Spacetime, return addresses). "]
  val find_exn : Program_counter.OCaml.t -> t -> Printexc.Slot.t list
  [@@ocaml.doc
    " Find the location, including any inlined frames, corresponding to the\n      given program counter address.  Raises [Not_found] if the location\n      could not be resolved. "]
end
module Function_entry_point : sig type t val to_int64 : t -> Int64.t end
module Function_identifier : sig type t val to_int64 : t -> Int64.t end
module Shape_table : sig type t end
module Trace :
sig
  type t[@@ocaml.doc
          " A value of type [t] holds the dynamic call structure of the program\n      (i.e. which functions have called which other functions) together with\n      information required to decode profiling annotations written into\n      values' headers. "]
  type trace = t
  type node
  type ocaml_node
  type foreign_node
  type uninstrumented_node
  module OCaml :
  sig
    module Allocation_point :
    sig
      type t[@@ocaml.doc
              " A value of type [t] corresponds to an allocation point in OCaml\n          code. "]
      val program_counter : t -> Program_counter.OCaml.t[@@ocaml.doc
                                                          " The program counter at (or close to) the allocation site. "]
      val annotation : t -> Annotation.t[@@ocaml.doc
                                          " The annotation written into the headers of boxed values allocated\n          at the given allocation site. "]
      val num_words_including_headers : t -> int[@@ocaml.doc
                                                  " The total number of words allocated at this point. "]
    end
    module Direct_call_point :
    sig
      type 'target t[@@ocaml.doc
                      " A value of type ['target t] corresponds to a direct (i.e. known\n          at compile time) call point in OCaml code.  ['target] is the type\n          of the node corresponding to the callee. "]
      val call_site : _ t -> Program_counter.OCaml.t[@@ocaml.doc
                                                      " The program counter at (or close to) the call site. "]
      val callee : _ t -> Function_entry_point.t[@@ocaml.doc
                                                  " The address of the first instruction of the callee. "]
      val callee_node : 'target t -> 'target[@@ocaml.doc
                                              " The node corresponding to the callee. "]
      val call_count : _ t -> int option[@@ocaml.doc
                                          " The number of times the callee was called.  Only available if the\n          compiler that recorded the Spacetime profile was configured with\n          \"-with-spacetime-call-counts\".  [None] will be returned otherwise. "]
    end
    module Indirect_call_point :
    sig
      type t[@@ocaml.doc
              " A value of type [t] corresponds to an indirect call point in OCaml\n          code.  Each such value contains a list of callees to which the\n          call point has branched. "]
      val call_site : t -> Program_counter.OCaml.t[@@ocaml.doc
                                                    " The program counter at (or close to) the call site. "]
      module Callee :
      sig
        type t
        val callee : t -> Function_entry_point.t[@@ocaml.doc
                                                  " The address of the first instruction of the callee. "]
        val callee_node : t -> node[@@ocaml.doc
                                     " The node corresponding to the callee. "]
        val call_count : t -> int option[@@ocaml.doc
                                          " The number of times the callee was called.  This returns [None] in\n            the same circumstances as [Direct_call_point.call_count], above. "]
        val next : t -> t option[@@ocaml.doc
                                  " Move to the next callee to which this call point has branched.\n            [None] is returned when the end of the list is reached. "]
      end
      val callees : t -> Callee.t option[@@ocaml.doc
                                          " The list of callees to which this indirect call point has\n          branched. "]
    end
    module Field :
    sig
      type t[@@ocaml.doc
              " A value of type [t] enables iteration through the contents\n          (\"fields\") of an OCaml node. "]
      type direct_call_point =
        | To_ocaml of ocaml_node Direct_call_point.t 
        | To_foreign of foreign_node Direct_call_point.t 
        | To_uninstrumented of uninstrumented_node Direct_call_point.t 
      type classification =
        | Allocation of Allocation_point.t 
        | Direct_call of direct_call_point 
        | Indirect_call of Indirect_call_point.t 
      val classify : t -> classification
      val next : t -> t option
    end
    module Node :
    sig
      type t = ocaml_node[@@ocaml.doc
                           " A node corresponding to an invocation of a function written in\n          OCaml. "]
      val compare : t -> t -> int
      val function_identifier : t -> Function_identifier.t[@@ocaml.doc
                                                            " A unique identifier for the function corresponding to this node. "]
      val next_in_tail_call_chain : t -> t[@@ocaml.doc
                                            " This function traverses a circular list. "]
      val fields : t -> shape_table:Shape_table.t -> Field.t option
    end
  end
  module Foreign :
  sig
    module Allocation_point :
    sig
      type t[@@ocaml.doc
              " A value of type [t] corresponds to an allocation point in non-OCaml\n          code. "]
      val program_counter : t -> Program_counter.Foreign.t
      val annotation : t -> Annotation.t
      val num_words_including_headers : t -> int
    end
    module Call_point :
    sig
      type t[@@ocaml.doc
              " A value of type [t] corresponds to a call point from non-OCaml\n          code (to either non-OCaml code, or OCaml code via the usual\n          assembly veneer).  Call counts are not available for such nodes. "]
      val call_site : t -> Program_counter.Foreign.t[@@ocaml.doc
                                                      " N.B. The address of the callee (of type [Function_entry_point.t]) is\n          not available.  It must be recovered during post-processing. "]
      val callee_node : t -> node
    end
    module Field :
    sig
      type t[@@ocaml.doc
              " A value of type [t] enables iteration through the contents (\"fields\")\n          of a C node. "]
      type classification = private
        | Allocation of Allocation_point.t 
        | Call of Call_point.t 
      val classify : t -> classification
      val next : t -> t option
    end
    module Node :
    sig
      type t = foreign_node[@@ocaml.doc
                             " A node corresponding to an invocation of a function written in C\n          (or any other language that is not OCaml). "]
      val compare : t -> t -> int
      val fields : t -> Field.t option
    end
  end
  module Node :
  sig
    type t = node[@@ocaml.doc
                   " Either an OCaml or a foreign node; or an indication that this\n        is a branch of the graph corresponding to uninstrumented\n        code. "]
    val compare : t -> t -> int
    type classification = private
      | OCaml of OCaml.Node.t 
      | Foreign of Foreign.Node.t 
    val classify : t -> classification
    val of_ocaml_node : OCaml.Node.t -> t
    val of_foreign_node : Foreign.Node.t -> t
    module Set : Set.S with type  elt =  t
    module Map : Map.S with type  key =  t
  end
  val root : t -> Node.t option[@@ocaml.doc
                                 " Obtains the root of the graph for traversal.  [None] is returned if\n      the graph is empty. "]
end
module Heap_snapshot :
sig
  type t
  type heap_snapshot = t
  module Entries :
  sig
    type t[@@ocaml.doc
            " An immutable array of the total number of blocks (= boxed\n        values) and the total number of words occupied by such blocks\n        (including their headers) for each profiling annotation in\n        the heap. "]
    val length : t -> int
    val annotation : t -> int -> Annotation.t
    val num_blocks : t -> int -> int
    val num_words_including_headers : t -> int -> int
  end
  val timestamp : t -> float[@@ocaml.doc
                              " The timestamp of a snapshot.  The units are as for [Sys.time]\n      (unless custom timestamps are being provided, cf. the [Spacetime] module\n      in the standard library). "]
  val gc_stats : t -> Gc_stats.t
  val entries : t -> Entries.t
  val words_scanned : t -> int
  val words_scanned_with_profinfo : t -> int
  module Total_allocation :
  sig
    type t
    val annotation : t -> Annotation.t
    val num_words_including_headers : t -> int
    val next : t -> t option
  end
  val total_allocations : t -> Total_allocation.t option[@@ocaml.doc
                                                          " Total allocations across *all threads*. "]
  module Event :
  sig type t val event_name : t -> string val timestamp : t -> float end
  module Series :
  sig
    type t
    val read : path:string -> t[@@ocaml.doc
                                 " At present, the [Trace.t] associated with a [Series.t] cannot be\n        garbage collected or freed.  This should not be a problem, since\n        the intention is that a post-processor reads the trace and outputs\n        another format. "]
    val time_of_writer_close : t -> float
    val num_threads : t -> int
    type trace_kind =
      | Normal 
      | Finaliser 
    val trace : t -> kind:trace_kind -> thread_index:int -> Trace.t option
    val frame_table : t -> Frame_table.t
    val shape_table : t -> Shape_table.t
    val num_snapshots : t -> int
    val snapshot : t -> index:int -> heap_snapshot
    val events : t -> Event.t list
    val has_call_counts : t -> bool[@@ocaml.doc
                                     " Returns [true] iff call count information was recorded in the\n        series. "]
  end
end

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.text
  " Access to the information recorded by the [Spacetime]\n    module.  (It is intended that this module will be used by\n    post-processors rather than users wishing to understand their\n    programs.)\n    For 64-bit targets only.\n    This module may be used from any program, not just one compiled\n    with a compiler configured for Spacetime. "]

module Gc_stats :
sig
  type t
    
  val minor_words : t -> int
  
  val promoted_words : t -> int
  
  val major_words : t -> int
  
  val minor_collections : t -> int
  
  val major_collections : t -> int
  
  val heap_words : t -> int
  
  val heap_chunks : t -> int
  
  val compactions : t -> int
  
  val top_heap_words : t -> int
  
end

module Annotation :
sig
  type t[@@ocaml.doc
          " An annotation written into a value's header.  These may be looked up\n      in a [Trace.t] (see below). "]
    
  val to_int : t -> int
  
end

module Program_counter :
sig
  module OCaml : sig type t
                      val to_int64 : t -> Int64.t
                    end
  module Foreign : sig type t
                        val to_int64 : t -> Int64.t
                      end
end

module Frame_table :
sig
  type t[@@ocaml.doc
          " A value of type [t] corresponds to the frame table of a running\n      OCaml program.  The table is indexed by program counter address\n      (typically, but not always when using Spacetime, return addresses). "]
    
  val find_exn : Program_counter.OCaml.t -> t -> Printexc.Slot.t list
  [@@ocaml.doc
    " Find the location, including any inlined frames, corresponding to the\n      given program counter address.  Raises [Not_found] if the location\n      could not be resolved. "]
  
end

module Function_entry_point : sig type t
                                   val to_int64 : t -> Int64.t
                                 end

module Function_identifier : sig type t
                                  val to_int64 : t -> Int64.t
                                end

module Shape_table : sig type t
                          end

module Trace :
sig
  type t[@@ocaml.doc
          " A value of type [t] holds the dynamic call structure of the program\n      (i.e. which functions have called which other functions) together with\n      information required to decode profiling annotations written into\n      values' headers. "]
    
  type trace = t
    
  type node
    
  type ocaml_node
    
  type foreign_node
    
  type uninstrumented_node
    
  module OCaml :
  sig
    module Allocation_point :
    sig
      type t[@@ocaml.doc
              " A value of type [t] corresponds to an allocation point in OCaml\n          code. "]
        
      val program_counter : t -> Program_counter.OCaml.t[@@ocaml.doc
                                                          " The program counter at (or close to) the allocation site. "]
      
      val annotation : t -> Annotation.t[@@ocaml.doc
                                          " The annotation written into the headers of boxed values allocated\n          at the given allocation site. "]
      
      val num_words_including_headers : t -> int[@@ocaml.doc
                                                  " The total number of words allocated at this point. "]
      
    end
    module Direct_call_point :
    sig
      type 'target t[@@ocaml.doc
                      " A value of type ['target t] corresponds to a direct (i.e. known\n          at compile time) call point in OCaml code.  ['target] is the type\n          of the node corresponding to the callee. "]
        
      val call_site : _ t -> Program_counter.OCaml.t[@@ocaml.doc
                                                      " The program counter at (or close to) the call site. "]
      
      val callee : _ t -> Function_entry_point.t[@@ocaml.doc
                                                  " The address of the first instruction of the callee. "]
      
      val callee_node : 'target t -> 'target[@@ocaml.doc
                                              " The node corresponding to the callee. "]
      
      val call_count : _ t -> int option[@@ocaml.doc
                                          " The number of times the callee was called.  Only available if the\n          compiler that recorded the Spacetime profile was configured with\n          \"-with-spacetime-call-counts\".  [None] will be returned otherwise. "]
      
    end
    module Indirect_call_point :
    sig
      type t[@@ocaml.doc
              " A value of type [t] corresponds to an indirect call point in OCaml\n          code.  Each such value contains a list of callees to which the\n          call point has branched. "]
        
      val call_site : t -> Program_counter.OCaml.t[@@ocaml.doc
                                                    " The program counter at (or close to) the call site. "]
      
      module Callee :
      sig
        type t
          
        val callee : t -> Function_entry_point.t[@@ocaml.doc
                                                  " The address of the first instruction of the callee. "]
        
        val callee_node : t -> node[@@ocaml.doc
                                     " The node corresponding to the callee. "]
        
        val call_count : t -> int option[@@ocaml.doc
                                          " The number of times the callee was called.  This returns [None] in\n            the same circumstances as [Direct_call_point.call_count], above. "]
        
        val next : t -> t option[@@ocaml.doc
                                  " Move to the next callee to which this call point has branched.\n            [None] is returned when the end of the list is reached. "]
        
      end
      val callees : t -> Callee.t option[@@ocaml.doc
                                          " The list of callees to which this indirect call point has\n          branched. "]
      
    end
    module Field :
    sig
      type t[@@ocaml.doc
              " A value of type [t] enables iteration through the contents\n          (\"fields\") of an OCaml node. "]
        
      type direct_call_point =
      | To_ocaml of ocaml_node Direct_call_point.t 
      | To_foreign of foreign_node Direct_call_point.t 
      | To_uninstrumented of uninstrumented_node Direct_call_point.t 
        
      type classification =
      | Allocation of Allocation_point.t 
      | Direct_call of direct_call_point 
      | Indirect_call of Indirect_call_point.t 
        
      val classify : t -> classification
      
      val next : t -> t option
      
    end
    module Node :
    sig
      type t = ocaml_node[@@ocaml.doc
                           " A node corresponding to an invocation of a function written in\n          OCaml. "]
        
      val compare : t -> t -> int
      
      val function_identifier : t -> Function_identifier.t[@@ocaml.doc
                                                            " A unique identifier for the function corresponding to this node. "]
      
      val next_in_tail_call_chain : t -> t[@@ocaml.doc
                                            " This function traverses a circular list. "]
      
      val fields : t -> shape_table:Shape_table.t -> Field.t option
      
    end
  end
  module Foreign :
  sig
    module Allocation_point :
    sig
      type t[@@ocaml.doc
              " A value of type [t] corresponds to an allocation point in non-OCaml\n          code. "]
        
      val program_counter : t -> Program_counter.Foreign.t
      
      val annotation : t -> Annotation.t
      
      val num_words_including_headers : t -> int
      
    end
    module Call_point :
    sig
      type t[@@ocaml.doc
              " A value of type [t] corresponds to a call point from non-OCaml\n          code (to either non-OCaml code, or OCaml code via the usual\n          assembly veneer).  Call counts are not available for such nodes. "]
        
      val call_site : t -> Program_counter.Foreign.t[@@ocaml.doc
                                                      " N.B. The address of the callee (of type [Function_entry_point.t]) is\n          not available.  It must be recovered during post-processing. "]
      
      val callee_node : t -> node
      
    end
    module Field :
    sig
      type t[@@ocaml.doc
              " A value of type [t] enables iteration through the contents (\"fields\")\n          of a C node. "]
        
      type classification = private
      | Allocation of Allocation_point.t 
      | Call of Call_point.t 
        
      val classify : t -> classification
      
      val next : t -> t option
      
    end
    module Node :
    sig
      type t = foreign_node[@@ocaml.doc
                             " A node corresponding to an invocation of a function written in C\n          (or any other language that is not OCaml). "]
        
      val compare : t -> t -> int
      
      val fields : t -> Field.t option
      
    end
  end
  module Node :
  sig
    type t = node[@@ocaml.doc
                   " Either an OCaml or a foreign node; or an indication that this\n        is a branch of the graph corresponding to uninstrumented\n        code. "]
      
    val compare : t -> t -> int
    
    type classification = private
    | OCaml of OCaml.Node.t 
    | Foreign of Foreign.Node.t 
      
    val classify : t -> classification
    
    val of_ocaml_node : OCaml.Node.t -> t
    
    val of_foreign_node : Foreign.Node.t -> t
    
    module Set : Set.S with type  elt =  t
    module Map : Map.S with type  key =  t
  end
  val root : t -> Node.t option[@@ocaml.doc
                                 " Obtains the root of the graph for traversal.  [None] is returned if\n      the graph is empty. "]
  
end

module Heap_snapshot :
sig
  type t
    
  type heap_snapshot = t
    
  module Entries :
  sig
    type t[@@ocaml.doc
            " An immutable array of the total number of blocks (= boxed\n        values) and the total number of words occupied by such blocks\n        (including their headers) for each profiling annotation in\n        the heap. "]
      
    val length : t -> int
    
    val annotation : t -> int -> Annotation.t
    
    val num_blocks : t -> int -> int
    
    val num_words_including_headers : t -> int -> int
    
  end
  val timestamp : t -> float[@@ocaml.doc
                              " The timestamp of a snapshot.  The units are as for [Sys.time]\n      (unless custom timestamps are being provided, cf. the [Spacetime] module\n      in the standard library). "]
  
  val gc_stats : t -> Gc_stats.t
  
  val entries : t -> Entries.t
  
  val words_scanned : t -> int
  
  val words_scanned_with_profinfo : t -> int
  
  module Total_allocation :
  sig
    type t
      
    val annotation : t -> Annotation.t
    
    val num_words_including_headers : t -> int
    
    val next : t -> t option
    
  end
  val total_allocations : t -> Total_allocation.t option[@@ocaml.doc
                                                          " Total allocations across *all threads*. "]
  
  module Event :
  sig type t
       val event_name : t -> string
     val timestamp : t -> float
     end
  module Series :
  sig
    type t
      
    val read : path:string -> t[@@ocaml.doc
                                 " At present, the [Trace.t] associated with a [Series.t] cannot be\n        garbage collected or freed.  This should not be a problem, since\n        the intention is that a post-processor reads the trace and outputs\n        another format. "]
    
    val time_of_writer_close : t -> float
    
    val num_threads : t -> int
    
    type trace_kind =
    | Normal 
    | Finaliser 
      
    val trace : t -> kind:trace_kind -> thread_index:int -> Trace.t option
    
    val frame_table : t -> Frame_table.t
    
    val shape_table : t -> Shape_table.t
    
    val num_snapshots : t -> int
    
    val snapshot : t -> index:int -> heap_snapshot
    
    val events : t -> Event.t list
    
    val has_call_counts : t -> bool[@@ocaml.doc
                                     " Returns [true] iff call count information was recorded in the\n        series. "]
    
  end
end
File "raw_spacetime_lib.mli", line 111, characters 11-12:
Error: Multiple definitions of type t
