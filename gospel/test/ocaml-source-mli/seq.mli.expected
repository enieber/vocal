
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.text " {1 Functional Iterators} "]
[@@@ocaml.text
  " The type ['a t] is a {b delayed list}, i.e. a list where some evaluation\n    is needed to access the next element. This makes it possible to build\n    infinite sequences, to build sequences as we traverse them, and to transform\n    them in a lazy fashion rather than upfront.\n"]
[@@@ocaml.text " @since 4.07 "]
type 'a t = unit -> 'a node[@@ocaml.doc
                             " The type of delayed lists containing elements of type ['a].\n    Note that the concrete list node ['a node] is delayed under a closure,\n    not a [lazy] block, which means it might be recomputed every time\n    we access it. "]
and +'a node =
  | Nil 
  | Cons of 'a * 'a t
  [@ocaml.doc
    " A fully-evaluated list node, either empty or containing an element\n    and a delayed tail. "]
val empty : 'a t[@@ocaml.doc " The empty sequence, containing no elements. "]
val return : 'a -> 'a t[@@ocaml.doc
                         " The singleton sequence containing only the given element. "]
val map : ('a -> 'b) -> 'a t -> 'b t[@@ocaml.doc
                                      " [map f seq] returns a new sequence whose elements are the elements of\n    [seq], transformed by [f].\n    This transformation is lazy, it only applies when the result is traversed.\n\n    If [seq = [1;2;3]], then [map f seq = [f 1; f 2; f 3]]. "]
val filter : ('a -> bool) -> 'a t -> 'a t[@@ocaml.doc
                                           " Remove from the sequence the elements that do not satisfy the\n    given predicate.\n    This transformation is lazy, it only applies when the result is\n    traversed. "]
val filter_map : ('a -> 'b option) -> 'a t -> 'b t[@@ocaml.doc
                                                    " Apply the function to every element; if [f x = None] then [x] is dropped;\n    if [f x = Some y] then [y] is returned.\n    This transformation is lazy, it only applies when the result is\n    traversed. "]
val flat_map : ('a -> 'b t) -> 'a t -> 'b t[@@ocaml.doc
                                             " Map each element to a subsequence, then return each element of this\n    sub-sequence in turn.\n    This transformation is lazy, it only applies when the result is\n    traversed. "]
val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b t -> 'a[@@ocaml.doc
                                                      " Traverse the sequence from left to right, combining each element with the\n    accumulator using the given function.\n    The traversal happens immediately and will not terminate on infinite\n    sequences.\n\n    Also see {!List.fold_left} "]
val iter : ('a -> unit) -> 'a t -> unit[@@ocaml.doc
                                         " Iterate on the sequence, calling the (imperative) function on every element.\n    The traversal happens immediately and will not terminate on infinite\n    sequences. "]

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.text " {1 Functional Iterators} "]

[@@@ocaml.text
  " The type ['a t] is a {b delayed list}, i.e. a list where some evaluation\n    is needed to access the next element. This makes it possible to build\n    infinite sequences, to build sequences as we traverse them, and to transform\n    them in a lazy fashion rather than upfront.\n"]

[@@@ocaml.text " @since 4.07 "]

type 'a t = unit -> 'a node[@@ocaml.doc
                             " The type of delayed lists containing elements of type ['a].\n    Note that the concrete list node ['a node] is delayed under a closure,\n    not a [lazy] block, which means it might be recomputed every time\n    we access it. "]
  
and +'a node =
| Nil 
| Cons of 'a * 'a t
[@ocaml.doc
  " A fully-evaluated list node, either empty or containing an element\n    and a delayed tail. "]
  

val empty : 'a t[@@ocaml.doc " The empty sequence, containing no elements. "]


val return : 'a -> 'a t[@@ocaml.doc
                         " The singleton sequence containing only the given element. "]


val map : ('a -> 'b) -> 'a t -> 'b t[@@ocaml.doc
                                      " [map f seq] returns a new sequence whose elements are the elements of\n    [seq], transformed by [f].\n    This transformation is lazy, it only applies when the result is traversed.\n\n    If [seq = [1;2;3]], then [map f seq = [f 1; f 2; f 3]]. "]


val filter : ('a -> bool) -> 'a t -> 'a t[@@ocaml.doc
                                           " Remove from the sequence the elements that do not satisfy the\n    given predicate.\n    This transformation is lazy, it only applies when the result is\n    traversed. "]


val filter_map : ('a -> 'b option) -> 'a t -> 'b t[@@ocaml.doc
                                                    " Apply the function to every element; if [f x = None] then [x] is dropped;\n    if [f x = Some y] then [y] is returned.\n    This transformation is lazy, it only applies when the result is\n    traversed. "]


val flat_map : ('a -> 'b t) -> 'a t -> 'b t[@@ocaml.doc
                                             " Map each element to a subsequence, then return each element of this\n    sub-sequence in turn.\n    This transformation is lazy, it only applies when the result is\n    traversed. "]


val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b t -> 'a[@@ocaml.doc
                                                      " Traverse the sequence from left to right, combining each element with the\n    accumulator using the given function.\n    The traversal happens immediately and will not terminate on infinite\n    sequences.\n\n    Also see {!List.fold_left} "]


val iter : ('a -> unit) -> 'a t -> unit[@@ocaml.doc
                                         " Iterate on the sequence, calling the (imperative) function on every element.\n    The traversal happens immediately and will not terminate on infinite\n    sequences. "]

gospel: internal error, uncaught exception:
        File "gospel/src/typing.ml", line 425, characters 7-13: Assertion failed
        
