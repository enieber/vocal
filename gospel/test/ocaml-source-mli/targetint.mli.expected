
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.text
  " Target processor-native integers.\n\n   This module provides operations on the type of\n   signed 32-bit integers (on 32-bit target platforms) or\n   signed 64-bit integers (on 64-bit target platforms).\n   This integer type has exactly the same width as that of a\n   pointer type in the C compiler.  All arithmetic operations over\n   are taken modulo 2{^32} or 2{^64} depending\n   on the word size of the target architecture.\n\n  {b Warning:} this module is unstable and part of\n  {{!Compiler_libs}compiler-libs}.\n\n"]
type t[@@ocaml.doc " The type of target integers. "]
val zero : t[@@ocaml.doc " The target integer 0."]
val one : t[@@ocaml.doc " The target integer 1."]
val minus_one : t[@@ocaml.doc " The target integer -1."]
val neg : t -> t[@@ocaml.doc " Unary negation. "]
val add : t -> t -> t[@@ocaml.doc " Addition. "]
val sub : t -> t -> t[@@ocaml.doc " Subtraction. "]
val mul : t -> t -> t[@@ocaml.doc " Multiplication. "]
val div : t -> t -> t[@@ocaml.doc
                       " Integer division.  Raise [Division_by_zero] if the second\n   argument is zero.  This division rounds the real quotient of\n   its arguments towards zero, as specified for {!Stdlib.(/)}. "]
val rem : t -> t -> t[@@ocaml.doc
                       " Integer remainder.  If [y] is not zero, the result\n   of [Targetint.rem x y] satisfies the following properties:\n   [Targetint.zero <= Nativeint.rem x y < Targetint.abs y] and\n   [x = Targetint.add (Targetint.mul (Targetint.div x y) y)\n                      (Targetint.rem x y)].\n   If [y = 0], [Targetint.rem x y] raises [Division_by_zero]. "]
val succ : t -> t[@@ocaml.doc
                   " Successor.\n   [Targetint.succ x] is [Targetint.add x Targetint.one]. "]
val pred : t -> t[@@ocaml.doc
                   " Predecessor.\n   [Targetint.pred x] is [Targetint.sub x Targetint.one]. "]
val abs : t -> t[@@ocaml.doc " Return the absolute value of its argument. "]
val size : int[@@ocaml.doc " The size in bits of a target native integer. "]
val max_int : t[@@ocaml.doc
                 " The greatest representable target integer,\n    either 2{^31} - 1 on a 32-bit platform,\n    or 2{^63} - 1 on a 64-bit platform. "]
val min_int : t[@@ocaml.doc
                 " The smallest representable target integer,\n   either -2{^31} on a 32-bit platform,\n   or -2{^63} on a 64-bit platform. "]
val logand : t -> t -> t[@@ocaml.doc " Bitwise logical and. "]
val logor : t -> t -> t[@@ocaml.doc " Bitwise logical or. "]
val logxor : t -> t -> t[@@ocaml.doc " Bitwise logical exclusive or. "]
val lognot : t -> t[@@ocaml.doc " Bitwise logical negation. "]
val shift_left : t -> int -> t[@@ocaml.doc
                                " [Targetint.shift_left x y] shifts [x] to the left by [y] bits.\n    The result is unspecified if [y < 0] or [y >= bitsize],\n    where [bitsize] is [32] on a 32-bit platform and\n    [64] on a 64-bit platform. "]
val shift_right : t -> int -> t[@@ocaml.doc
                                 " [Targetint.shift_right x y] shifts [x] to the right by [y] bits.\n    This is an arithmetic shift: the sign bit of [x] is replicated\n    and inserted in the vacated bits.\n    The result is unspecified if [y < 0] or [y >= bitsize]. "]
val shift_right_logical : t -> int -> t[@@ocaml.doc
                                         " [Targetint.shift_right_logical x y] shifts [x] to the right\n    by [y] bits.\n    This is a logical shift: zeroes are inserted in the vacated bits\n    regardless of the sign of [x].\n    The result is unspecified if [y < 0] or [y >= bitsize]. "]
val of_int : int -> t[@@ocaml.doc
                       " Convert the given integer (type [int]) to a target integer\n    (type [t]), module the target word size. "]
val of_int_exn : int -> t[@@ocaml.doc
                           " Convert the given integer (type [int]) to a target integer\n    (type [t]).  Raises a fatal error if the conversion is not exact. "]
val to_int : t -> int[@@ocaml.doc
                       " Convert the given target integer (type [t]) to an\n    integer (type [int]).  The high-order bit is lost during\n    the conversion. "]
val of_float : float -> t[@@ocaml.doc
                           " Convert the given floating-point number to a target integer,\n   discarding the fractional part (truncate towards 0).\n   The result of the conversion is undefined if, after truncation,\n   the number is outside the range\n   \\[{!Targetint.min_int}, {!Targetint.max_int}\\]. "]
val to_float : t -> float[@@ocaml.doc
                           " Convert the given target integer to a floating-point number. "]
val of_int32 : int32 -> t[@@ocaml.doc
                           " Convert the given 32-bit integer (type [int32])\n    to a target integer. "]
val to_int32 : t -> int32[@@ocaml.doc
                           " Convert the given target integer to a\n    32-bit integer (type [int32]).  On 64-bit platforms,\n    the 64-bit native integer is taken modulo 2{^32},\n    i.e. the top 32 bits are lost.  On 32-bit platforms,\n    the conversion is exact. "]
val of_int64 : int64 -> t[@@ocaml.doc
                           " Convert the given 64-bit integer (type [int64])\n    to a target integer. "]
val to_int64 : t -> int64[@@ocaml.doc
                           " Convert the given target integer to a\n    64-bit integer (type [int64]). "]
val of_string : string -> t[@@ocaml.doc
                             " Convert the given string to a target integer.\n    The string is read in decimal (by default) or in hexadecimal,\n    octal or binary if the string begins with [0x], [0o] or [0b]\n    respectively.\n    Raise [Failure \"int_of_string\"] if the given string is not\n    a valid representation of an integer, or if the integer represented\n    exceeds the range of integers representable in type [nativeint]. "]
val to_string : t -> string[@@ocaml.doc
                             " Return the string representation of its argument, in decimal. "]
val compare : t -> t -> int[@@ocaml.doc
                             " The comparison function for target integers, with the same specification as\n    {!Stdlib.compare}.  Along with the type [t], this function [compare]\n    allows the module [Targetint] to be passed as argument to the functors\n    {!Set.Make} and {!Map.Make}. "]
val equal : t -> t -> bool[@@ocaml.doc
                            " The equal function for target ints. "]
type repr =
  | Int32 of int32 
  | Int64 of int64 
val repr : t -> repr[@@ocaml.doc
                      " The concrete representation of a native integer. "]

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.text
  " Target processor-native integers.\n\n   This module provides operations on the type of\n   signed 32-bit integers (on 32-bit target platforms) or\n   signed 64-bit integers (on 64-bit target platforms).\n   This integer type has exactly the same width as that of a\n   pointer type in the C compiler.  All arithmetic operations over\n   are taken modulo 2{^32} or 2{^64} depending\n   on the word size of the target architecture.\n\n  {b Warning:} this module is unstable and part of\n  {{!Compiler_libs}compiler-libs}.\n\n"]

type t[@@ocaml.doc " The type of target integers. "]
  

val zero : t[@@ocaml.doc " The target integer 0."]


val one : t[@@ocaml.doc " The target integer 1."]


val minus_one : t[@@ocaml.doc " The target integer -1."]


val neg : t -> t[@@ocaml.doc " Unary negation. "]


val add : t -> t -> t[@@ocaml.doc " Addition. "]


val sub : t -> t -> t[@@ocaml.doc " Subtraction. "]


val mul : t -> t -> t[@@ocaml.doc " Multiplication. "]


val div : t -> t -> t[@@ocaml.doc
                       " Integer division.  Raise [Division_by_zero] if the second\n   argument is zero.  This division rounds the real quotient of\n   its arguments towards zero, as specified for {!Stdlib.(/)}. "]


val rem : t -> t -> t[@@ocaml.doc
                       " Integer remainder.  If [y] is not zero, the result\n   of [Targetint.rem x y] satisfies the following properties:\n   [Targetint.zero <= Nativeint.rem x y < Targetint.abs y] and\n   [x = Targetint.add (Targetint.mul (Targetint.div x y) y)\n                      (Targetint.rem x y)].\n   If [y = 0], [Targetint.rem x y] raises [Division_by_zero]. "]


val succ : t -> t[@@ocaml.doc
                   " Successor.\n   [Targetint.succ x] is [Targetint.add x Targetint.one]. "]


val pred : t -> t[@@ocaml.doc
                   " Predecessor.\n   [Targetint.pred x] is [Targetint.sub x Targetint.one]. "]


val abs : t -> t[@@ocaml.doc " Return the absolute value of its argument. "]


val size : int[@@ocaml.doc " The size in bits of a target native integer. "]


val max_int : t[@@ocaml.doc
                 " The greatest representable target integer,\n    either 2{^31} - 1 on a 32-bit platform,\n    or 2{^63} - 1 on a 64-bit platform. "]


val min_int : t[@@ocaml.doc
                 " The smallest representable target integer,\n   either -2{^31} on a 32-bit platform,\n   or -2{^63} on a 64-bit platform. "]


val logand : t -> t -> t[@@ocaml.doc " Bitwise logical and. "]


val logor : t -> t -> t[@@ocaml.doc " Bitwise logical or. "]


val logxor : t -> t -> t[@@ocaml.doc " Bitwise logical exclusive or. "]


val lognot : t -> t[@@ocaml.doc " Bitwise logical negation. "]


val shift_left : t -> int -> t[@@ocaml.doc
                                " [Targetint.shift_left x y] shifts [x] to the left by [y] bits.\n    The result is unspecified if [y < 0] or [y >= bitsize],\n    where [bitsize] is [32] on a 32-bit platform and\n    [64] on a 64-bit platform. "]


val shift_right : t -> int -> t[@@ocaml.doc
                                 " [Targetint.shift_right x y] shifts [x] to the right by [y] bits.\n    This is an arithmetic shift: the sign bit of [x] is replicated\n    and inserted in the vacated bits.\n    The result is unspecified if [y < 0] or [y >= bitsize]. "]


val shift_right_logical : t -> int -> t[@@ocaml.doc
                                         " [Targetint.shift_right_logical x y] shifts [x] to the right\n    by [y] bits.\n    This is a logical shift: zeroes are inserted in the vacated bits\n    regardless of the sign of [x].\n    The result is unspecified if [y < 0] or [y >= bitsize]. "]


val of_int : int -> t[@@ocaml.doc
                       " Convert the given integer (type [int]) to a target integer\n    (type [t]), module the target word size. "]


val of_int_exn : int -> t[@@ocaml.doc
                           " Convert the given integer (type [int]) to a target integer\n    (type [t]).  Raises a fatal error if the conversion is not exact. "]


val to_int : t -> int[@@ocaml.doc
                       " Convert the given target integer (type [t]) to an\n    integer (type [int]).  The high-order bit is lost during\n    the conversion. "]


val of_float : float -> t[@@ocaml.doc
                           " Convert the given floating-point number to a target integer,\n   discarding the fractional part (truncate towards 0).\n   The result of the conversion is undefined if, after truncation,\n   the number is outside the range\n   \\[{!Targetint.min_int}, {!Targetint.max_int}\\]. "]


val to_float : t -> float[@@ocaml.doc
                           " Convert the given target integer to a floating-point number. "]


val of_int32 : int32 -> t[@@ocaml.doc
                           " Convert the given 32-bit integer (type [int32])\n    to a target integer. "]


val to_int32 : t -> int32[@@ocaml.doc
                           " Convert the given target integer to a\n    32-bit integer (type [int32]).  On 64-bit platforms,\n    the 64-bit native integer is taken modulo 2{^32},\n    i.e. the top 32 bits are lost.  On 32-bit platforms,\n    the conversion is exact. "]


val of_int64 : int64 -> t[@@ocaml.doc
                           " Convert the given 64-bit integer (type [int64])\n    to a target integer. "]


val to_int64 : t -> int64[@@ocaml.doc
                           " Convert the given target integer to a\n    64-bit integer (type [int64]). "]


val of_string : string -> t[@@ocaml.doc
                             " Convert the given string to a target integer.\n    The string is read in decimal (by default) or in hexadecimal,\n    octal or binary if the string begins with [0x], [0o] or [0b]\n    respectively.\n    Raise [Failure \"int_of_string\"] if the given string is not\n    a valid representation of an integer, or if the integer represented\n    exceeds the range of integers representable in type [nativeint]. "]


val to_string : t -> string[@@ocaml.doc
                             " Return the string representation of its argument, in decimal. "]


val compare : t -> t -> int[@@ocaml.doc
                             " The comparison function for target integers, with the same specification as\n    {!Stdlib.compare}.  Along with the type [t], this function [compare]\n    allows the module [Targetint] to be passed as argument to the functors\n    {!Set.Make} and {!Map.Make}. "]


val equal : t -> t -> bool[@@ocaml.doc
                            " The equal function for target ints. "]


type repr =
| Int32 of int32 
| Int64 of int64 
  

val repr : t -> repr[@@ocaml.doc
                      " The concrete representation of a native integer. "]

File "targetint.mli", line 188, characters 13-18:
Error: Symbol int32 not found
