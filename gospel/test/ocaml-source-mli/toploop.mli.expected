
*******************************
********** Parsed file ********
*******************************
open Format
val getvalue : string -> Obj.t
val setvalue : string -> Obj.t -> unit
val set_paths : unit -> unit
val loop : formatter -> unit
val run_script : formatter -> string -> string array -> bool
type directive_fun =
  | Directive_none of (unit -> unit) 
  | Directive_string of (string -> unit) 
  | Directive_int of (int -> unit) 
  | Directive_ident of (Longident.t -> unit) 
  | Directive_bool of (bool -> unit) 
type directive_info = {
  section: string ;
  doc: string }
val add_directive : string -> directive_fun -> directive_info -> unit
val directive_table : (string, directive_fun) Hashtbl.t
val directive_info_table : (string, directive_info) Hashtbl.t
val toplevel_env : Env.t ref
val initialize_toplevel_env : unit -> unit
val print_exception_outcome : formatter -> exn -> unit
val execute_phrase : bool -> formatter -> Parsetree.toplevel_phrase -> bool
val preprocess_phrase :
  formatter -> Parsetree.toplevel_phrase -> Parsetree.toplevel_phrase
val use_file : formatter -> string -> bool
val use_silently : formatter -> string -> bool
val mod_use_file : formatter -> string -> bool
val eval_path : Env.t -> Path.t -> Obj.t
val record_backtrace : unit -> unit
val print_value : Env.t -> Obj.t -> formatter -> Types.type_expr -> unit
val print_untyped_exception : formatter -> Obj.t -> unit
type ('a, 'b) gen_printer =
  | Zero of 'b 
  | Succ of ('a -> ('a, 'b) gen_printer) 
val install_printer :
  Path.t -> Types.type_expr -> (formatter -> Obj.t -> unit) -> unit
val install_generic_printer :
  Path.t ->
    Path.t ->
      (int ->
         (int -> Obj.t -> Outcometree.out_value,
           Obj.t -> Outcometree.out_value) gen_printer)
        -> unit
val install_generic_printer' :
  Path.t ->
    Path.t ->
      (formatter -> Obj.t -> unit, formatter -> Obj.t -> unit) gen_printer ->
        unit
val remove_printer : Path.t -> unit
val max_printer_depth : int ref
val max_printer_steps : int ref
val parse_toplevel_phrase : (Lexing.lexbuf -> Parsetree.toplevel_phrase) ref
val parse_use_file : (Lexing.lexbuf -> Parsetree.toplevel_phrase list) ref
val print_location : formatter -> Location.t -> unit
val print_error : formatter -> Location.error -> unit
val print_warning : Location.t -> formatter -> Warnings.t -> unit
val input_name : string ref
val print_out_value : (formatter -> Outcometree.out_value -> unit) ref
val print_out_type : (formatter -> Outcometree.out_type -> unit) ref
val print_out_class_type :
  (formatter -> Outcometree.out_class_type -> unit) ref
val print_out_module_type :
  (formatter -> Outcometree.out_module_type -> unit) ref
val print_out_type_extension :
  (formatter -> Outcometree.out_type_extension -> unit) ref
val print_out_sig_item : (formatter -> Outcometree.out_sig_item -> unit) ref
val print_out_signature :
  (formatter -> Outcometree.out_sig_item list -> unit) ref
val print_out_phrase : (formatter -> Outcometree.out_phrase -> unit) ref
val read_interactive_input : (string -> bytes -> int -> (int * bool)) ref
val toplevel_startup_hook : (unit -> unit) ref
val may_trace : bool ref
val override_sys_argv : string array -> unit

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

open Format

val getvalue : string -> Obj.t


val setvalue : string -> Obj.t -> unit


val set_paths : unit -> unit


val loop : formatter -> unit


val run_script : formatter -> string -> string array -> bool


type directive_fun =
| Directive_none of (unit -> unit) 
| Directive_string of (string -> unit) 
| Directive_int of (int -> unit) 
| Directive_ident of (Longident.t -> unit) 
| Directive_bool of (bool -> unit) 
  

type directive_info = {
section: string ;
doc: string }
  

val add_directive : string -> directive_fun -> directive_info -> unit


val directive_table : (string, directive_fun) Hashtbl.t


val directive_info_table : (string, directive_info) Hashtbl.t


val toplevel_env : Env.t ref


val initialize_toplevel_env : unit -> unit


val print_exception_outcome : formatter -> exn -> unit


val execute_phrase : bool -> formatter -> Parsetree.toplevel_phrase -> bool


val preprocess_phrase :
  formatter -> Parsetree.toplevel_phrase -> Parsetree.toplevel_phrase


val use_file : formatter -> string -> bool


val use_silently : formatter -> string -> bool


val mod_use_file : formatter -> string -> bool


val eval_path : Env.t -> Path.t -> Obj.t


val record_backtrace : unit -> unit


val print_value : Env.t -> Obj.t -> formatter -> Types.type_expr -> unit


val print_untyped_exception : formatter -> Obj.t -> unit


type ('a, 'b) gen_printer =
| Zero of 'b 
| Succ of ('a -> ('a, 'b) gen_printer) 
  

val install_printer :
  Path.t -> Types.type_expr -> (formatter -> Obj.t -> unit) -> unit


val install_generic_printer :
  Path.t ->
    Path.t ->
      (int ->
         (int -> Obj.t -> Outcometree.out_value,
           Obj.t -> Outcometree.out_value) gen_printer)
        -> unit


val install_generic_printer' :
  Path.t ->
    Path.t ->
      (formatter -> Obj.t -> unit, formatter -> Obj.t -> unit) gen_printer ->
        unit


val remove_printer : Path.t -> unit


val max_printer_depth : int ref


val max_printer_steps : int ref


val parse_toplevel_phrase : (Lexing.lexbuf -> Parsetree.toplevel_phrase) ref


val parse_use_file : (Lexing.lexbuf -> Parsetree.toplevel_phrase list) ref


val print_location : formatter -> Location.t -> unit


val print_error : formatter -> Location.error -> unit


val print_warning : Location.t -> formatter -> Warnings.t -> unit


val input_name : string ref


val print_out_value : (formatter -> Outcometree.out_value -> unit) ref


val print_out_type : (formatter -> Outcometree.out_type -> unit) ref


val print_out_class_type :
  (formatter -> Outcometree.out_class_type -> unit) ref


val print_out_module_type :
  (formatter -> Outcometree.out_module_type -> unit) ref


val print_out_type_extension :
  (formatter -> Outcometree.out_type_extension -> unit) ref


val print_out_sig_item : (formatter -> Outcometree.out_sig_item -> unit) ref


val print_out_signature :
  (formatter -> Outcometree.out_sig_item list -> unit) ref


val print_out_phrase : (formatter -> Outcometree.out_phrase -> unit) ref


val read_interactive_input : (string -> bytes -> int -> (int * bool)) ref


val toplevel_startup_hook : (unit -> unit) ref


val may_trace : bool ref


val override_sys_argv : string array -> unit

gospel: internal error, uncaught exception:
        File "gospel/src/typing.ml", line 515, characters 22-28: Assertion failed
        
