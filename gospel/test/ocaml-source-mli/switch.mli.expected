
*******************************
********** Parsed file ********
*******************************
type 'a shared =
  | Shared of 'a 
  | Single of 'a 
type ('a, 'ctx) t_store =
  {
  act_get: unit -> 'a array ;
  act_get_shared: unit -> 'a shared array ;
  act_store: 'ctx -> 'a -> int ;
  act_store_shared: 'ctx -> 'a -> int }
exception Not_simple 
module type Stored  =
  sig
    type t
    type key
    val compare_key : key -> key -> int
    val make_key : t -> key option
  end
module type CtxStored  =
  sig include Stored type context val make_key : context -> t -> key option
  end
module CtxStore :
functor (A : CtxStored) ->
  sig val mk_store : unit -> (A.t, A.context) t_store end
module Store :
functor (A : Stored) -> sig val mk_store : unit -> (A.t, unit) t_store end
module type S  =
  sig
    type primitive
    val eqint : primitive
    val neint : primitive
    val leint : primitive
    val ltint : primitive
    val geint : primitive
    val gtint : primitive
    type act
    val bind : act -> (act -> act) -> act
    val make_const : int -> act
    val make_offset : act -> int -> act
    val make_prim : primitive -> act list -> act
    val make_isout : act -> act -> act
    val make_isin : act -> act -> act
    val make_if : act -> act -> act -> act
    val make_switch : Location.t -> act -> int array -> act array -> act
    val make_catch : act -> (int * (act -> act))
    val make_exit : int -> act
  end
module Make :
functor (Arg : S) ->
  sig
    val zyva :
      Location.t ->
        (int * int) ->
          Arg.act ->
            (int * int * int) array -> (Arg.act, _) t_store -> Arg.act
    val test_sequence :
      Arg.act -> (int * int * int) array -> (Arg.act, _) t_store -> Arg.act
  end

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

type 'a shared =
| Shared of 'a 
| Single of 'a 
  

type ('a, 'ctx) t_store =
{
act_get: unit -> 'a array ;
act_get_shared: unit -> 'a shared array ;
act_store: 'ctx -> 'a -> int ;
act_store_shared: 'ctx -> 'a -> int }
  

exception Not_simple 

module type Stored  =
  sig
    type t
      
    type key
      
    val compare_key : key -> key -> int
    
    val make_key : t -> key option
    
  end

module type CtxStored  =
  sig include Stored type context
       val make_key : context -> t -> key option
    
  end

module CtxStore :
functor (A : CtxStored) ->
  sig val mk_store : unit -> (A.t, A.context) t_store
     end

module Store :
functor (A : Stored) -> sig val mk_store : unit -> (A.t, unit) t_store
                           end

module type S  =
  sig
    type primitive
      
    val eqint : primitive
    
    val neint : primitive
    
    val leint : primitive
    
    val ltint : primitive
    
    val geint : primitive
    
    val gtint : primitive
    
    type act
      
    val bind : act -> (act -> act) -> act
    
    val make_const : int -> act
    
    val make_offset : act -> int -> act
    
    val make_prim : primitive -> act list -> act
    
    val make_isout : act -> act -> act
    
    val make_isin : act -> act -> act
    
    val make_if : act -> act -> act -> act
    
    val make_switch : Location.t -> act -> int array -> act array -> act
    
    val make_catch : act -> (int * (act -> act))
    
    val make_exit : int -> act
    
  end

module Make :
functor (Arg : S) ->
  sig
    val zyva :
      Location.t ->
        (int * int) ->
          Arg.act ->
            (int * int * int) array -> (Arg.act, _) t_store -> Arg.act
    
    val test_sequence :
      Arg.act -> (int * int * int) array -> (Arg.act, _) t_store -> Arg.act
    
  end
gospel: internal error, uncaught exception:
        File "gospel/ocaml-lib/typing.ml", line 425, characters 7-13: Assertion failed
        
