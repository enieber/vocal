
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.text
  " System interface.\n\n  Every function in this module raises [Sys_error] with an\n  informative message when the underlying system call signal\n  an error.\n"]
val argv : string array[@@ocaml.doc
                         " The command line arguments given to the process.\n   The first element is the command name used to invoke the program.\n   The following elements are the command-line arguments\n   given to the program. "]
val executable_name : string[@@ocaml.doc
                              " The name of the file containing the executable currently running.\n    This name may be absolute or relative to the current directory, depending\n    on the platform and whether the program was compiled to bytecode or a native\n    executable. "]
external file_exists : string -> bool = "caml_sys_file_exists"[@@ocaml.doc
                                                                " Test if a file with the given name exists. "]
external is_directory : string -> bool = "caml_sys_is_directory"[@@ocaml.doc
                                                                  " Returns [true] if the given name refers to a directory,\n    [false] if it refers to another kind of file.\n    Raise [Sys_error] if no file exists with the given name.\n    @since 3.10.0\n"]
external remove : string -> unit = "caml_sys_remove"[@@ocaml.doc
                                                      " Remove the given file name from the file system. "]
external rename : string -> string -> unit = "caml_sys_rename"[@@ocaml.doc
                                                                " Rename a file.  [rename oldpath newpath] renames the file\n    called [oldpath], giving it [newpath] as its new name,\n    moving it between directories if needed.  If [newpath] already\n    exists, its contents will be replaced with those of [oldpath].\n    Depending on the operating system, the metadata (permissions,\n    owner, etc) of [newpath] can either be preserved or be replaced by\n    those of [oldpath].\n   @since 4.06 concerning the \"replace existing file\" behavior "]
external getenv : string -> string = "caml_sys_getenv"[@@ocaml.doc
                                                        " Return the value associated to a variable in the process\n   environment. Raise [Not_found] if the variable is unbound. "]
val getenv_opt : string -> string option[@@ocaml.doc
                                          " Return the value associated to a variable in the process\n    environment or [None] if the variable is unbound.\n    @since 4.05\n"]
external command : string -> int = "caml_sys_system_command"[@@ocaml.doc
                                                              " Execute the given shell command and return its exit code. "]
external time :
  unit -> ((float)[@unboxed ]) = "caml_sys_time" "caml_sys_time_unboxed"
[@@noalloc ][@@ocaml.doc
              " Return the processor time, in seconds, used by the program\n   since the beginning of execution. "]
external chdir : string -> unit = "caml_sys_chdir"[@@ocaml.doc
                                                    " Change the current working directory of the process. "]
external getcwd : unit -> string = "caml_sys_getcwd"[@@ocaml.doc
                                                      " Return the current working directory of the process. "]
external readdir : string -> string array = "caml_sys_read_directory"
[@@ocaml.doc
  " Return the names of all files present in the given directory.\n   Names denoting the current directory and the parent directory\n   ([\".\"] and [\"..\"] in Unix) are not returned.  Each string in the\n   result is a file name rather than a complete path.  There is no\n   guarantee that the name strings in the resulting array will appear\n   in any specific order; they are not, in particular, guaranteed to\n   appear in alphabetical order. "]
val interactive : bool ref[@@ocaml.doc
                            " This reference is initially set to [false] in standalone\n   programs and to [true] if the code is being executed under\n   the interactive toplevel system [ocaml]. "]
val os_type : string[@@ocaml.doc
                      " Operating system currently executing the OCaml program. One of\n-  [\"Unix\"] (for all Unix versions, including Linux and Mac OS X),\n-  [\"Win32\"] (for MS-Windows, OCaml compiled with MSVC++ or Mingw),\n-  [\"Cygwin\"] (for MS-Windows, OCaml compiled with Cygwin). "]
type backend_type =
  | Native 
  | Bytecode 
  | Other of string [@@ocaml.doc
                      " Currently, the official distribution only supports [Native] and\n    [Bytecode], but it can be other backends with alternative\n    compilers, for example, javascript.\n\n    @since 4.04.0\n"]
val backend_type : backend_type[@@ocaml.doc
                                 " Backend type  currently executing the OCaml program.\n    @since 4.04.0\n "]
val unix : bool[@@ocaml.doc
                 " True if [Sys.os_type = \"Unix\"].\n    @since 4.01.0 "]
val win32 : bool[@@ocaml.doc
                  " True if [Sys.os_type = \"Win32\"].\n    @since 4.01.0 "]
val cygwin : bool[@@ocaml.doc
                   " True if [Sys.os_type = \"Cygwin\"].\n    @since 4.01.0 "]
val word_size : int[@@ocaml.doc
                     " Size of one word on the machine currently executing the OCaml\n    program, in bits: 32 or 64. "]
val int_size : int[@@ocaml.doc
                    " Size of [int], in bits. It is 31 (resp. 63) when using OCaml on a\n    32-bit (resp. 64-bit) platform. It may differ for other implementations,\n    e.g. it can be 32 bits when compiling to JavaScript.\n    @since 4.03.0 "]
val big_endian : bool[@@ocaml.doc
                       " Whether the machine currently executing the Caml program is big-endian.\n    @since 4.00.0 "]
val max_string_length : int[@@ocaml.doc
                             " Maximum length of strings and byte sequences. "]
val max_array_length : int[@@ocaml.doc
                            " Maximum length of a normal array.  The maximum length of a float\n    array is [max_array_length/2] on 32-bit machines and\n    [max_array_length] on 64-bit machines. "]
external runtime_variant : unit -> string = "caml_runtime_variant"[@@ocaml.doc
                                                                    " Return the name of the runtime variant the program is running on.\n    This is normally the argument given to [-runtime-variant] at compile\n    time, but for byte-code it can be changed after compilation.\n    @since 4.03.0 "]
external runtime_parameters : unit -> string = "caml_runtime_parameters"
[@@ocaml.doc
  " Return the value of the runtime parameters, in the same format\n    as the contents of the [OCAMLRUNPARAM] environment variable.\n    @since 4.03.0 "]
[@@@ocaml.text " {1 Signal handling} "]
type signal_behavior =
  | Signal_default 
  | Signal_ignore 
  | Signal_handle of (int -> unit) [@ocaml.doc " "][@@ocaml.doc
                                                     " What to do when receiving a signal:\n   - [Signal_default]: take the default behavior\n     (usually: abort the program)\n   - [Signal_ignore]: ignore the signal\n   - [Signal_handle f]: call function [f], giving it the signal\n   number as argument. "]
external signal :
  int -> signal_behavior -> signal_behavior = "caml_install_signal_handler"
[@@ocaml.doc
  " Set the behavior of the system on receipt of a given signal.  The\n   first argument is the signal number.  Return the behavior\n   previously associated with the signal. If the signal number is\n   invalid (or not available on your system), an [Invalid_argument]\n   exception is raised. "]
val set_signal : int -> signal_behavior -> unit[@@ocaml.doc
                                                 " Same as {!Sys.signal} but return value is ignored. "]
[@@@ocaml.text " {2 Signal numbers for the standard POSIX signals.} "]
val sigabrt : int[@@ocaml.doc " Abnormal termination "]
val sigalrm : int[@@ocaml.doc " Timeout "]
val sigfpe : int[@@ocaml.doc " Arithmetic exception "]
val sighup : int[@@ocaml.doc " Hangup on controlling terminal "]
val sigill : int[@@ocaml.doc " Invalid hardware instruction "]
val sigint : int[@@ocaml.doc " Interactive interrupt (ctrl-C) "]
val sigkill : int[@@ocaml.doc " Termination (cannot be ignored) "]
val sigpipe : int[@@ocaml.doc " Broken pipe "]
val sigquit : int[@@ocaml.doc " Interactive termination "]
val sigsegv : int[@@ocaml.doc " Invalid memory reference "]
val sigterm : int[@@ocaml.doc " Termination "]
val sigusr1 : int[@@ocaml.doc " Application-defined signal 1 "]
val sigusr2 : int[@@ocaml.doc " Application-defined signal 2 "]
val sigchld : int[@@ocaml.doc " Child process terminated "]
val sigcont : int[@@ocaml.doc " Continue "]
val sigstop : int[@@ocaml.doc " Stop "]
val sigtstp : int[@@ocaml.doc " Interactive stop "]
val sigttin : int[@@ocaml.doc " Terminal read from background process "]
val sigttou : int[@@ocaml.doc " Terminal write from background process "]
val sigvtalrm : int[@@ocaml.doc " Timeout in virtual time "]
val sigprof : int[@@ocaml.doc " Profiling interrupt "]
val sigbus : int[@@ocaml.doc " Bus error\n    @since 4.03 "]
val sigpoll : int[@@ocaml.doc " Pollable event\n    @since 4.03 "]
val sigsys : int[@@ocaml.doc " Bad argument to routine\n    @since 4.03 "]
val sigtrap : int[@@ocaml.doc " Trace/breakpoint trap\n    @since 4.03 "]
val sigurg : int[@@ocaml.doc " Urgent condition on socket\n    @since 4.03 "]
val sigxcpu : int[@@ocaml.doc " Timeout in cpu time\n    @since 4.03 "]
val sigxfsz : int[@@ocaml.doc " File size limit exceeded\n    @since 4.03 "]
exception Break
  [@ocaml.doc
    " Exception raised on interactive interrupt if {!Sys.catch_break}\n   is on. "]
val catch_break : bool -> unit[@@ocaml.doc
                                " [catch_break] governs whether interactive interrupt (ctrl-C)\n   terminates the program or raises the [Break] exception.\n   Call [catch_break true] to enable raising [Break],\n   and [catch_break false] to let the system\n   terminate the program on user interrupt. "]
val ocaml_version : string[@@ocaml.doc
                            " [ocaml_version] is the version of OCaml.\n    It is a string of the form [\"major.minor[.patchlevel][+additional-info]\"],\n    where [major], [minor], and [patchlevel] are integers, and\n    [additional-info] is an arbitrary string. The [[.patchlevel]] and\n    [[+additional-info]] parts may be absent. "]
val enable_runtime_warnings : bool -> unit[@@ocaml.doc
                                            " Control whether the OCaml runtime system can emit warnings\n    on stderr.  Currently, the only supported warning is triggered\n    when a channel created by [open_*] functions is finalized without\n    being closed.  Runtime warnings are enabled by default.\n\n    @since 4.03.0 "]
val runtime_warnings_enabled : unit -> bool[@@ocaml.doc
                                             " Return whether runtime warnings are currently enabled.\n\n    @since 4.03.0 "]
[@@@ocaml.text " {1 Optimization} "]
external opaque_identity : 'a -> 'a = "%opaque"[@@ocaml.doc
                                                 " For the purposes of optimization, [opaque_identity] behaves like an\n    unknown (and thus possibly side-effecting) function.\n\n    At runtime, [opaque_identity] disappears altogether.\n\n    A typical use of this function is to prevent pure computations from being\n    optimized away in benchmarking loops.  For example:\n    {[\n      for _round = 1 to 100_000 do\n        ignore (Sys.opaque_identity (my_pure_computation ()))\n      done\n    ]}\n\n    @since 4.03.0\n"]

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.text
  " System interface.\n\n  Every function in this module raises [Sys_error] with an\n  informative message when the underlying system call signal\n  an error.\n"]

val argv : string array[@@ocaml.doc
                         " The command line arguments given to the process.\n   The first element is the command name used to invoke the program.\n   The following elements are the command-line arguments\n   given to the program. "]


val executable_name : string[@@ocaml.doc
                              " The name of the file containing the executable currently running.\n    This name may be absolute or relative to the current directory, depending\n    on the platform and whether the program was compiled to bytecode or a native\n    executable. "]


external file_exists : string -> bool = "caml_sys_file_exists"[@@ocaml.doc
                                                                " Test if a file with the given name exists. "]


external is_directory : string -> bool = "caml_sys_is_directory"[@@ocaml.doc
                                                                  " Returns [true] if the given name refers to a directory,\n    [false] if it refers to another kind of file.\n    Raise [Sys_error] if no file exists with the given name.\n    @since 3.10.0\n"]


external remove : string -> unit = "caml_sys_remove"[@@ocaml.doc
                                                      " Remove the given file name from the file system. "]


external rename : string -> string -> unit = "caml_sys_rename"[@@ocaml.doc
                                                                " Rename a file.  [rename oldpath newpath] renames the file\n    called [oldpath], giving it [newpath] as its new name,\n    moving it between directories if needed.  If [newpath] already\n    exists, its contents will be replaced with those of [oldpath].\n    Depending on the operating system, the metadata (permissions,\n    owner, etc) of [newpath] can either be preserved or be replaced by\n    those of [oldpath].\n   @since 4.06 concerning the \"replace existing file\" behavior "]


external getenv : string -> string = "caml_sys_getenv"[@@ocaml.doc
                                                        " Return the value associated to a variable in the process\n   environment. Raise [Not_found] if the variable is unbound. "]


val getenv_opt : string -> string option[@@ocaml.doc
                                          " Return the value associated to a variable in the process\n    environment or [None] if the variable is unbound.\n    @since 4.05\n"]


external command : string -> int = "caml_sys_system_command"[@@ocaml.doc
                                                              " Execute the given shell command and return its exit code. "]


external time :
  unit -> ((float)[@unboxed ]) = "caml_sys_time" "caml_sys_time_unboxed"
[@@noalloc ][@@ocaml.doc
              " Return the processor time, in seconds, used by the program\n   since the beginning of execution. "]


external chdir : string -> unit = "caml_sys_chdir"[@@ocaml.doc
                                                    " Change the current working directory of the process. "]


external getcwd : unit -> string = "caml_sys_getcwd"[@@ocaml.doc
                                                      " Return the current working directory of the process. "]


external readdir : string -> string array = "caml_sys_read_directory"
[@@ocaml.doc
  " Return the names of all files present in the given directory.\n   Names denoting the current directory and the parent directory\n   ([\".\"] and [\"..\"] in Unix) are not returned.  Each string in the\n   result is a file name rather than a complete path.  There is no\n   guarantee that the name strings in the resulting array will appear\n   in any specific order; they are not, in particular, guaranteed to\n   appear in alphabetical order. "]


val interactive : bool ref[@@ocaml.doc
                            " This reference is initially set to [false] in standalone\n   programs and to [true] if the code is being executed under\n   the interactive toplevel system [ocaml]. "]


val os_type : string[@@ocaml.doc
                      " Operating system currently executing the OCaml program. One of\n-  [\"Unix\"] (for all Unix versions, including Linux and Mac OS X),\n-  [\"Win32\"] (for MS-Windows, OCaml compiled with MSVC++ or Mingw),\n-  [\"Cygwin\"] (for MS-Windows, OCaml compiled with Cygwin). "]


type backend_type =
| Native 
| Bytecode 
| Other of string [@@ocaml.doc
                    " Currently, the official distribution only supports [Native] and\n    [Bytecode], but it can be other backends with alternative\n    compilers, for example, javascript.\n\n    @since 4.04.0\n"]
  

val backend_type : backend_type[@@ocaml.doc
                                 " Backend type  currently executing the OCaml program.\n    @since 4.04.0\n "]


val unix : bool[@@ocaml.doc
                 " True if [Sys.os_type = \"Unix\"].\n    @since 4.01.0 "]


val win32 : bool[@@ocaml.doc
                  " True if [Sys.os_type = \"Win32\"].\n    @since 4.01.0 "]


val cygwin : bool[@@ocaml.doc
                   " True if [Sys.os_type = \"Cygwin\"].\n    @since 4.01.0 "]


val word_size : int[@@ocaml.doc
                     " Size of one word on the machine currently executing the OCaml\n    program, in bits: 32 or 64. "]


val int_size : int[@@ocaml.doc
                    " Size of [int], in bits. It is 31 (resp. 63) when using OCaml on a\n    32-bit (resp. 64-bit) platform. It may differ for other implementations,\n    e.g. it can be 32 bits when compiling to JavaScript.\n    @since 4.03.0 "]


val big_endian : bool[@@ocaml.doc
                       " Whether the machine currently executing the Caml program is big-endian.\n    @since 4.00.0 "]


val max_string_length : int[@@ocaml.doc
                             " Maximum length of strings and byte sequences. "]


val max_array_length : int[@@ocaml.doc
                            " Maximum length of a normal array.  The maximum length of a float\n    array is [max_array_length/2] on 32-bit machines and\n    [max_array_length] on 64-bit machines. "]


external runtime_variant : unit -> string = "caml_runtime_variant"[@@ocaml.doc
                                                                    " Return the name of the runtime variant the program is running on.\n    This is normally the argument given to [-runtime-variant] at compile\n    time, but for byte-code it can be changed after compilation.\n    @since 4.03.0 "]


external runtime_parameters : unit -> string = "caml_runtime_parameters"
[@@ocaml.doc
  " Return the value of the runtime parameters, in the same format\n    as the contents of the [OCAMLRUNPARAM] environment variable.\n    @since 4.03.0 "]


[@@@ocaml.text " {1 Signal handling} "]

type signal_behavior =
| Signal_default 
| Signal_ignore 
| Signal_handle of (int -> unit) [@ocaml.doc " "][@@ocaml.doc
                                                   " What to do when receiving a signal:\n   - [Signal_default]: take the default behavior\n     (usually: abort the program)\n   - [Signal_ignore]: ignore the signal\n   - [Signal_handle f]: call function [f], giving it the signal\n   number as argument. "]
  

external signal :
  int -> signal_behavior -> signal_behavior = "caml_install_signal_handler"
[@@ocaml.doc
  " Set the behavior of the system on receipt of a given signal.  The\n   first argument is the signal number.  Return the behavior\n   previously associated with the signal. If the signal number is\n   invalid (or not available on your system), an [Invalid_argument]\n   exception is raised. "]


val set_signal : int -> signal_behavior -> unit[@@ocaml.doc
                                                 " Same as {!Sys.signal} but return value is ignored. "]


[@@@ocaml.text " {2 Signal numbers for the standard POSIX signals.} "]

val sigabrt : int[@@ocaml.doc " Abnormal termination "]


val sigalrm : int[@@ocaml.doc " Timeout "]


val sigfpe : int[@@ocaml.doc " Arithmetic exception "]


val sighup : int[@@ocaml.doc " Hangup on controlling terminal "]


val sigill : int[@@ocaml.doc " Invalid hardware instruction "]


val sigint : int[@@ocaml.doc " Interactive interrupt (ctrl-C) "]


val sigkill : int[@@ocaml.doc " Termination (cannot be ignored) "]


val sigpipe : int[@@ocaml.doc " Broken pipe "]


val sigquit : int[@@ocaml.doc " Interactive termination "]


val sigsegv : int[@@ocaml.doc " Invalid memory reference "]


val sigterm : int[@@ocaml.doc " Termination "]


val sigusr1 : int[@@ocaml.doc " Application-defined signal 1 "]


val sigusr2 : int[@@ocaml.doc " Application-defined signal 2 "]


val sigchld : int[@@ocaml.doc " Child process terminated "]


val sigcont : int[@@ocaml.doc " Continue "]


val sigstop : int[@@ocaml.doc " Stop "]


val sigtstp : int[@@ocaml.doc " Interactive stop "]


val sigttin : int[@@ocaml.doc " Terminal read from background process "]


val sigttou : int[@@ocaml.doc " Terminal write from background process "]


val sigvtalrm : int[@@ocaml.doc " Timeout in virtual time "]


val sigprof : int[@@ocaml.doc " Profiling interrupt "]


val sigbus : int[@@ocaml.doc " Bus error\n    @since 4.03 "]


val sigpoll : int[@@ocaml.doc " Pollable event\n    @since 4.03 "]


val sigsys : int[@@ocaml.doc " Bad argument to routine\n    @since 4.03 "]


val sigtrap : int[@@ocaml.doc " Trace/breakpoint trap\n    @since 4.03 "]


val sigurg : int[@@ocaml.doc " Urgent condition on socket\n    @since 4.03 "]


val sigxcpu : int[@@ocaml.doc " Timeout in cpu time\n    @since 4.03 "]


val sigxfsz : int[@@ocaml.doc " File size limit exceeded\n    @since 4.03 "]


exception Break
  [@ocaml.doc
    " Exception raised on interactive interrupt if {!Sys.catch_break}\n   is on. "]

val catch_break : bool -> unit[@@ocaml.doc
                                " [catch_break] governs whether interactive interrupt (ctrl-C)\n   terminates the program or raises the [Break] exception.\n   Call [catch_break true] to enable raising [Break],\n   and [catch_break false] to let the system\n   terminate the program on user interrupt. "]


val ocaml_version : string[@@ocaml.doc
                            " [ocaml_version] is the version of OCaml.\n    It is a string of the form [\"major.minor[.patchlevel][+additional-info]\"],\n    where [major], [minor], and [patchlevel] are integers, and\n    [additional-info] is an arbitrary string. The [[.patchlevel]] and\n    [[+additional-info]] parts may be absent. "]


val enable_runtime_warnings : bool -> unit[@@ocaml.doc
                                            " Control whether the OCaml runtime system can emit warnings\n    on stderr.  Currently, the only supported warning is triggered\n    when a channel created by [open_*] functions is finalized without\n    being closed.  Runtime warnings are enabled by default.\n\n    @since 4.03.0 "]


val runtime_warnings_enabled : unit -> bool[@@ocaml.doc
                                             " Return whether runtime warnings are currently enabled.\n\n    @since 4.03.0 "]


[@@@ocaml.text " {1 Optimization} "]

external opaque_identity : 'a -> 'a = "%opaque"[@@ocaml.doc
                                                 " For the purposes of optimization, [opaque_identity] behaves like an\n    unknown (and thus possibly side-effecting) function.\n\n    At runtime, [opaque_identity] disappears altogether.\n\n    A typical use of this function is to prevent pure computations from being\n    optimized away in benchmarking loops.  For example:\n    {[\n      for _round = 1 to 100_000 do\n        ignore (Sys.opaque_identity (my_pure_computation ()))\n      done\n    ]}\n\n    @since 4.03.0\n"]

gospel: internal error, uncaught exception:
        File "gospel/ocaml-lib/typing.ml", line 425, characters 7-13: Assertion failed
        
