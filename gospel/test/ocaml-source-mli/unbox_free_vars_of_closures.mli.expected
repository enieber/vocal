
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.text
  " When approximations of free variables of closures indicate that they\n    are closures or blocks, rewrite projections from such blocks to new\n    variables (which become free in the closures), with the defining\n    expressions of the projections lifted out of the corresponding sets\n    of closures. "]
val run :
  env:Inline_and_simplify_aux.Env.t ->
    set_of_closures:Flambda.set_of_closures ->
      (Flambda.expr * Inlining_cost.Benefit.t) option

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.text
  " When approximations of free variables of closures indicate that they\n    are closures or blocks, rewrite projections from such blocks to new\n    variables (which become free in the closures), with the defining\n    expressions of the projections lifted out of the corresponding sets\n    of closures. "]

val run :
  env:Inline_and_simplify_aux.Env.t ->
    set_of_closures:Flambda.set_of_closures ->
      (Flambda.expr * Inlining_cost.Benefit.t) option


*******************************
********* Typed GOSPEL ********
*******************************
module unbox_free_vars_of_closures.mli

  Namespace: unbox_free_vars_of_closures.mli
    Type symbols
      
    Logic Symbols
      
    Exception Symbols
      
    Namespaces
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    [@@@ocaml.text
      " When approximations of free variables of closures indicate that they\n    are closures or blocks, rewrite projections from such blocks to new\n    variables (which become free in the closures), with the defining\n    expressions of the projections lifted out of the corresponding sets\n    of closures. "]
    
    val run :
    env:Inline_and_simplify_aux.Env.t ->
      set_of_closures:Flambda.set_of_closures ->
        (Flambda.expr * Inlining_cost.Benefit.t) option
    


*** OK ***

