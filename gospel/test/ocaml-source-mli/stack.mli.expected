
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.text
  " Last-in first-out stacks.\n\n   This module implements stacks (LIFOs), with in-place modification.\n"]
type 'a t[@@ocaml.doc
           " The type of stacks containing elements of type ['a]. "]
exception Empty
  [@ocaml.doc
    " Raised when {!Stack.pop} or {!Stack.top} is applied to an empty stack. "]
val create : unit -> 'a t[@@ocaml.doc
                           " Return a new stack, initially empty. "]
val push : 'a -> 'a t -> unit[@@ocaml.doc
                               " [push x s] adds the element [x] at the top of stack [s]. "]
val pop : 'a t -> 'a[@@ocaml.doc
                      " [pop s] removes and returns the topmost element in stack [s],\n   or raises {!Empty} if the stack is empty. "]
val pop_opt : 'a t -> 'a option[@@ocaml.doc
                                 " [pop_opt s] removes and returns the topmost element in stack [s],\n   or returns [None] if the stack is empty.\n   @since 4.08 "]
val top : 'a t -> 'a[@@ocaml.doc
                      " [top s] returns the topmost element in stack [s],\n   or raises {!Empty} if the stack is empty. "]
val top_opt : 'a t -> 'a option[@@ocaml.doc
                                 " [top_opt s] returns the topmost element in stack [s],\n   or [None] if the stack is empty.\n   @since 4.08 "]
val clear : 'a t -> unit[@@ocaml.doc " Discard all elements from a stack. "]
val copy : 'a t -> 'a t[@@ocaml.doc " Return a copy of the given stack. "]
val is_empty : 'a t -> bool[@@ocaml.doc
                             " Return [true] if the given stack is empty, [false] otherwise. "]
val length : 'a t -> int[@@ocaml.doc
                          " Return the number of elements in a stack. Time complexity O(1) "]
val iter : ('a -> unit) -> 'a t -> unit[@@ocaml.doc
                                         " [iter f s] applies [f] in turn to all elements of [s],\n   from the element at the top of the stack to the element at the\n   bottom of the stack. The stack itself is unchanged. "]
val fold : ('b -> 'a -> 'b) -> 'b -> 'a t -> 'b[@@ocaml.doc
                                                 " [fold f accu s] is [(f (... (f (f accu x1) x2) ...) xn)]\n    where [x1] is the top of the stack, [x2] the second element,\n    and [xn] the bottom element. The stack is unchanged.\n    @since 4.03 "]
[@@@ocaml.text " {6 Iterators} "]
val to_seq : 'a t -> 'a Seq.t[@@ocaml.doc
                               " Iterate on the stack, top to bottom.\n    It is safe to modify the stack during iteration.\n    @since 4.07 "]
val add_seq : 'a t -> 'a Seq.t -> unit[@@ocaml.doc
                                        " Add the elements from the iterator on the top of the stack.\n    @since 4.07 "]
val of_seq : 'a Seq.t -> 'a t[@@ocaml.doc
                               " Create a stack from the iterator\n    @since 4.07 "]

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.text
  " Last-in first-out stacks.\n\n   This module implements stacks (LIFOs), with in-place modification.\n"]

type 'a t[@@ocaml.doc
           " The type of stacks containing elements of type ['a]. "]
  

exception Empty
  [@ocaml.doc
    " Raised when {!Stack.pop} or {!Stack.top} is applied to an empty stack. "]

val create : unit -> 'a t[@@ocaml.doc
                           " Return a new stack, initially empty. "]


val push : 'a -> 'a t -> unit[@@ocaml.doc
                               " [push x s] adds the element [x] at the top of stack [s]. "]


val pop : 'a t -> 'a[@@ocaml.doc
                      " [pop s] removes and returns the topmost element in stack [s],\n   or raises {!Empty} if the stack is empty. "]


val pop_opt : 'a t -> 'a option[@@ocaml.doc
                                 " [pop_opt s] removes and returns the topmost element in stack [s],\n   or returns [None] if the stack is empty.\n   @since 4.08 "]


val top : 'a t -> 'a[@@ocaml.doc
                      " [top s] returns the topmost element in stack [s],\n   or raises {!Empty} if the stack is empty. "]


val top_opt : 'a t -> 'a option[@@ocaml.doc
                                 " [top_opt s] returns the topmost element in stack [s],\n   or [None] if the stack is empty.\n   @since 4.08 "]


val clear : 'a t -> unit[@@ocaml.doc " Discard all elements from a stack. "]


val copy : 'a t -> 'a t[@@ocaml.doc " Return a copy of the given stack. "]


val is_empty : 'a t -> bool[@@ocaml.doc
                             " Return [true] if the given stack is empty, [false] otherwise. "]


val length : 'a t -> int[@@ocaml.doc
                          " Return the number of elements in a stack. Time complexity O(1) "]


val iter : ('a -> unit) -> 'a t -> unit[@@ocaml.doc
                                         " [iter f s] applies [f] in turn to all elements of [s],\n   from the element at the top of the stack to the element at the\n   bottom of the stack. The stack itself is unchanged. "]


val fold : ('b -> 'a -> 'b) -> 'b -> 'a t -> 'b[@@ocaml.doc
                                                 " [fold f accu s] is [(f (... (f (f accu x1) x2) ...) xn)]\n    where [x1] is the top of the stack, [x2] the second element,\n    and [xn] the bottom element. The stack is unchanged.\n    @since 4.03 "]


[@@@ocaml.text " {6 Iterators} "]

val to_seq : 'a t -> 'a Seq.t[@@ocaml.doc
                               " Iterate on the stack, top to bottom.\n    It is safe to modify the stack during iteration.\n    @since 4.07 "]


val add_seq : 'a t -> 'a Seq.t -> unit[@@ocaml.doc
                                        " Add the elements from the iterator on the top of the stack.\n    @since 4.07 "]


val of_seq : 'a Seq.t -> 'a t[@@ocaml.doc
                               " Create a stack from the iterator\n    @since 4.07 "]


*******************************
********* Typed GOSPEL ********
*******************************
module stack.mli

  Namespace: stack.mli
    Type symbols
      'a t
      
    Logic Symbols
      
    Exception Symbols
      Empty
      
    Namespaces
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    [@@@ocaml.text
      " Last-in first-out stacks.\n\n   This module implements stacks (LIFOs), with in-place modification.\n"]
    
    type 'a t
    
    
    exception Empty
    
    val create :
    unit -> 'a t[@@ocaml.doc " Return a new stack, initially empty. "]
    
    
    val push :
    'a -> 'a t -> unit[@@ocaml.doc
                        " [push x s] adds the element [x] at the top of stack [s]. "]
    
    
    val pop :
    'a t -> 'a[@@ocaml.doc
                " [pop s] removes and returns the topmost element in stack [s],\n   or raises {!Empty} if the stack is empty. "]
    
    
    val pop_opt :
    'a t -> 'a option[@@ocaml.doc
                       " [pop_opt s] removes and returns the topmost element in stack [s],\n   or returns [None] if the stack is empty.\n   @since 4.08 "]
    
    
    val top :
    'a t -> 'a[@@ocaml.doc
                " [top s] returns the topmost element in stack [s],\n   or raises {!Empty} if the stack is empty. "]
    
    
    val top_opt :
    'a t -> 'a option[@@ocaml.doc
                       " [top_opt s] returns the topmost element in stack [s],\n   or [None] if the stack is empty.\n   @since 4.08 "]
    
    
    val clear :
    'a t -> unit[@@ocaml.doc " Discard all elements from a stack. "]
    
    
    val copy :
    'a t -> 'a t[@@ocaml.doc " Return a copy of the given stack. "]
    
    
    val is_empty :
    'a t -> bool[@@ocaml.doc
                  " Return [true] if the given stack is empty, [false] otherwise. "]
    
    
    val length :
    'a t -> int[@@ocaml.doc
                 " Return the number of elements in a stack. Time complexity O(1) "]
    
    
    val iter :
    ('a -> unit) -> 'a t -> unit[@@ocaml.doc
                                  " [iter f s] applies [f] in turn to all elements of [s],\n   from the element at the top of the stack to the element at the\n   bottom of the stack. The stack itself is unchanged. "]
    
    
    val fold :
    ('b -> 'a -> 'b) -> 'b -> 'a t -> 'b[@@ocaml.doc
                                          " [fold f accu s] is [(f (... (f (f accu x1) x2) ...) xn)]\n    where [x1] is the top of the stack, [x2] the second element,\n    and [xn] the bottom element. The stack is unchanged.\n    @since 4.03 "]
    
    
    [@@@ocaml.text " {6 Iterators} "]
    
    val to_seq :
    'a t -> 'a Seq.t[@@ocaml.doc
                      " Iterate on the stack, top to bottom.\n    It is safe to modify the stack during iteration.\n    @since 4.07 "]
    
    
    val add_seq :
    'a t -> 'a Seq.t -> unit[@@ocaml.doc
                              " Add the elements from the iterator on the top of the stack.\n    @since 4.07 "]
    
    
    val of_seq :
    'a Seq.t -> 'a t[@@ocaml.doc
                      " Create a stack from the iterator\n    @since 4.07 "]
    


*** OK ***

