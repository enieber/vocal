
*******************************
********** Parsed file ********
*******************************
val g : 'a -> 'a
val n : 'a -> 'a
val o : 'a -> 'a
module F : functor (X : sig val x : int end) -> sig  end
module G : functor (X : sig val x : int end) -> sig  end
module H : functor (X : sig val x : int end) -> sig val x : int end

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

val g : 'a -> 'a


val n : 'a -> 'a


val o : 'a -> 'a


module F : functor (X : sig val x : int
                           end) -> sig  end

module G : functor (X : sig val x : int
                           end) -> sig  end

module H : functor (X : sig val x : int
                           end) -> sig val x : int
                                      end

*******************************
********* Typed GOSPEL ********
*******************************
module w32.mli

  Namespace: w32.mli
    Type symbols
      
    Logic Symbols
      
    Exception Symbols
      
    Namespaces
      Namespace: F
        Type symbols
          
        Logic Symbols
          
        Exception Symbols
          
        Namespaces
          
        Type Namespaces
          
      Namespace: G
        Type symbols
          
        Logic Symbols
          
        Exception Symbols
          
        Namespaces
          
        Type Namespaces
          
      Namespace: H
        Type symbols
          
        Logic Symbols
          
        Exception Symbols
          
        Namespaces
          
        Type Namespaces
          
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    val g : 'a -> 'a
    
    
    val n : 'a -> 'a
    
    
    val o : 'a -> 'a
    
    
    module F : functor (X : sig
                              val x : int
                              
                            end) -> sig
                                      
                                    end
    
    module G : functor (X#1 : sig
                                val x#1 : int
                                
                              end) -> sig
                                        
                                      end
    
    module H : functor (X#2 : sig
                                val x#2 : int
                                
                              end) -> sig
                                        val x#3 : int
                                        
                                      end


*** OK ***

