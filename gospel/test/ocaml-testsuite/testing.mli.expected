
*******************************
********** Parsed file ********
*******************************
val test : bool -> unit
val failure_test : ('a -> 'b) -> 'a -> string -> bool[@@ocaml.doc
                                                       " [test e] tests that [e] evaluates to [true]. "]
val test_raises_some_exc : ('a -> 'b) -> 'a -> bool
val test_raises_this_exc : exn -> ('a -> 'b) -> 'a -> bool
val test_raises_exc_p : (exn -> bool) -> ('a -> 'b) -> 'a -> bool
val scan_failure_test : ('a -> 'b) -> 'a -> bool

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

val test : bool -> unit


val failure_test : ('a -> 'b) -> 'a -> string -> bool[@@ocaml.doc
                                                       " [test e] tests that [e] evaluates to [true]. "]


val test_raises_some_exc : ('a -> 'b) -> 'a -> bool


val test_raises_this_exc : exn -> ('a -> 'b) -> 'a -> bool


val test_raises_exc_p : (exn -> bool) -> ('a -> 'b) -> 'a -> bool


val scan_failure_test : ('a -> 'b) -> 'a -> bool


*******************************
********* Typed GOSPEL ********
*******************************
module testing.mli

  Namespace: testing.mli
    Type symbols
      
    Logic Symbols
      
    Exception Symbols
      
    Namespaces
      
    Type Namespaces
      
  Signatures
    (*@ open Gospelstdlib *)
    
    val test : bool -> unit
    
    
    val failure_test :
    ('a -> 'b) -> 'a -> string -> bool[@@ocaml.doc
                                        " [test e] tests that [e] evaluates to [true]. "]
    
    
    val test_raises_some_exc : ('a -> 'b) -> 'a -> bool
    
    
    val test_raises_this_exc : exn -> ('a -> 'b) -> 'a -> bool
    
    
    val test_raises_exc_p : (exn -> bool) -> ('a -> 'b) -> 'a -> bool
    
    
    val scan_failure_test : ('a -> 'b) -> 'a -> bool
    


*** OK ***

