
*******************************
********** Parsed file ********
*******************************
[@@@ocaml.text
  "\n   This file tests the encoding of linebreak inside OCaml code by the\n   ocamldoc html backend.\n\n   Two slightly different aspects are tested in this very file.\n\n   - First, inside a \"pre\" tags, blanks character should not be escaped.\n   For instance, the generated html code for this test fragment should not\n   contain any <br> tag:\n   {[\n     let f x =\n       let g x =\n         let h x = x in\n         h x in\n       g x\n   ]}\n   See {{:http://caml.inria.fr/mantis/view.php?id=6341} MPR#6341} for more\n   details or the file Linebreaks.html generated by ocamldoc from this file.\n   - Second, outside of a \"pre\"  tags, blank characters in embedded code\n   should be escaped, in order to make them render in a \"pre\"-like fashion.\n   A good example should be the files type_{i Modulename}.html generated by\n   ocamldoc that should contains the signature of the module [Modulename] in\n   a \"code\" tags.\n   For instance with the following type definitions,\n"]
type a =
  | A 
type 'a b = {
  field: 'a }
type c =
  | C: 'a -> c 
type s = ..
type s +=  
  | B 
val x : a
module S : sig module I : sig  end end
module type s  = sig  end
class type d = object  end
exception E of {
  inline: int } 
[@@@ocaml.text
  " type_Linebreaks.html should contain\n\n{[\nsig\n  type a = A\n  type 'a b = { field : 'a; }\n  type c = C : 'a -> Linebreaks.c\n  type s = ..\n  type s += B\n  val x : Linebreaks.a\n  module S : sig module I : sig  end end\n  module type s = sig  end\n  class type d = object  end\n  exception E of { inline : int; }\nend\n]}\n\nwith <br> tags used for linebreaks.\nAnother example would be [ let f x =\nx] which is rendered with a <br> linebreak inside Linebreaks.html.\n\nSee {{:http://caml.inria.fr/mantis/view.php?id=7272}MPR#7272} for more\ninformation.\n\n"]

*******************************
****** GOSPEL translation *****
*******************************
(*@ open Gospelstdlib *)

[@@@ocaml.text
  "\n   This file tests the encoding of linebreak inside OCaml code by the\n   ocamldoc html backend.\n\n   Two slightly different aspects are tested in this very file.\n\n   - First, inside a \"pre\" tags, blanks character should not be escaped.\n   For instance, the generated html code for this test fragment should not\n   contain any <br> tag:\n   {[\n     let f x =\n       let g x =\n         let h x = x in\n         h x in\n       g x\n   ]}\n   See {{:http://caml.inria.fr/mantis/view.php?id=6341} MPR#6341} for more\n   details or the file Linebreaks.html generated by ocamldoc from this file.\n   - Second, outside of a \"pre\"  tags, blank characters in embedded code\n   should be escaped, in order to make them render in a \"pre\"-like fashion.\n   A good example should be the files type_{i Modulename}.html generated by\n   ocamldoc that should contains the signature of the module [Modulename] in\n   a \"code\" tags.\n   For instance with the following type definitions,\n"]

type a =
| A 
  

type 'a b = {
field: 'a }
  

type c =
| C: 'a -> c 
  

type s = ..
  

type s +=  
  | B 

val x : a


module S : sig module I : sig  end end

module type s  = sig  end

class type d = object  end

exception E of {
  inline: int } 

[@@@ocaml.text
  " type_Linebreaks.html should contain\n\n{[\nsig\n  type a = A\n  type 'a b = { field : 'a; }\n  type c = C : 'a -> Linebreaks.c\n  type s = ..\n  type s += B\n  val x : Linebreaks.a\n  module S : sig module I : sig  end end\n  module type s = sig  end\n  class type d = object  end\n  exception E of { inline : int; }\nend\n]}\n\nwith <br> tags used for linebreaks.\nAnother example would be [ let f x =\nx] which is rendered with a <br> linebreak inside Linebreaks.html.\n\nSee {{:http://caml.inria.fr/mantis/view.php?id=7272}MPR#7272} for more\ninformation.\n\n"]
File "Linebreaks.mli", line 36, characters 9-19:
Error: Not supported: type in constructors not supported
